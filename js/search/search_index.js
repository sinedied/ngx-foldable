var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/FoldableModule.html",[0,1.551,1,1.07]],["body/modules/FoldableModule.html",[0,2.377,1,2.095,2,1.89,3,2.926,4,2.327,5,2.327,6,2.327,7,1.753,8,0.073,9,1.191,10,2.103,11,2.926,12,2.327,13,1.563,14,0.9,15,0.738,16,0.9,17,2.99,18,1.086,19,3.76,20,3.76,21,2.926,22,2.926,23,2.926,24,1.132,25,1.132,26,0.434,27,1.366,28,1.132,29,0.582,30,3.76,31,3.76,32,1.065,33,2.926,34,0.9,35,2.99,36,2.99,37,1.303,38,2.327,39,1.065,40,0.593,41,0.738,42,0.055,43,0.055]],["title/directives/IfSpanDirective.html",[7,0.892,44,0.739]],["body/directives/IfSpanDirective.html",[7,1.24,8,0.074,14,0.519,15,0.426,16,0.519,18,0.935,25,1.228,26,0.521,27,1.391,29,0.593,32,0.842,34,0.519,39,0.842,40,0.611,41,0.426,42,0.038,43,0.038,44,0.775,45,0.627,46,2.635,47,1.09,48,2.574,49,4.409,50,1.121,51,1.098,52,0.883,53,2.574,54,2.574,55,2.813,56,2.574,57,2.574,58,2.574,59,2.574,60,2.574,61,1.118,62,2.574,63,2.002,64,2.98,65,1.341,66,0.935,67,1.118,68,1.09,69,1.627,70,2.42,71,0.342,72,2.003,73,1.24,74,1.627,75,3.413,76,3.413,77,1.346,78,0.935,79,1.342,80,3.079,81,3.413,82,4.619,83,2.133,84,1.725,85,2.157,86,2.157,87,1.099,88,2.157,89,2.574,90,4.519,91,1.946,92,3.079,93,2.574,94,3.83,95,2.42,96,3.83,97,1.946,98,2.574,99,1.118,100,1.725,101,1.627,102,1.785,103,2.157,104,1.725,105,2.574,106,1.725,107,2.953,108,1.725,109,3.079,110,2.157,111,1.627,112,0.627,113,0.426,114,0.426,115,1.346,116,0.511,117,2.002,118,1.24,119,1.24,120,1.946,121,1.09,122,1.09,123,0.935,124,1.627,125,1.342,126,1.346,127,1.541,128,1.09,129,1.725,130,1.725,131,1.725,132,1.725,133,0.902,134,1.61,135,1.725,136,3.079,137,3.413,138,1.725,139,3.413,140,3.652,141,1.725,142,3.079,143,1.627,144,0.519,145,0.519,146,1.09,147,1.09,148,1.725,149,1.09,150,1.946,151,1.725,152,1.028,153,1.09,154,1.725,155,1.946,156,0.627,157,1.725,158,0.627,159,1.09,160,0.627,161,1.725,162,2.574,163,1.725,164,2.574,165,3.079,166,2.574]],["title/injectables/ScreenContext.html",[29,0.38,167,1.07]],["body/injectables/ScreenContext.html",[8,0.074,14,0.624,15,0.512,16,0.624,18,0.753,26,0.517,28,0.886,29,0.53,32,0.97,34,0.624,39,0.512,40,0.584,41,0.512,42,0.043,43,0.043,50,1.929,51,0.918,52,0.679,61,1.242,66,0.753,67,1.069,71,0.411,72,2.29,73,0.753,77,1.539,78,1.242,83,2.135,99,1.242,102,2.056,112,0.753,113,1.036,114,1.115,116,0.411,123,1.069,127,1.483,144,0.886,145,1.121,152,1.361,156,0.753,158,0.753,160,1.069,167,1.282,168,2.074,169,1.83,170,1.311,171,1.282,172,1.86,173,1.539,174,1.539,175,1.539,176,1.86,177,2.244,178,2.353,179,2.581,180,1.713,181,2.074,182,2.074,183,2.353,184,2.074,185,2.581,186,1.86,187,1.282,188,2.353,189,2.074,190,2.162,191,1.78,192,0.633,193,0.844,194,2.581,195,1.86,196,2.074,197,2.074,198,2.074,199,1.352,200,1.789,201,2.162,202,1.311,203,1.539,204,1.86,205,1.86,206,1.86,207,1.311,208,1.311,209,1.311,210,1.311,211,1.085,212,1.085,213,0.904,214,1.085,215,1.311,216,1.311,217,1.282,218,1.311,219,1.311,220,2.162,221,1.311,222,1.311,223,1.311,224,1.311,225,1.491,226,1.311,227,2.353,228,1.86,229,1.311,230,1.282,231,1.311,232,1.311,233,1.86,234,1.86,235,1.311,236,1.311,237,1.311,238,1.311,239,1.311,240,1.311,241,1.311,242,1.311,243,1.311,244,1.311,245,1.311,246,1.311,247,1.311,248,1.311,249,1.085,250,1.311,251,1.311,252,1.085,253,0.624,254,1.539,255,1.085,256,1.311,257,1.311,258,1.311,259,1.311,260,1.311,261,1.311]],["title/interfaces/ScreenContextData.html",[177,1.284,217,1.07]],["body/interfaces/ScreenContextData.html",[8,0.074,14,0.659,15,0.54,16,0.659,18,0.795,26,0.51,28,0.659,29,0.473,32,0.989,34,0.659,39,0.54,40,0.606,41,0.54,42,0.045,43,0.045,50,1.896,51,0.94,52,0.699,61,1.384,66,0.795,67,1.11,71,0.434,73,0.795,78,0.795,87,1.06,99,1.279,112,0.795,113,0.989,114,1.142,116,0.434,123,1.11,127,1.509,144,0.92,145,0.659,152,1.374,156,0.795,158,0.795,160,1.11,167,1.332,169,0.953,170,1.383,171,0.953,172,1.383,173,1.144,174,1.144,175,1.144,176,1.383,177,2.23,178,1.383,179,2.695,180,1.81,183,1.931,185,2.409,186,1.383,187,0.953,188,2.226,190,2.226,191,1.81,192,0.644,193,0.869,194,2.695,195,1.383,199,1.457,200,1.841,201,2.226,202,1.383,203,1.598,204,1.931,205,1.931,206,1.931,207,1.383,208,1.383,209,1.383,210,1.383,211,1.144,212,1.144,213,0.953,214,1.144,215,1.383,216,1.383,217,1.332,218,1.931,219,1.931,220,2.226,221,1.383,222,1.383,223,1.383,224,1.383,225,1.534,226,1.383,227,2.409,228,1.931,229,1.383,230,1.332,231,1.383,232,1.383,233,1.931,234,1.931,235,1.383,236,1.383,237,1.383,238,1.383,239,1.383,240,1.383,241,1.383,242,1.383,243,1.383,244,1.383,245,1.383,246,1.383,247,1.383,248,1.383,249,1.144,250,1.383,251,1.383,252,1.144,253,0.659,254,1.598,255,1.144,256,1.383,257,1.383,258,1.383,259,1.383,260,1.383,261,1.383,262,1.383,263,2.378]],["title/directives/SplitLayoutDirective.html",[9,0.606,44,0.739]],["body/directives/SplitLayoutDirective.html",[8,0.074,9,0.831,10,0.879,14,0.379,15,0.311,16,0.379,18,0.733,24,1.295,25,1.107,26,0.519,27,0.733,28,0.607,29,0.548,32,0.779,34,0.379,37,1.791,39,1.028,40,0.702,41,0.311,42,0.03,43,0.03,44,1.014,45,0.457,50,1.542,51,1.078,52,0.892,61,0.733,63,1.651,65,0.879,66,0.733,67,0.917,68,0.796,69,1.275,71,0.25,73,0.457,74,1.275,77,1.055,78,0.733,83,1.762,85,1.275,86,1.275,87,0.95,88,1.824,91,1.996,97,1.275,99,1.048,101,1.595,102,1.509,103,0.796,107,1.595,110,1.275,111,1.275,112,0.457,113,0.311,114,0.311,116,0.836,118,1.377,119,1.285,121,1.595,122,1.595,123,1.285,126,1.055,127,1.377,128,0.796,133,1.32,134,0.659,143,1.275,144,0.379,145,0.379,146,0.796,147,0.796,149,1.275,150,1.996,152,1.237,153,0.796,155,0.796,156,1.048,158,0.917,159,1.824,160,0.457,180,0.879,191,0.879,192,0.548,193,0.779,199,0.733,230,1.257,253,0.379,264,2.236,265,0.796,266,2.017,267,1.824,268,2.017,269,1.824,270,1.595,271,1.57,272,2.886,273,2.524,274,2.017,275,2.205,276,2.017,277,2.017,278,2.017,279,2.324,280,1.762,281,2.324,282,2.017,283,2.017,284,1.57,285,1.815,286,1.542,287,1.275,288,2.017,289,2.622,290,2.524,291,2.205,292,2.078,293,1.259,294,2.886,295,1.259,296,1.996,297,2.017,298,1.964,299,2.753,300,2.129,301,1.259,302,2.324,303,2.524,304,2.017,305,2.017,306,1.259,307,1.259,308,1.259,309,1.259,310,1.259,311,1.259,312,1.996,313,1.85,314,1.595,315,0.98,316,1.964,317,0.98,318,0.98,319,1.509,320,1.509,321,1.1,322,0.98,323,1.57,324,1.57,325,2.116,326,1.824,327,1.055,328,1.57,329,1.996,330,1.275,331,1.275,332,0.98,333,1.595,334,2.245,335,2.129,336,1.595,337,0.879,338,0.98,339,0.98,340,0.98,341,0.98,342,0.98,343,0.659,344,0.98,345,0.98,346,2.524,347,1.57,348,1.259,349,1.259,350,1.964,351,2.524,352,2.524,353,2.886,354,2.017,355,1.259,356,3.369,357,2.524,358,1.964,359,1.964,360,2.524,361,1.259,362,2.524,363,2.129,364,0.98,365,1.595,366,2.951,367,1.964,368,0.98,369,2.017,370,2.017,371,1.57,372,2.017,373,0.98,374,1.259,375,0.98,376,1.259,377,1.259,378,1.964,379,0.98,380,0.98,381,1.964,382,2.017,383,2.524,384,2.017,385,1.259,386,1.259,387,1.259,388,1.259,389,0.98,390,1.259,391,1.259,392,1.259,393,1.259]],["title/interfaces/Window.html",[192,0.38,217,1.07]],["body/interfaces/Window.html",[8,0.074,14,0.686,15,0.562,16,0.686,26,0.498,28,0.686,29,0.487,32,1.004,34,0.686,39,0.562,40,0.623,41,0.562,42,0.046,43,0.046,50,1.833,51,0.888,52,0.623,61,1.141,66,0.827,67,1.141,71,0.452,73,0.827,78,0.827,87,0.686,99,1.141,112,0.827,113,0.957,114,1.1,116,0.452,123,1.141,127,1.528,144,0.946,145,0.686,152,1.384,156,0.827,158,0.827,160,1.141,167,1.369,169,0.993,170,1.44,171,0.993,172,1.44,173,1.191,174,1.191,175,1.191,176,1.44,177,2.2,178,1.44,179,2.452,180,1.568,183,1.986,185,2.452,186,1.44,187,0.993,188,2.659,190,1.986,191,1.69,192,0.652,193,0.775,194,2.572,195,1.44,199,1.307,200,1.643,201,1.986,202,1.44,203,1.643,204,1.986,205,1.986,206,1.986,207,1.44,208,1.44,209,1.44,210,1.44,211,1.191,212,1.191,213,0.993,214,1.191,215,1.44,216,1.44,217,1.369,218,1.44,219,1.44,220,2.274,221,1.44,222,1.44,223,1.44,224,1.44,225,1.568,226,1.44,227,2.452,228,1.986,229,1.44,230,1.369,231,1.44,232,1.44,233,1.986,234,1.986,235,1.44,236,1.44,237,1.44,238,1.44,239,1.44,240,1.44,241,1.44,242,1.44,243,1.44,244,1.44,245,1.44,246,1.44,247,1.44,248,1.44,249,1.191,250,1.44,251,1.44,252,1.191,253,0.686,254,1.643,255,1.191,256,1.44,257,1.44,258,1.44,259,1.44,260,1.44,261,1.44,262,1.44,263,2.446,394,3.143]],["title/directives/WindowDirective.html",[10,1.07,44,0.739]],["body/directives/WindowDirective.html",[8,0.074,9,0.918,10,1.06,14,0.482,15,0.395,16,0.482,18,0.884,24,0.733,25,1.064,26,0.511,27,1.194,29,0.577,32,0.918,34,0.482,37,0.698,38,1.246,39,0.811,40,0.318,41,0.395,42,0.036,43,0.036,44,1.121,45,0.582,51,0.955,52,0.791,65,1.06,66,0.884,67,1.069,68,1.012,69,1.538,71,0.483,73,0.582,74,1.538,77,1.272,78,0.884,79,1.246,83,1.539,85,1.538,86,1.538,87,0.733,88,1.538,95,1.538,101,1.86,102,0.837,103,1.012,107,1.86,110,1.538,111,1.538,112,0.582,113,0.395,114,0.395,118,1.069,119,0.582,123,1.448,126,0.837,127,1.352,128,1.012,133,0.837,134,2.135,143,1.538,144,0.482,145,0.482,146,1.012,147,1.012,152,0.733,153,1.012,155,1.012,156,1.194,158,1.194,160,0.582,180,1.06,191,1.06,192,0.68,193,0.726,199,0.884,200,1.272,225,0.698,230,1.06,249,1.272,253,0.482,267,2.446,269,2.353,270,2.235,271,1.894,275,1.539,279,2.078,280,1.719,281,1.538,284,1.894,285,1.541,286,0.698,291,1.539,292,0.837,296,1.538,298,2.29,300,1.86,302,2.078,313,1.719,314,1.538,315,1.246,316,2.29,317,1.246,319,1.719,321,1.622,325,1.272,329,1.012,330,1.86,331,1.012,335,1.86,337,1.282,340,1.246,341,1.246,342,1.246,343,0.837,344,1.246,345,1.246,347,2.29,350,2.558,358,1.894,359,1.894,363,2.993,364,2.751,365,2.773,366,3.668,367,3.178,368,2.751,371,2.29,373,2.558,375,1.246,378,1.894,379,1.246,380,1.246,381,2.29,389,1.246,395,1.601,396,2.434,397,2.434,398,2.434,399,2.434,400,2.434,401,2.434,402,2.434,403,2.434,404,2.434,405,1.894,406,2.434,407,2.434,408,1.894,409,2.434,410,2.897,411,2.29,412,1.601,413,2.434,414,3.536,415,1.601,416,2.943,417,3.536,418,3.288,419,1.246,420,1.601,421,1.601,422,2.434,423,2.434,424,1.601,425,1.601,426,1.601,427,1.601,428,3.723,429,1.601,430,1.601,431,1.601,432,1.601,433,1.601,434,2.943,435,1.601,436,1.601]],["title/changelog.html",[437,1.309,438,1.309,439,2.071]],["body/changelog.html",[8,0.052,9,0.674,24,1.069,26,0.315,27,0.993,29,0.611,40,0.542,42,0.052,43,0.052,44,1.187,45,0.993,52,0.542,70,2.492,95,1.727,113,0.674,171,1.547,187,1.718,192,0.55,193,0.674,213,1.191,214,1.429,225,1.718,252,2.262,254,1.429,255,2.062,270,2.244,280,1.429,285,1.191,286,1.191,287,1.727,299,2.127,320,1.429,321,1.191,325,1.429,326,1.727,327,1.429,337,1.547,343,1.856,408,2.127,411,2.127,440,2.733,441,3.6,442,4.175,443,2.733,444,3.944,445,3.55,446,3.55,447,3.944,448,3.451,449,2.733,450,2.733,451,2.733,452,2.733,453,2.733,454,2.733,455,4.577,456,2.733,457,4.577,458,4.577,459,3.55,460,2.733,461,2.733,462,2.733,463,2.733,464,2.733,465,2.733,466,2.733,467,2.733,468,3.451,469,2.733,470,2.733,471,3.55,472,2.733,473,2.127,474,2.733,475,2.733,476,2.733,477,2.733,478,2.733,479,2.733,480,2.733,481,2.733,482,2.733,483,2.733,484,3.55,485,3.55,486,3.55,487,2.733,488,2.733,489,2.733,490,2.733,491,2.733,492,2.733,493,2.733,494,2.733,495,2.733,496,2.733,497,2.733,498,2.733,499,2.733,500,2.733,501,2.733,502,2.733,503,2.733,504,2.733,505,2.733,506,2.733,507,2.733,508,2.763,509,2.127,510,2.733,511,2.733,512,2.127,513,2.733,514,3.55,515,2.733,516,2.733,517,3.55,518,2.733,519,2.733,520,2.127,521,2.733,522,2.733,523,2.733]],["title/index.html",[71,0.411,437,1.309,438,1.309]],["body/index.html",[1,1.481,8,0.071,13,1.337,15,0.631,21,1.99,22,2.645,23,2.971,24,0.77,25,1.225,26,0.537,27,1.235,28,1.023,29,0.63,32,0.838,33,1.99,40,0.674,41,0.838,42,0.05,43,0.05,45,0.929,64,3.296,65,1.481,70,1.617,113,0.942,116,0.507,117,2.277,118,0.929,119,0.929,124,2.148,126,1.337,134,1.337,144,0.77,145,0.77,171,1.115,174,1.337,175,1.337,187,1.115,192,0.527,199,1.538,253,1.023,279,2.148,280,1.337,281,1.617,287,2.148,289,1.99,327,1.337,343,1.777,363,2.148,405,2.971,410,1.99,419,1.99,468,1.99,473,1.99,508,3.166,509,1.99,512,2.971,520,1.99,524,4.235,525,4.443,526,2.558,527,2.558,528,2.558,529,2.558,530,3.818,531,3.818,532,2.558,533,3.399,534,2.645,535,3.399,536,2.558,537,2.558,538,2.558,539,2.558,540,2.558,541,2.558,542,2.558,543,2.558,544,2.558,545,2.558,546,2.558,547,3.399,548,2.558,549,3.399,550,2.558,551,4.443,552,3.399,553,3.818,554,3.818,555,3.818,556,2.558,557,2.558,558,2.558,559,1.99,560,2.558,561,2.558,562,2.558,563,2.558,564,2.558,565,2.558,566,2.558,567,2.558,568,2.558,569,2.558,570,2.558,571,2.558,572,2.558,573,2.558,574,2.558,575,2.558,576,2.558,577,2.558,578,3.818,579,2.558,580,2.558,581,2.558,582,2.558,583,2.558,584,3.818,585,2.558,586,2.558,587,2.558,588,2.558,589,2.558,590,3.399,591,3.399,592,2.558,593,2.558,594,2.558,595,3.399,596,2.558,597,2.558,598,2.558,599,2.558,600,2.558,601,2.558]],["title/license.html",[437,1.309,438,1.309,602,1.612]],["body/license.html",[8,0.058,13,1.687,42,0.058,43,0.058,115,1.687,116,0.782,203,1.687,441,2.511,534,2.511,559,2.511,602,2.511,603,3.942,604,4.257,605,3.226,606,3.226,607,3.226,608,3.942,609,3.226,610,3.226,611,3.226,612,3.226,613,3.226,614,3.226,615,3.942,616,4.764,617,3.226,618,3.226,619,3.226,620,4.257,621,3.226,622,3.942,623,3.226,624,3.226,625,3.226,626,3.226,627,3.226,628,3.226,629,3.226,630,3.226,631,3.942,632,3.226,633,3.226,634,3.226,635,3.226,636,3.226,637,3.226,638,3.942,639,3.942,640,3.226,641,3.226,642,3.226,643,3.226,644,3.226,645,3.226,646,3.226,647,3.226,648,3.226,649,3.226,650,3.226,651,3.226,652,3.226,653,3.226,654,3.226,655,3.226,656,3.226,657,3.226,658,3.226,659,3.226,660,3.226,661,3.226,662,3.226,663,3.226,664,3.226,665,3.226,666,3.226,667,3.226,668,3.226]],["title/modules.html",[2,2.09]],["body/modules.html",[1,1.657,2,2.403,8,0.064,42,0.064,43,0.064,253,1.144,448,2.958,669,3.802,670,3.802]],["title/overview.html",[671,2.573]],["body/overview.html",[0,2.182,1,2.117,3,3.195,4,2.686,5,2.686,6,2.686,7,1.725,8,0.07,9,1.171,10,2.069,11,3.195,12,2.686,13,1.805,42,0.06,43,0.06,45,1.254,167,1.504,262,2.182,365,2.595,671,2.686,672,3.452,673,2.686]],["title/miscellaneous/typealiases.html",[674,1.083,675,2.941]],["body/miscellaneous/typealiases.html",[7,1.164,8,0.071,9,0.968,24,1.182,25,1.182,26,0.453,28,1.182,37,1.711,42,0.058,43,0.058,46,2.025,47,2.481,51,1.091,52,0.877,55,2.481,63,1.676,71,0.636,87,0.965,91,2.682,114,0.968,115,1.676,116,0.636,117,2.313,118,1.541,119,1.541,120,2.481,169,1.396,192,0.496,193,0.79,264,2.025,265,2.796,267,2.481,275,2.053,285,1.396,286,1.396,291,2.053,292,2.053,296,2.025,300,2.025,312,2.025,313,1.676,314,2.025,318,2.494,319,1.676,320,1.676,321,1.396,332,2.494,333,2.025,336,2.025,337,1.396,674,1.676,676,3.204,677,3.302,678,2.494,679,3.055,680,2.494,681,3.204]],["title/miscellaneous/variables.html",[674,1.083,682,2.288]],["body/miscellaneous/variables.html",[7,0.829,8,0.073,9,0.777,24,0.687,25,1.085,26,0.534,37,0.995,39,0.958,42,0.046,43,0.046,46,1.443,47,1.99,51,1.101,52,0.912,55,2.661,61,1.143,63,1.194,65,1.372,71,0.453,87,1.299,97,1.99,99,1.41,114,1.005,115,1.194,116,0.715,117,2.361,118,1.567,119,1.567,120,2.454,121,2.574,122,2.574,124,2.661,125,1.777,133,1.646,149,1.99,150,2.574,152,1.268,159,2.727,169,0.995,173,1.646,192,0.354,193,0.777,211,1.646,212,1.646,213,1.372,264,1.443,265,2.454,269,1.99,275,2.256,285,0.995,286,1.372,291,2.202,292,2.03,302,2.661,312,1.443,313,1.194,319,1.646,320,1.646,321,1.372,322,1.777,323,2.45,324,2.45,325,2.489,326,2.454,327,1.646,328,2.45,329,1.443,330,1.443,331,1.443,333,1.99,334,1.777,335,1.443,336,1.443,337,0.995,338,1.777,339,1.777,673,2.45,674,1.194,677,2.804,678,1.777,679,2.45,680,1.777,682,1.777,683,3.148,684,3.603,685,2.284,686,3.148,687,3.148,688,4.073,689,2.284,690,2.284]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":366,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["03",{"_index":455,"title":{},"body":{"changelog.html":{}}}],["0683aa3",{"_index":476,"title":{},"body":{"changelog.html":{}}}],["083b648",{"_index":515,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":365,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"overview.html":{}}}],["1.0.0",{"_index":494,"title":{},"body":{"changelog.html":{}}}],["1.0.1",{"_index":490,"title":{},"body":{"changelog.html":{}}}],["1.0.2",{"_index":488,"title":{},"body":{"changelog.html":{}}}],["1.0.3",{"_index":483,"title":{},"body":{"changelog.html":{}}}],["1.0.4",{"_index":479,"title":{},"body":{"changelog.html":{}}}],["1.0.5",{"_index":470,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":462,"title":{},"body":{"changelog.html":{}}}],["1.1.1",{"_index":454,"title":{},"body":{"changelog.html":{}}}],["10",{"_index":427,"title":{},"body":{"directives/WindowDirective.html":{}}}],["100",{"_index":422,"title":{},"body":{"directives/WindowDirective.html":{}}}],["100vh",{"_index":351,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["11",{"_index":442,"title":{},"body":{"changelog.html":{}}}],["12",{"_index":484,"title":{},"body":{"changelog.html":{}}}],["14da071",{"_index":478,"title":{},"body":{"changelog.html":{}}}],["16",{"_index":471,"title":{},"body":{"changelog.html":{}}}],["17",{"_index":463,"title":{},"body":{"changelog.html":{}}}],["19",{"_index":456,"title":{},"body":{"changelog.html":{}}}],["1acd46e",{"_index":465,"title":{},"body":{"changelog.html":{}}}],["1fr",{"_index":356,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["2",{"_index":673,"title":{},"body":{"overview.html":{},"miscellaneous/variables.html":{}}}],["2.0.0",{"_index":440,"title":{},"body":{"changelog.html":{}}}],["2021",{"_index":441,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["22",{"_index":443,"title":{},"body":{"changelog.html":{}}}],["3",{"_index":672,"title":{},"body":{"overview.html":{}}}],["3240712",{"_index":467,"title":{},"body":{"changelog.html":{}}}],["3ee5543",{"_index":500,"title":{},"body":{"changelog.html":{}}}],["466a9d7",{"_index":516,"title":{},"body":{"changelog.html":{}}}],["4708aff",{"_index":523,"title":{},"body":{"changelog.html":{}}}],["487885f",{"_index":503,"title":{},"body":{"changelog.html":{}}}],["4aa85c7",{"_index":489,"title":{},"body":{"changelog.html":{}}}],["536764f",{"_index":495,"title":{},"body":{"changelog.html":{}}}],["582e83e",{"_index":506,"title":{},"body":{"changelog.html":{}}}],["7e66b70",{"_index":497,"title":{},"body":{"changelog.html":{}}}],["8446001",{"_index":461,"title":{},"body":{"changelog.html":{}}}],["8bdb155",{"_index":501,"title":{},"body":{"changelog.html":{}}}],["90ad184",{"_index":510,"title":{},"body":{"changelog.html":{}}}],["962620d",{"_index":521,"title":{},"body":{"changelog.html":{}}}],["9fadf70",{"_index":504,"title":{},"body":{"changelog.html":{}}}],["9ff473a",{"_index":519,"title":{},"body":{"changelog.html":{}}}],["_",{"_index":344,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["a444236",{"_index":452,"title":{},"body":{"changelog.html":{}}}],["above",{"_index":637,"title":{},"body":{"license.html":{}}}],["absolute",{"_index":321,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["acb3fff",{"_index":469,"title":{},"body":{"changelog.html":{}}}],["accepts",{"_index":59,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["accessors",{"_index":77,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["action",{"_index":662,"title":{},"body":{"license.html":{}}}],["active",{"_index":125,"title":{},"body":{"directives/IfSpanDirective.html":{},"miscellaneous/variables.html":{}}}],["add",{"_index":468,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["added",{"_index":271,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["addition",{"_index":282,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["afab1c4",{"_index":450,"title":{},"body":{"changelog.html":{}}}],["aliases",{"_index":676,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow",{"_index":466,"title":{},"body":{"changelog.html":{}}}],["allows",{"_index":172,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["along",{"_index":278,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["and/or",{"_index":629,"title":{},"body":{"license.html":{}}}],["angular",{"_index":343,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{}}}],["angular/core",{"_index":34,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["angular/platform",{"_index":317,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["any).segments",{"_index":257,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["anymore",{"_index":250,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["api",{"_index":255,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["apis",{"_index":447,"title":{},"body":{"changelog.html":{}}}],["app",{"_index":23,"title":{},"body":{"modules/FoldableModule.html":{},"index.html":{}}}],["appcomponent",{"_index":561,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":558,"title":{},"body":{"index.html":{}}}],["arising",{"_index":666,"title":{},"body":{"license.html":{}}}],["asobject",{"_index":178,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["asobservable",{"_index":145,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["assign",{"_index":403,"title":{},"body":{"directives/WindowDirective.html":{}}}],["associated",{"_index":617,"title":{},"body":{"license.html":{}}}],["authors",{"_index":655,"title":{},"body":{"license.html":{}}}],["available",{"_index":191,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["b1c68ac",{"_index":493,"title":{},"body":{"changelog.html":{}}}],["b2a3632",{"_index":507,"title":{},"body":{"changelog.html":{}}}],["b84fc9f",{"_index":482,"title":{},"body":{"changelog.html":{}}}],["before",{"_index":572,"title":{},"body":{"index.html":{}}}],["behaves",{"_index":56,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["between",{"_index":273,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["boolean",{"_index":61,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["bottom",{"_index":372,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["breaking",{"_index":453,"title":{},"body":{"changelog.html":{}}}],["browse",{"_index":670,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":253,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"index.html":{},"modules.html":{}}}],["bug",{"_index":457,"title":{},"body":{"changelog.html":{}}}],["build",{"_index":22,"title":{},"body":{"modules/FoldableModule.html":{},"index.html":{}}}],["built",{"_index":597,"title":{},"body":{"index.html":{}}}],["c",{"_index":605,"title":{},"body":{"license.html":{}}}],["calc(env(viewport",{"_index":362,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["case",{"_index":150,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"miscellaneous/variables.html":{}}}],["change",{"_index":230,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["changed",{"_index":565,"title":{},"body":{"index.html":{}}}],["changelog",{"_index":439,"title":{"changelog.html":{}},"body":{}}],["changes",{"_index":187,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["charge",{"_index":612,"title":{},"body":{"license.html":{}}}],["check",{"_index":327,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["checks",{"_index":323,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/variables.html":{}}}],["choose",{"_index":272,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["chrome",{"_index":542,"title":{},"body":{"index.html":{}}}],["claim",{"_index":658,"title":{},"body":{"license.html":{}}}],["class",{"_index":41,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["clone",{"_index":580,"title":{},"body":{"index.html":{}}}],["cluster_foldablemodule",{"_index":4,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["cluster_foldablemodule_declarations",{"_index":5,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["cluster_foldablemodule_exports",{"_index":6,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["code",{"_index":553,"title":{},"body":{"index.html":{}}}],["column",{"_index":354,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["columngap",{"_index":361,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["commit",{"_index":518,"title":{},"body":{"changelog.html":{}}}],["common",{"_index":346,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["components",{"_index":526,"title":{},"body":{"index.html":{}}}],["condition",{"_index":90,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["conditions",{"_index":115,"title":{},"body":{"directives/IfSpanDirective.html":{},"license.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["conduct",{"_index":571,"title":{},"body":{"index.html":{}}}],["connection",{"_index":667,"title":{},"body":{"license.html":{}}}],["console.log('screen",{"_index":564,"title":{},"body":{"index.html":{}}}],["console.warn('getwindowsegments",{"_index":248,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["const",{"_index":123,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["constructor",{"_index":78,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["constructor(element",{"_index":293,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["constructor(private",{"_index":562,"title":{},"body":{"index.html":{}}}],["constructor(screencontext",{"_index":79,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/WindowDirective.html":{}}}],["container",{"_index":267,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{}}}],["contains",{"_index":19,"title":{},"body":{"modules/FoldableModule.html":{}}}],["context",{"_index":113,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{}}}],["context.ts",{"_index":170,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["context.ts:37",{"_index":181,"title":{},"body":{"injectables/ScreenContext.html":{}}}],["context.ts:68",{"_index":189,"title":{},"body":{"injectables/ScreenContext.html":{}}}],["context.ts:75",{"_index":196,"title":{},"body":{"injectables/ScreenContext.html":{}}}],["context.ts:82",{"_index":198,"title":{},"body":{"injectables/ScreenContext.html":{}}}],["context.ts:89",{"_index":184,"title":{},"body":{"injectables/ScreenContext.html":{}}}],["context.ts:96",{"_index":182,"title":{},"body":{"injectables/ScreenContext.html":{}}}],["contract",{"_index":663,"title":{},"body":{"license.html":{}}}],["contribute",{"_index":569,"title":{},"body":{"index.html":{}}}],["contributing",{"_index":566,"title":{},"body":{"index.html":{}}}],["copies",{"_index":631,"title":{},"body":{"license.html":{}}}],["copy",{"_index":615,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":604,"title":{},"body":{"license.html":{}}}],["creating",{"_index":268,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["css",{"_index":270,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{}}}],["current",{"_index":50,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{}}}],["currentcontext",{"_index":223,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["currently",{"_index":400,"title":{},"body":{"directives/WindowDirective.html":{}}}],["d383609",{"_index":487,"title":{},"body":{"changelog.html":{}}}],["damages",{"_index":659,"title":{},"body":{"license.html":{}}}],["db13ef1",{"_index":513,"title":{},"body":{"changelog.html":{}}}],["deal",{"_index":619,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":668,"title":{},"body":{"license.html":{}}}],["declarations",{"_index":30,"title":{},"body":{"modules/FoldableModule.html":{}}}],["declare",{"_index":215,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["default",{"_index":159,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":83,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["defines",{"_index":91,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"miscellaneous/typealiases.html":{}}}],["demo",{"_index":508,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["demos",{"_index":600,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":3,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["deployment",{"_index":492,"title":{},"body":{"changelog.html":{}}}],["description",{"_index":18,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["design",{"_index":277,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["destroyed",{"_index":224,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["detect",{"_index":687,"title":{},"body":{"miscellaneous/variables.html":{}}}],["detected",{"_index":300,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{}}}],["dev",{"_index":585,"title":{},"body":{"index.html":{}}}],["device",{"_index":199,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["device's",{"_index":176,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["devices",{"_index":27,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{}}}],["devices/demos",{"_index":598,"title":{},"body":{"index.html":{}}}],["df1ca39",{"_index":449,"title":{},"body":{"changelog.html":{}}}],["different",{"_index":274,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["direction",{"_index":313,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["directive",{"_index":44,"title":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{}}}],["directives",{"_index":45,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{},"overview.html":{}}}],["display",{"_index":347,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["displayed",{"_index":279,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["distribute",{"_index":627,"title":{},"body":{"license.html":{}}}],["docs",{"_index":491,"title":{},"body":{"changelog.html":{}}}],["documentation",{"_index":534,"title":{},"body":{"index.html":{},"license.html":{}}}],["domrect",{"_index":194,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["dual",{"_index":117,"title":{},"body":{"directives/IfSpanDirective.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["dualhorizontal",{"_index":689,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dualhorizontalviewport",{"_index":212,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["dualvertical",{"_index":690,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dualverticalviewport",{"_index":211,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["duo",{"_index":531,"title":{},"body":{"index.html":{}}}],["edge",{"_index":540,"title":{},"body":{"index.html":{}}}],["element",{"_index":296,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{}}}],["elementref",{"_index":294,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["elsetemplateref",{"_index":130,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["elseviewref",{"_index":132,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["embeddedviewref",{"_index":109,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["emitting",{"_index":186,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["emulation",{"_index":535,"title":{},"body":{"index.html":{}}}],["enable",{"_index":546,"title":{},"body":{"index.html":{}}}],["enumeration",{"_index":121,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"miscellaneous/variables.html":{}}}],["env(viewport",{"_index":367,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["error('segment",{"_index":430,"title":{},"body":{"directives/WindowDirective.html":{}}}],["evaluates",{"_index":96,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["event",{"_index":654,"title":{},"body":{"license.html":{}}}],["example",{"_index":126,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["except",{"_index":58,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["experiences",{"_index":528,"title":{},"body":{"index.html":{}}}],["experimental",{"_index":544,"title":{},"body":{"index.html":{}}}],["export",{"_index":40,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{}}}],["exports",{"_index":31,"title":{},"body":{"modules/FoldableModule.html":{}}}],["express",{"_index":645,"title":{},"body":{"license.html":{}}}],["expression",{"_index":62,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["extra",{"_index":474,"title":{},"body":{"changelog.html":{}}}],["false",{"_index":97,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"miscellaneous/variables.html":{}}}],["fc26aae",{"_index":451,"title":{},"body":{"changelog.html":{}}}],["fdifspan",{"_index":70,"title":{},"body":{"directives/IfSpanDirective.html":{},"changelog.html":{},"index.html":{}}}],["fdifspan(condition",{"_index":135,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["fdifspanelse",{"_index":75,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["fdifspanelse(templateref",{"_index":141,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["fdifspanthen",{"_index":76,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["fdifspanthen(templateref",{"_index":138,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["fdsplitlayout",{"_index":289,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"index.html":{}}}],["fdsplitlayout(options",{"_index":376,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["fdwindow",{"_index":410,"title":{},"body":{"directives/WindowDirective.html":{},"index.html":{}}}],["fdwindow(segment",{"_index":424,"title":{},"body":{"directives/WindowDirective.html":{}}}],["feature",{"_index":536,"title":{},"body":{"index.html":{}}}],["features",{"_index":444,"title":{},"body":{"changelog.html":{}}}],["file",{"_index":16,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["files",{"_index":618,"title":{},"body":{"license.html":{}}}],["filter",{"_index":206,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["finish",{"_index":511,"title":{},"body":{"changelog.html":{}}}],["first",{"_index":280,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{}}}],["fitness",{"_index":650,"title":{},"body":{"license.html":{}}}],["fix",{"_index":502,"title":{},"body":{"changelog.html":{}}}],["fixes",{"_index":458,"title":{},"body":{"changelog.html":{}}}],["flags",{"_index":545,"title":{},"body":{"index.html":{}}}],["flex",{"_index":319,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["flexdirection",{"_index":352,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["foldable",{"_index":525,"title":{},"body":{"index.html":{}}}],["foldableimport",{"_index":556,"title":{},"body":{"index.html":{}}}],["foldablemodule",{"_index":1,"title":{"modules/FoldableModule.html":{}},"body":{"modules/FoldableModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["foldables",{"_index":601,"title":{},"body":{"index.html":{}}}],["follow",{"_index":547,"title":{},"body":{"index.html":{}}}],["following",{"_index":636,"title":{},"body":{"license.html":{}}}],["format",{"_index":304,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["free",{"_index":611,"title":{},"body":{"license.html":{}}}],["fromevent",{"_index":202,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["fromevent(matchmedia(dualhorizontalviewport",{"_index":231,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["fromevent(matchmedia(dualverticalviewport",{"_index":229,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["full",{"_index":533,"title":{},"body":{"index.html":{}}}],["function",{"_index":394,"title":{},"body":{"interfaces/Window.html":{}}}],["furnished",{"_index":634,"title":{},"body":{"license.html":{}}}],["gallery",{"_index":591,"title":{},"body":{"index.html":{}}}],["getcomputedstyle(this.element.nativeelement",{"_index":390,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["getismultiscreen",{"_index":197,"title":{},"body":{"injectables/ScreenContext.html":{}}}],["getlayoutmode",{"_index":306,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["getreadingdirection",{"_index":310,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["gets",{"_index":183,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["getscreencontext",{"_index":244,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["getscreenspanning",{"_index":195,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["getting",{"_index":437,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["getwindoworder",{"_index":308,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["getwindowsegments",{"_index":188,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["given",{"_index":324,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/variables.html":{}}}],["global",{"_index":216,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["google",{"_index":541,"title":{},"body":{"index.html":{}}}],["granted",{"_index":610,"title":{},"body":{"license.html":{}}}],["grid",{"_index":320,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["gridarea",{"_index":418,"title":{},"body":{"directives/WindowDirective.html":{}}}],["gridautoflow",{"_index":360,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["gridtemplateareas",{"_index":357,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["gridtemplatecolumns",{"_index":355,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["gridtemplaterows",{"_index":369,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["height",{"_index":350,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["help",{"_index":21,"title":{},"body":{"modules/FoldableModule.html":{},"index.html":{}}}],["here",{"_index":549,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":609,"title":{},"body":{"license.html":{}}}],["holders",{"_index":656,"title":{},"body":{"license.html":{}}}],["holds",{"_index":218,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["horizontal",{"_index":118,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["host",{"_index":314,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{}}}],["hostbinding",{"_index":315,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["hostbinding('style",{"_index":379,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["href=\"splitlayoutmode",{"_index":305,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["ifspandirective",{"_index":7,"title":{"directives/IfSpanDirective.html":{}},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["ignore",{"_index":101,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["ignored",{"_index":239,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["implement",{"_index":514,"title":{},"body":{"changelog.html":{}}}],["implementation",{"_index":593,"title":{},"body":{"index.html":{}}}],["implements",{"_index":66,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["implied",{"_index":646,"title":{},"body":{"license.html":{}}}],["import",{"_index":32,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["imports",{"_index":557,"title":{},"body":{"index.html":{}}}],["included",{"_index":640,"title":{},"body":{"license.html":{}}}],["including",{"_index":622,"title":{},"body":{"license.html":{}}}],["inconsistent",{"_index":464,"title":{},"body":{"changelog.html":{}}}],["index",{"_index":71,"title":{"index.html":{}},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":14,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["information",{"_index":219,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["init",{"_index":496,"title":{},"body":{"changelog.html":{}}}],["initial",{"_index":517,"title":{},"body":{"changelog.html":{}}}],["initialization",{"_index":477,"title":{},"body":{"changelog.html":{}}}],["injectable",{"_index":167,"title":{"injectables/ScreenContext.html":{}},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"overview.html":{}}}],["injectables",{"_index":168,"title":{},"body":{"injectables/ScreenContext.html":{}}}],["input",{"_index":110,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["inputs",{"_index":74,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["install",{"_index":555,"title":{},"body":{"index.html":{}}}],["instead",{"_index":60,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["instructions",{"_index":548,"title":{},"body":{"index.html":{}}}],["interface",{"_index":217,"title":{"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["interfaces",{"_index":262,"title":{},"body":{"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"overview.html":{}}}],["ismultiscreen",{"_index":180,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["isn't",{"_index":420,"title":{},"body":{"directives/WindowDirective.html":{}}}],["issue",{"_index":574,"title":{},"body":{"index.html":{}}}],["issues",{"_index":459,"title":{},"body":{"changelog.html":{}}}],["isvalid",{"_index":328,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/variables.html":{}}}],["js",{"_index":342,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["justifycontent",{"_index":348,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["keep",{"_index":283,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["kind",{"_index":644,"title":{},"body":{"license.html":{}}}],["lasorsa",{"_index":607,"title":{},"body":{"license.html":{}}}],["latest",{"_index":538,"title":{},"body":{"index.html":{}}}],["layout",{"_index":24,"title":{},"body":{"modules/FoldableModule.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["layout.directive",{"_index":38,"title":{},"body":{"modules/FoldableModule.html":{},"directives/WindowDirective.html":{}}}],["layout.directive.ts",{"_index":265,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["layout.directive.ts:196",{"_index":297,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["layout.directive.ts:205",{"_index":295,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["layout.directive.ts:222",{"_index":307,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["layout.directive.ts:231",{"_index":309,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["layout.directive.ts:240",{"_index":311,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["layoutmode",{"_index":290,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["layouts",{"_index":505,"title":{},"body":{"changelog.html":{}}}],["layoutstyle",{"_index":375,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["layoutstyles",{"_index":345,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["layoutstyles[mode][spanning][segment",{"_index":436,"title":{},"body":{"directives/WindowDirective.html":{}}}],["layoutstyles[this.mode].common",{"_index":392,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["layoutstyles[this.mode][reverse",{"_index":393,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["left",{"_index":364,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["lefttoright",{"_index":338,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/variables.html":{}}}],["liability",{"_index":660,"title":{},"body":{"license.html":{}}}],["liable",{"_index":657,"title":{},"body":{"license.html":{}}}],["library",{"_index":551,"title":{},"body":{"index.html":{}}}],["license",{"_index":602,"title":{"license.html":{}},"body":{"license.html":{}}}],["limitation",{"_index":623,"title":{},"body":{"license.html":{}}}],["limited",{"_index":647,"title":{},"body":{"license.html":{}}}],["link",{"_index":39,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"miscellaneous/variables.html":{}}}],["list",{"_index":190,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["live",{"_index":532,"title":{},"body":{"index.html":{}}}],["locally",{"_index":579,"title":{},"body":{"index.html":{}}}],["look",{"_index":340,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["ltr",{"_index":336,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["ma",{"_index":341,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["machine",{"_index":582,"title":{},"body":{"index.html":{}}}],["make",{"_index":570,"title":{},"body":{"index.html":{}}}],["making",{"_index":587,"title":{},"body":{"index.html":{}}}],["map",{"_index":205,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["match",{"_index":162,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["matchcondition",{"_index":148,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["matches",{"_index":53,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["matching",{"_index":43,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["matchmedia(dualhorizontalviewport).matches",{"_index":247,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["matchmedia(dualverticalviewport).matches",{"_index":246,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["maxheight",{"_index":423,"title":{},"body":{"directives/WindowDirective.html":{}}}],["meaning",{"_index":401,"title":{},"body":{"directives/WindowDirective.html":{}}}],["media",{"_index":213,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["merchantability",{"_index":649,"title":{},"body":{"license.html":{}}}],["merge",{"_index":203,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"license.html":{}}}],["metadata",{"_index":68,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["methods",{"_index":72,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{}}}],["microsoft",{"_index":539,"title":{},"body":{"index.html":{}}}],["min",{"_index":485,"title":{},"body":{"changelog.html":{}}}],["miscellaneous",{"_index":674,"title":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":603,"title":{},"body":{"license.html":{}}}],["mode",{"_index":52,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["modes",{"_index":322,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/variables.html":{}}}],["modifications",{"_index":588,"title":{},"body":{"index.html":{}}}],["modify",{"_index":625,"title":{},"body":{"license.html":{}}}],["module",{"_index":0,"title":{"modules/FoldableModule.html":{}},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/FoldableModule.html":{},"modules.html":{}}}],["multi",{"_index":25,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["multiple",{"_index":200,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["name",{"_index":86,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["naming",{"_index":499,"title":{},"body":{"changelog.html":{}}}],["new",{"_index":225,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"changelog.html":{}}}],["ng",{"_index":522,"title":{},"body":{"changelog.html":{}}}],["ngif",{"_index":57,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["ngmodule",{"_index":33,"title":{},"body":{"modules/FoldableModule.html":{},"index.html":{}}}],["ngondestroy",{"_index":73,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["ngx",{"_index":524,"title":{},"body":{"index.html":{}}}],["none",{"_index":120,"title":{},"body":{"directives/IfSpanDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["noninfringement",{"_index":653,"title":{},"body":{"license.html":{}}}],["normal",{"_index":333,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["note",{"_index":404,"title":{},"body":{"directives/WindowDirective.html":{}}}],["notice",{"_index":638,"title":{},"body":{"license.html":{}}}],["npm",{"_index":554,"title":{},"body":{"index.html":{}}}],["null",{"_index":107,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["number",{"_index":416,"title":{},"body":{"directives/WindowDirective.html":{}}}],["object",{"_index":688,"title":{},"body":{"miscellaneous/variables.html":{}}}],["observable",{"_index":185,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["obtaining",{"_index":614,"title":{},"body":{"license.html":{}}}],["old",{"_index":446,"title":{},"body":{"changelog.html":{}}}],["ondestroy",{"_index":67,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["one",{"_index":407,"title":{},"body":{"directives/WindowDirective.html":{}}}],["option",{"_index":408,"title":{},"body":{"directives/WindowDirective.html":{},"changelog.html":{}}}],["optional",{"_index":88,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["options",{"_index":299,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"changelog.html":{}}}],["options.trim().split",{"_index":386,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["order",{"_index":285,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["orientation",{"_index":473,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["otherwise",{"_index":665,"title":{},"body":{"license.html":{}}}],["out",{"_index":13,"title":{},"body":{"modules/FoldableModule.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":671,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["packages",{"_index":583,"title":{},"body":{"index.html":{}}}],["param",{"_index":133,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/variables.html":{}}}],["parameter",{"_index":288,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["parameters",{"_index":85,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["parent",{"_index":266,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["parseint(segment",{"_index":426,"title":{},"body":{"directives/WindowDirective.html":{}}}],["parseoptions(options",{"_index":385,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["particular",{"_index":651,"title":{},"body":{"license.html":{}}}],["permission",{"_index":608,"title":{},"body":{"license.html":{}}}],["permit",{"_index":632,"title":{},"body":{"license.html":{}}}],["person",{"_index":613,"title":{},"body":{"license.html":{}}}],["persons",{"_index":633,"title":{},"body":{"license.html":{}}}],["photo",{"_index":590,"title":{},"body":{"index.html":{}}}],["pipe",{"_index":232,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["placed",{"_index":397,"title":{},"body":{"directives/WindowDirective.html":{}}}],["please",{"_index":251,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["portions",{"_index":642,"title":{},"body":{"license.html":{}}}],["position",{"_index":373,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["posting",{"_index":573,"title":{},"body":{"index.html":{}}}],["private",{"_index":127,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["project",{"_index":512,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["projects/.../if",{"_index":680,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/.../media",{"_index":683,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/.../screen",{"_index":678,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/.../split",{"_index":677,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/lib/src/core/foldable.module.ts",{"_index":17,"title":{},"body":{"modules/FoldableModule.html":{}}}],["projects/lib/src/core/if",{"_index":46,"title":{},"body":{"directives/IfSpanDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/lib/src/core/media",{"_index":685,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/lib/src/core/screen",{"_index":169,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/lib/src/core/split",{"_index":264,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/lib/src/core/window.directive.ts",{"_index":395,"title":{},"body":{"directives/WindowDirective.html":{}}}],["projects/lib/src/core/window.directive.ts:115",{"_index":413,"title":{},"body":{"directives/WindowDirective.html":{}}}],["projects/lib/src/core/window.directive.ts:121",{"_index":412,"title":{},"body":{"directives/WindowDirective.html":{}}}],["properties",{"_index":263,"title":{},"body":{"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["provided",{"_index":559,"title":{},"body":{"index.html":{},"license.html":{}}}],["providedin",{"_index":221,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["publish",{"_index":626,"title":{},"body":{"license.html":{}}}],["pull",{"_index":575,"title":{},"body":{"index.html":{}}}],["purpose",{"_index":652,"title":{},"body":{"license.html":{}}}],["queries",{"_index":214,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["queries.ts",{"_index":684,"title":{},"body":{"miscellaneous/variables.html":{}}}],["query",{"_index":173,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["re",{"_index":592,"title":{},"body":{"index.html":{}}}],["react",{"_index":595,"title":{},"body":{"index.html":{}}}],["read",{"_index":405,"title":{},"body":{"directives/WindowDirective.html":{},"index.html":{}}}],["reading",{"_index":312,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["readingdirection",{"_index":292,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["readingdirection.lefttoright",{"_index":391,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["readingdirection.righttoleft",{"_index":435,"title":{},"body":{"directives/WindowDirective.html":{}}}],["readonly",{"_index":220,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["real",{"_index":460,"title":{},"body":{"changelog.html":{}}}],["receive",{"_index":174,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"index.html":{}}}],["refresh",{"_index":472,"title":{},"body":{"changelog.html":{}}}],["regardless",{"_index":560,"title":{},"body":{"index.html":{}}}],["related",{"_index":589,"title":{},"body":{"index.html":{}}}],["relative",{"_index":374,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["remove",{"_index":445,"title":{},"body":{"changelog.html":{}}}],["rendered",{"_index":318,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/typealiases.html":{}}}],["repaints",{"_index":475,"title":{},"body":{"changelog.html":{}}}],["replaysubject",{"_index":204,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["replaysubject(1",{"_index":226,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["repository",{"_index":581,"title":{},"body":{"index.html":{}}}],["represents",{"_index":681,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["request",{"_index":576,"title":{},"body":{"index.html":{}}}],["requires",{"_index":537,"title":{},"body":{"index.html":{}}}],["reset",{"_index":12,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["restriction",{"_index":621,"title":{},"body":{"license.html":{}}}],["results",{"_index":42,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":152,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":102,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["reverse",{"_index":286,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["reversed",{"_index":409,"title":{},"body":{"directives/WindowDirective.html":{}}}],["revert",{"_index":498,"title":{},"body":{"changelog.html":{}}}],["right",{"_index":368,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["rightmost",{"_index":406,"title":{},"body":{"directives/WindowDirective.html":{}}}],["rights",{"_index":624,"title":{},"body":{"license.html":{}}}],["righttoleft",{"_index":339,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/variables.html":{}}}],["root",{"_index":222,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["row",{"_index":353,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["rowgap",{"_index":370,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["rtl",{"_index":337,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["run",{"_index":578,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":112,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["rxjs/operators",{"_index":210,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["safestyle",{"_index":316,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["same",{"_index":284,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["sample",{"_index":594,"title":{},"body":{"index.html":{}}}],["screen",{"_index":26,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["screencontext",{"_index":29,"title":{"injectables/ScreenContext.html":{}},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{}}}],["screencontextdata",{"_index":177,"title":{"interfaces/ScreenContextData.html":{}},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["screencontextsubscription",{"_index":128,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["screens",{"_index":201,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["screenspanning",{"_index":114,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["screenspanning.dualhorizontal",{"_index":158,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["screenspanning.dualvertical",{"_index":156,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["screenspanning.none",{"_index":160,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["second",{"_index":281,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["see",{"_index":28,"title":{},"body":{"modules/FoldableModule.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["segment",{"_index":363,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["segment0",{"_index":358,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["segment1",{"_index":359,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["segments",{"_index":193,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["selector",{"_index":69,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["sell",{"_index":630,"title":{},"body":{"license.html":{}}}],["server",{"_index":586,"title":{},"body":{"index.html":{}}}],["service",{"_index":171,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["services",{"_index":527,"title":{},"body":{"index.html":{}}}],["set",{"_index":134,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["setfdifspan(condition",{"_index":104,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["setfdifspanelse(templateref",{"_index":108,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["setfdifspanthen(templateref",{"_index":106,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["setfdsplitlayout(options",{"_index":301,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["setfdwindow(segment",{"_index":415,"title":{},"body":{"directives/WindowDirective.html":{}}}],["sets",{"_index":298,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["setup",{"_index":550,"title":{},"body":{"index.html":{}}}],["shall",{"_index":639,"title":{},"body":{"license.html":{}}}],["sharereplay",{"_index":207,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["sharereplay(1",{"_index":236,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["show",{"_index":94,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["showing",{"_index":105,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["shown",{"_index":92,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["shows",{"_index":48,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["similar",{"_index":596,"title":{},"body":{"index.html":{}}}],["single",{"_index":65,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["software",{"_index":616,"title":{},"body":{"license.html":{}}}],["source",{"_index":15,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["space",{"_index":349,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["span",{"_index":95,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{}}}],["span.directive",{"_index":35,"title":{},"body":{"modules/FoldableModule.html":{}}}],["span.directive.ts",{"_index":47,"title":{},"body":{"directives/IfSpanDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["span.directive.ts:64",{"_index":89,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["span.directive.ts:73",{"_index":98,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["span.directive.ts:81",{"_index":93,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["span.directive.ts:85",{"_index":84,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["span.directive.ts:99",{"_index":100,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["spancondition",{"_index":55,"title":{},"body":{"directives/IfSpanDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["spancondition.horizontal",{"_index":154,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["spancondition.multi",{"_index":151,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["spancondition.vertical",{"_index":157,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["spanning",{"_index":51,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["spanning.ts",{"_index":679,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["specified",{"_index":54,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["specify",{"_index":396,"title":{},"body":{"directives/WindowDirective.html":{}}}],["split",{"_index":37,"title":{},"body":{"modules/FoldableModule.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["splitlayout",{"_index":411,"title":{},"body":{"directives/WindowDirective.html":{},"changelog.html":{}}}],["splitlayoutdirective",{"_index":9,"title":{"directives/SplitLayoutDirective.html":{}},"body":{"modules/FoldableModule.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["splitlayoutmode",{"_index":275,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["splitlayoutmode.absolute",{"_index":331,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/variables.html":{}}}],["splitlayoutmode.flex",{"_index":329,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/variables.html":{}}}],["splitlayoutmode.grid",{"_index":330,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/variables.html":{}}}],["splitlayoutmode.isvalid(mode",{"_index":387,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["start",{"_index":584,"title":{},"body":{"index.html":{}}}],["started",{"_index":438,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["startwith",{"_index":208,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["startwith(1",{"_index":235,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["steps",{"_index":577,"title":{},"body":{"index.html":{}}}],["strict",{"_index":481,"title":{},"body":{"changelog.html":{}}}],["string",{"_index":302,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/variables.html":{}}}],["style",{"_index":380,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["subject",{"_index":635,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":628,"title":{},"body":{"license.html":{}}}],["subscribe",{"_index":146,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["subscribe((context",{"_index":563,"title":{},"body":{"index.html":{}}}],["subscription",{"_index":111,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["substantial",{"_index":641,"title":{},"body":{"license.html":{}}}],["such",{"_index":529,"title":{},"body":{"index.html":{}}}],["suit",{"_index":276,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["support",{"_index":448,"title":{},"body":{"changelog.html":{},"modules.html":{}}}],["supported",{"_index":249,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["sure",{"_index":419,"title":{},"body":{"directives/WindowDirective.html":{},"index.html":{}}}],["surface",{"_index":530,"title":{},"body":{"index.html":{}}}],["svg",{"_index":669,"title":{},"body":{"modules.html":{}}}],["swap",{"_index":434,"title":{},"body":{"directives/WindowDirective.html":{}}}],["switch",{"_index":149,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"miscellaneous/variables.html":{}}}],["takeuntil",{"_index":209,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["takeuntil(this.destroyed",{"_index":237,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["target",{"_index":414,"title":{},"body":{"directives/WindowDirective.html":{}}}],["template",{"_index":49,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["templateref",{"_index":82,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["test",{"_index":509,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["text",{"_index":63,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["thentemplateref",{"_index":129,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["thenviewref",{"_index":131,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.condition",{"_index":136,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.currentcontext",{"_index":227,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.currentcontext.ismultiscreen",{"_index":243,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.currentcontext.screenspanning",{"_index":234,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.currentcontext.windowsegments",{"_index":242,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.destroyed$.complete",{"_index":241,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.destroyed$.next",{"_index":240,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.direction",{"_index":384,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["this.elsetemplateref",{"_index":142,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.elseviewref",{"_index":165,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.getscreencontext",{"_index":228,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.getscreenspanning",{"_index":233,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.getwindowsegments",{"_index":245,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.layoutstyle",{"_index":381,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["this.matchcondition",{"_index":163,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.mode",{"_index":382,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["this.order",{"_index":383,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["this.parseoptions(options",{"_index":377,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["this.screencontext",{"_index":144,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["this.screencontext$.subscribe",{"_index":238,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.screencontext.ismultiscreen",{"_index":153,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["this.screencontext.screenspanning",{"_index":155,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["this.screencontextsubscription",{"_index":143,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["this.screencontextsubscription.unsubscribe",{"_index":147,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["this.segment",{"_index":428,"title":{},"body":{"directives/WindowDirective.html":{}}}],["this.splitlayout.layoutmode",{"_index":431,"title":{},"body":{"directives/WindowDirective.html":{}}}],["this.splitlayout.readingdirection",{"_index":433,"title":{},"body":{"directives/WindowDirective.html":{}}}],["this.splitlayout.windoworder",{"_index":432,"title":{},"body":{"directives/WindowDirective.html":{}}}],["this.thentemplateref",{"_index":139,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.thenviewref",{"_index":140,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.updatestyle",{"_index":378,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["this.updateview",{"_index":137,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.viewcontainer.clear",{"_index":164,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.viewcontainer.createembeddedview",{"_index":166,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["throw",{"_index":429,"title":{},"body":{"directives/WindowDirective.html":{}}}],["top",{"_index":371,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["tort",{"_index":664,"title":{},"body":{"license.html":{}}}],["true",{"_index":99,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["two",{"_index":399,"title":{},"body":{"directives/WindowDirective.html":{}}}],["type",{"_index":87,"title":{},"body":{"directives/IfSpanDirective.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":675,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":425,"title":{},"body":{"directives/WindowDirective.html":{}}}],["typescript",{"_index":480,"title":{},"body":{"changelog.html":{}}}],["undefined",{"_index":303,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["up",{"_index":398,"title":{},"body":{"directives/WindowDirective.html":{}}}],["update",{"_index":252,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["updates",{"_index":175,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"index.html":{}}}],["updatestyle",{"_index":389,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["updateview",{"_index":161,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["usage",{"_index":552,"title":{},"body":{"index.html":{}}}],["use",{"_index":116,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"index.html":{},"license.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":269,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/variables.html":{}}}],["using",{"_index":287,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"changelog.html":{},"index.html":{}}}],["utilities",{"_index":20,"title":{},"body":{"modules/FoldableModule.html":{}}}],["valid",{"_index":326,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["value",{"_index":325,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":122,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"miscellaneous/variables.html":{}}}],["variables",{"_index":682,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":486,"title":{},"body":{"changelog.html":{}}}],["versions",{"_index":543,"title":{},"body":{"index.html":{}}}],["vertical",{"_index":119,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["viewcontainer",{"_index":80,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["viewcontainerref",{"_index":81,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["viewport",{"_index":686,"title":{},"body":{"miscellaneous/variables.html":{}}}],["viewports",{"_index":124,"title":{},"body":{"directives/IfSpanDirective.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["visible",{"_index":64,"title":{},"body":{"directives/IfSpanDirective.html":{},"index.html":{}}}],["visualviewport",{"_index":254,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["void",{"_index":103,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["vs",{"_index":332,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/typealiases.html":{}}}],["warranties",{"_index":648,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":643,"title":{},"body":{"license.html":{}}}],["web",{"_index":599,"title":{},"body":{"index.html":{}}}],["welcome",{"_index":568,"title":{},"body":{"index.html":{}}}],["whether",{"_index":661,"title":{},"body":{"license.html":{}}}],["width",{"_index":417,"title":{},"body":{"directives/WindowDirective.html":{}}}],["window",{"_index":192,"title":{"interfaces/Window.html":{}},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["window.directive",{"_index":36,"title":{},"body":{"modules/FoldableModule.html":{}}}],["window.innerheight",{"_index":261,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["window.innerwidth",{"_index":260,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["window.pagexoffset",{"_index":258,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["window.pageyoffset",{"_index":259,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["window.visualviewport",{"_index":256,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["windowdirective",{"_index":10,"title":{"directives/WindowDirective.html":{}},"body":{"modules/FoldableModule.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"overview.html":{}}}],["windoworder",{"_index":291,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["windoworder.isvalid(order",{"_index":388,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["windoworder.normal",{"_index":334,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/variables.html":{}}}],["windoworder.reverse",{"_index":335,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/variables.html":{}}}],["windowsegments",{"_index":179,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["within",{"_index":402,"title":{},"body":{"directives/WindowDirective.html":{}}}],["without",{"_index":620,"title":{},"body":{"license.html":{}}}],["work",{"_index":520,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["working",{"_index":421,"title":{},"body":{"directives/WindowDirective.html":{}}}],["yohan",{"_index":606,"title":{},"body":{"license.html":{}}}],["you're",{"_index":567,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":11,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/FoldableModule.html":{"url":"modules/FoldableModule.html","title":"module - FoldableModule","body":"\n                   \n\n\n\n\n    Modules\n    FoldableModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_FoldableModule\n\n\n\ncluster_FoldableModule_declarations\n\n\n\ncluster_FoldableModule_exports\n\n\n\n\nIfSpanDirective\n\nIfSpanDirective\n\n\n\nFoldableModule\n\nFoldableModule\n\nFoldableModule -->\n\nIfSpanDirective->FoldableModule\n\n\n\n\n\nSplitLayoutDirective\n\nSplitLayoutDirective\n\nFoldableModule -->\n\nSplitLayoutDirective->FoldableModule\n\n\n\n\n\nWindowDirective\n\nWindowDirective\n\nFoldableModule -->\n\nWindowDirective->FoldableModule\n\n\n\n\n\nIfSpanDirective \n\nIfSpanDirective \n\nIfSpanDirective  -->\n\nFoldableModule->IfSpanDirective \n\n\n\n\n\nSplitLayoutDirective \n\nSplitLayoutDirective \n\nSplitLayoutDirective  -->\n\nFoldableModule->SplitLayoutDirective \n\n\n\n\n\nWindowDirective \n\nWindowDirective \n\nWindowDirective  -->\n\nFoldableModule->WindowDirective \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/lib/src/core/foldable.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            This module contains utilities to help you build your app layout for multi\nscreen devices.\nSee SplitLayoutDirective,\nWindowDirective,\nIfSpanDirective,\nScreenContext\n\n        \n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            IfSpanDirective\n                        \n                        \n                            SplitLayoutDirective\n                        \n                        \n                            WindowDirective\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            IfSpanDirective\n                        \n                        \n                            SplitLayoutDirective\n                        \n                        \n                            WindowDirective\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { IfSpanDirective } from './if-span.directive';\nimport { WindowDirective } from './window.directive';\nimport { SplitLayoutDirective } from './split-layout.directive';\n\n/**\n * This module contains utilities to help you build your app layout for multi\n * screen devices.\n *\n * See {@link SplitLayoutDirective},\n * {@link WindowDirective},\n * {@link IfSpanDirective},\n * {@link ScreenContext}\n */\n@NgModule({\n  declarations: [IfSpanDirective, WindowDirective, SplitLayoutDirective],\n  exports: [IfSpanDirective, WindowDirective, SplitLayoutDirective],\n})\nexport class FoldableModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/IfSpanDirective.html":{"url":"directives/IfSpanDirective.html","title":"directive - IfSpanDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  IfSpanDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/lib/src/core/if-span.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                Shows template only if the current screen spanning mode matches\nspecified SpanCondition.\nBehaves like ngIf, except that it accepts a SpanCondition instead of\na boolean expression.\nThis text will only be visible on multi screen devices.\nThis text will only be visible on single screen devices.\nThis text will only be visible on multi screen devices.\n\n            \n\n            \n                Implements\n            \n            \n                            OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [fdIfSpan]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnDestroy\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                fdIfSpan\n                            \n                            \n                                fdIfSpanElse\n                            \n                            \n                                fdIfSpanThen\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    fdIfSpan\n                                \n                                \n                                    fdIfSpanThen\n                                \n                                \n                                    fdIfSpanElse\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(screenContext: ScreenContext, viewContainer: ViewContainerRef, templateRef: TemplateRef)\n                    \n                \n                        \n                            \n                                Defined in projects/lib/src/core/if-span.directive.ts:85\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        screenContext\n                                                  \n                                                        \n                                                                        ScreenContext\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        viewContainer\n                                                  \n                                                        \n                                                                        ViewContainerRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        templateRef\n                                                  \n                                                        \n                                                                    TemplateRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        fdIfSpan\n                    \n                \n                        \n                            \n                                    Defined in projects/lib/src/core/if-span.directive.ts:64\n                            \n                        \n                \n                    \n                        The spanning mode condition that defines if the template should be shown.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        fdIfSpanElse\n                    \n                \n                        \n                            \n                                    Defined in projects/lib/src/core/if-span.directive.ts:81\n                            \n                        \n                \n                    \n                        A template to show if the span condition evaluates to false.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        fdIfSpanThen\n                    \n                \n                        \n                            \n                                    Defined in projects/lib/src/core/if-span.directive.ts:73\n                            \n                        \n                \n                    \n                        A template to show if the span condition evaluates to true.\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in projects/lib/src/core/if-span.directive.ts:99\n                \n            \n\n\n            \n                \n                    ignore\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        fdIfSpan\n                    \n                \n\n\n                \n                    \n                        setfdIfSpan(condition: SpanCondition)\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/if-span.directive.ts:64\n                                \n                            \n                    \n                        \n                                The spanning mode condition that defines if the template should be shown.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                        Description\n                                                \n                                            \n                                            \n                                                    \n                                                            condition\n                                                    \n                                                            \n                                                                            SpanCondition\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                            \n                                                                    The spanning mode condition for showing the template.\n\n                                                            \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        fdIfSpanThen\n                    \n                \n\n\n                \n                    \n                        setfdIfSpanThen(templateRef: TemplateRef | null)\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/if-span.directive.ts:73\n                                \n                            \n                    \n                        \n                                A template to show if the span condition evaluates to true.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            templateRef\n                                                    \n                                                            \n                                                                        TemplateRef | null\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        fdIfSpanElse\n                    \n                \n\n\n                \n                    \n                        setfdIfSpanElse(templateRef: TemplateRef | null)\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/if-span.directive.ts:81\n                                \n                            \n                    \n                        \n                                A template to show if the span condition evaluates to false.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            templateRef\n                                                    \n                                                            \n                                                                        TemplateRef | null\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n    \n\n\n    \n        import {\n  Directive,\n  EmbeddedViewRef,\n  Input,\n  OnDestroy,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { ScreenContext } from './screen-context';\nimport { ScreenSpanning } from './screen-spanning';\n\n/** Spanning mode conditions for use with {@link IfSpanDirective}. */\nexport type SpanCondition =\n  | 'dual-horizontal'\n  | 'dual-vertical'\n  | 'none'\n  | 'multi';\n/**\n * Enumeration of spanning mode conditions values for use with\n * {@link IfSpanDirective}.\n */\nexport const SpanCondition = {\n  /** Screen spanning mode is dual horizontal viewports. */\n  Vertical: 'dual-horizontal' as SpanCondition,\n  /** Screen spanning mode is dual vertical viewports. */\n  Horizontal: 'dual-vertical' as SpanCondition,\n  /** No screen spanning (single screen mode). */\n  None: 'none' as SpanCondition,\n  /** Any screen spanning mode is active (multi screen mode). */\n  Multi: 'multi' as SpanCondition,\n};\n\n/**\n * Shows template only if the current screen spanning mode matches\n * specified {@link SpanCondition}.\n *\n * Behaves like `ngIf`, except that it accepts a {@link SpanCondition} instead of\n * a boolean expression.\n *\n * @example\n * This text will only be visible on multi screen devices.\n * @example\n * This text will only be visible on single screen devices.\n * This text will only be visible on multi screen devices.\n */\n@Directive({\n  selector: '[fdIfSpan]',\n})\nexport class IfSpanDirective implements OnDestroy {\n  private screenContextSubscription: Subscription | null = null;\n  private condition: SpanCondition | null = null;\n  private thenTemplateRef: TemplateRef | null = null;\n  private elseTemplateRef: TemplateRef | null = null;\n  private thenViewRef: EmbeddedViewRef | null = null;\n  private elseViewRef: EmbeddedViewRef | null = null;\n\n  /**\n   * The spanning mode condition that defines if the template should be shown.\n   *\n   * @param condition The spanning mode condition for showing the template.\n   */\n  @Input()\n  set fdIfSpan(condition: SpanCondition) {\n    if (condition !== this.condition) {\n      this.condition = condition;\n      this.updateView();\n    }\n  }\n\n  /** A template to show if the span condition evaluates to true. */\n  @Input()\n  set fdIfSpanThen(templateRef: TemplateRef | null) {\n    this.thenTemplateRef = templateRef;\n    this.thenViewRef = null;\n    this.updateView();\n  }\n\n  /** A template to show if the span condition evaluates to false. */\n  @Input()\n  set fdIfSpanElse(templateRef: TemplateRef | null) {\n    this.elseTemplateRef = templateRef;\n    this.thenViewRef = null;\n    this.updateView();\n  }\n\n  constructor(\n    private screenContext: ScreenContext,\n    private viewContainer: ViewContainerRef,\n    templateRef: TemplateRef\n  ) {\n    this.thenTemplateRef = templateRef;\n    this.screenContextSubscription = this.screenContext\n      .asObservable()\n      .subscribe(() => this.updateView());\n  }\n\n  /** ignore */\n  ngOnDestroy() {\n    if (this.screenContextSubscription !== null) {\n      this.screenContextSubscription.unsubscribe();\n    }\n  }\n\n  private matchCondition(): boolean {\n    switch (this.condition) {\n      case SpanCondition.Multi:\n        return this.screenContext.isMultiScreen;\n      case SpanCondition.Horizontal:\n        return this.screenContext.screenSpanning === ScreenSpanning.DualVertical;\n      case SpanCondition.Vertical:\n        return this.screenContext.screenSpanning === ScreenSpanning.DualHorizontal;\n      default:\n        return this.screenContext.screenSpanning === ScreenSpanning.None;\n    }\n  }\n\n  private updateView() {\n    const match = this.matchCondition();\n\n    if (match) {\n      if (!this.thenViewRef) {\n        this.viewContainer.clear();\n        this.elseViewRef = null;\n        if (this.thenTemplateRef) {\n          this.thenViewRef = this.viewContainer.createEmbeddedView(\n            this.thenTemplateRef\n          );\n        }\n      }\n    } else {\n      if (!this.elseViewRef) {\n        this.viewContainer.clear();\n        this.thenViewRef = null;\n        if (this.elseTemplateRef) {\n          this.elseViewRef = this.viewContainer.createEmbeddedView(\n            this.elseTemplateRef\n          );\n        }\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ScreenContext.html":{"url":"injectables/ScreenContext.html","title":"injectable - ScreenContext","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ScreenContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/lib/src/core/screen-context.ts\n        \n\n\n            \n                Description\n            \n            \n                This service allows to query and receive updates about current device's\nscreen context.\nSee ScreenContextData\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                asObject\n                            \n                            \n                                asObservable\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    windowSegments\n                                \n                                \n                                    screenSpanning\n                                \n                                \n                                    isMultiScreen\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in projects/lib/src/core/screen-context.ts:37\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        asObject\n                        \n                    \n                \n            \n            \n                \nasObject()\n                \n            \n\n\n            \n                \n                    Defined in projects/lib/src/core/screen-context.ts:96\n                \n            \n\n\n            \n                \n                    Gets the current screen context.\n\n\n                    \n                        Returns :         ScreenContextData\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        asObservable\n                        \n                    \n                \n            \n            \n                \nasObservable()\n                \n            \n\n\n            \n                \n                    Defined in projects/lib/src/core/screen-context.ts:89\n                \n            \n\n\n            \n                \n                    Gets an observable emitting when the screen context changes.\n\n\n                    \n                        Returns :         Observable\n\n                    \n                \n            \n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        windowSegments\n                    \n                \n\n                \n                    \n                        getwindowSegments()\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/screen-context.ts:68\n                                \n                            \n                    \n                        \n                                The list of available window segments.\n\n\n                                \n                                    Returns :     DOMRect[]\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        screenSpanning\n                    \n                \n\n                \n                    \n                        getscreenSpanning()\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/screen-context.ts:75\n                                \n                            \n                    \n                        \n                                The current screen spanning mode.\n\n\n                                \n                                    Returns :         ScreenSpanning\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        isMultiScreen\n                    \n                \n\n                \n                    \n                        getisMultiScreen()\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/screen-context.ts:82\n                                \n                            \n                    \n                        \n                                True is current device have multiple screens available.\n\n\n                                \n                                    Returns :         boolean\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Injectable, OnDestroy } from '@angular/core';\nimport { fromEvent, merge, Observable, ReplaySubject } from 'rxjs';\nimport { map, filter, shareReplay, startWith, takeUntil } from 'rxjs/operators';\nimport { dualVerticalViewport, dualHorizontalViewport } from './media-queries';\nimport { ScreenSpanning } from './screen-spanning';\n\ndeclare global {\n  interface Window {\n    getWindowSegments: () => DOMRect[];\n  }\n}\n\n/**\n * Holds information about the device screen context.\n */\nexport interface ScreenContextData {\n  /** The list of available window segments. */\n  readonly windowSegments: DOMRect[];\n  /** The current screen spanning mode. */\n  readonly screenSpanning: ScreenSpanning;\n  /** True is current device have multiple screens available. */\n  readonly isMultiScreen: boolean;\n}\n\n/**\n * This service allows to query and receive updates about current device's\n * screen context.\n *\n * See {@link ScreenContextData}\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ScreenContext implements ScreenContextData, OnDestroy {\n  private currentContext: ScreenContextData;\n  private screenContext$: Observable;\n  private destroyed$: ReplaySubject = new ReplaySubject(1);\n\n  constructor() {\n    this.currentContext = this.getScreenContext();\n    this.screenContext$ = merge(\n      fromEvent(matchMedia(dualVerticalViewport), 'change'),\n      fromEvent(matchMedia(dualHorizontalViewport), 'change')\n    ).pipe(\n      filter(\n        () => this.getScreenSpanning() !== this.currentContext.screenSpanning\n      ),\n      startWith(1),\n      map(() => {\n        this.currentContext = this.getScreenContext();\n        return this.currentContext;\n      }),\n      shareReplay(1),\n      takeUntil(this.destroyed$)\n    );\n    this.screenContext$.subscribe();\n  }\n\n  /** @ignored */\n  ngOnDestroy() {\n    this.destroyed$.next();\n    this.destroyed$.complete();\n  }\n\n  /**\n   * The list of available window segments.\n   */\n  get windowSegments(): DOMRect[] {\n    return this.currentContext.windowSegments;\n  }\n\n  /**\n   * The current screen spanning mode.\n   */\n  get screenSpanning(): ScreenSpanning {\n    return this.currentContext.screenSpanning;\n  }\n\n  /**\n   * True is current device have multiple screens available.\n   */\n  get isMultiScreen(): boolean {\n    return this.currentContext.isMultiScreen;\n  }\n\n  /**\n   * Gets an observable emitting when the screen context changes.\n   */\n  asObservable(): Observable {\n    return this.screenContext$;\n  }\n\n  /**\n   * Gets the current screen context.\n   */\n  asObject(): ScreenContextData {\n    return this.currentContext;\n  }\n\n  private getScreenContext(): ScreenContextData {\n    const windowSegments = this.getWindowSegments();\n    const screenSpanning = this.getScreenSpanning();\n    return {\n      windowSegments,\n      screenSpanning,\n      isMultiScreen: screenSpanning !== ScreenSpanning.None,\n    };\n  }\n\n  private getScreenSpanning(): ScreenSpanning {\n    if (matchMedia(dualVerticalViewport).matches) {\n      return ScreenSpanning.DualVertical;\n    } else if (matchMedia(dualHorizontalViewport).matches) {\n      return ScreenSpanning.DualHorizontal;\n    }\n    return ScreenSpanning.None;\n  }\n\n  private getWindowSegments(): DOMRect[] {\n    if ('getWindowSegments' in window) {\n      console.warn('getWindowSegments() is not supported anymore, please update your browser to use the new visualViewport API');\n    }\n    if ('visualViewport' in window) {\n      return (window.visualViewport as any).segments;\n    }\n    return [\n      new DOMRect(\n        window.pageXOffset,\n        window.pageYOffset,\n        window.innerWidth,\n        window.innerHeight\n      ),\n    ];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ScreenContextData.html":{"url":"interfaces/ScreenContextData.html","title":"interface - ScreenContextData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ScreenContextData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/lib/src/core/screen-context.ts\n        \n\n\n            \n                Description\n            \n            \n                Holds information about the device screen context.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            isMultiScreen\n                                        \n                                \n                                \n                                        \n                                            screenSpanning\n                                        \n                                \n                                \n                                        \n                                            windowSegments\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isMultiScreen\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isMultiScreen:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    True is current device have multiple screens available.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        screenSpanning\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        screenSpanning:         ScreenSpanning\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ScreenSpanning\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The current screen spanning mode.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        windowSegments\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        windowSegments:     DOMRect[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     DOMRect[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The list of available window segments.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, OnDestroy } from '@angular/core';\nimport { fromEvent, merge, Observable, ReplaySubject } from 'rxjs';\nimport { map, filter, shareReplay, startWith, takeUntil } from 'rxjs/operators';\nimport { dualVerticalViewport, dualHorizontalViewport } from './media-queries';\nimport { ScreenSpanning } from './screen-spanning';\n\ndeclare global {\n  interface Window {\n    getWindowSegments: () => DOMRect[];\n  }\n}\n\n/**\n * Holds information about the device screen context.\n */\nexport interface ScreenContextData {\n  /** The list of available window segments. */\n  readonly windowSegments: DOMRect[];\n  /** The current screen spanning mode. */\n  readonly screenSpanning: ScreenSpanning;\n  /** True is current device have multiple screens available. */\n  readonly isMultiScreen: boolean;\n}\n\n/**\n * This service allows to query and receive updates about current device's\n * screen context.\n *\n * See {@link ScreenContextData}\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ScreenContext implements ScreenContextData, OnDestroy {\n  private currentContext: ScreenContextData;\n  private screenContext$: Observable;\n  private destroyed$: ReplaySubject = new ReplaySubject(1);\n\n  constructor() {\n    this.currentContext = this.getScreenContext();\n    this.screenContext$ = merge(\n      fromEvent(matchMedia(dualVerticalViewport), 'change'),\n      fromEvent(matchMedia(dualHorizontalViewport), 'change')\n    ).pipe(\n      filter(\n        () => this.getScreenSpanning() !== this.currentContext.screenSpanning\n      ),\n      startWith(1),\n      map(() => {\n        this.currentContext = this.getScreenContext();\n        return this.currentContext;\n      }),\n      shareReplay(1),\n      takeUntil(this.destroyed$)\n    );\n    this.screenContext$.subscribe();\n  }\n\n  /** @ignored */\n  ngOnDestroy() {\n    this.destroyed$.next();\n    this.destroyed$.complete();\n  }\n\n  /**\n   * The list of available window segments.\n   */\n  get windowSegments(): DOMRect[] {\n    return this.currentContext.windowSegments;\n  }\n\n  /**\n   * The current screen spanning mode.\n   */\n  get screenSpanning(): ScreenSpanning {\n    return this.currentContext.screenSpanning;\n  }\n\n  /**\n   * True is current device have multiple screens available.\n   */\n  get isMultiScreen(): boolean {\n    return this.currentContext.isMultiScreen;\n  }\n\n  /**\n   * Gets an observable emitting when the screen context changes.\n   */\n  asObservable(): Observable {\n    return this.screenContext$;\n  }\n\n  /**\n   * Gets the current screen context.\n   */\n  asObject(): ScreenContextData {\n    return this.currentContext;\n  }\n\n  private getScreenContext(): ScreenContextData {\n    const windowSegments = this.getWindowSegments();\n    const screenSpanning = this.getScreenSpanning();\n    return {\n      windowSegments,\n      screenSpanning,\n      isMultiScreen: screenSpanning !== ScreenSpanning.None,\n    };\n  }\n\n  private getScreenSpanning(): ScreenSpanning {\n    if (matchMedia(dualVerticalViewport).matches) {\n      return ScreenSpanning.DualVertical;\n    } else if (matchMedia(dualHorizontalViewport).matches) {\n      return ScreenSpanning.DualHorizontal;\n    }\n    return ScreenSpanning.None;\n  }\n\n  private getWindowSegments(): DOMRect[] {\n    if ('getWindowSegments' in window) {\n      console.warn('getWindowSegments() is not supported anymore, please update your browser to use the new visualViewport API');\n    }\n    if ('visualViewport' in window) {\n      return (window.visualViewport as any).segments;\n    }\n    return [\n      new DOMRect(\n        window.pageXOffset,\n        window.pageYOffset,\n        window.innerWidth,\n        window.innerHeight\n      ),\n    ];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/SplitLayoutDirective.html":{"url":"directives/SplitLayoutDirective.html","title":"directive - SplitLayoutDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  SplitLayoutDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/lib/src/core/split-layout.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines a parent layout container for creating a split layout on multi\nscreen devices.\nWhen used on a single screen device, no layout change (CSS) is added.\nYou can choose between different SplitLayoutMode to suit your\ndesign.\nThis directive should be used along with WindowDirective.\n\n             Will be displayed on first screen\n             Will be displayed on second screen (if available)\n\n\nIn addition, you can also choose keep the same window segments order or\nreverse it when the spanning mode change from vertical to horizontal using\na second optional parameter on the directive:\n\n             \n               Will be displayed on first screen in vertical spanning mode\n               and on the second screen in horizontal spanning mode.\n             \n             \n               Will be displayed on second screen in vertical spanning mode\n               and on the first screen in horizontal spanning mode.\n             \n\n\n            \n\n            \n                Implements\n            \n            \n                            OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [fdSplitLayout]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                fdSplitLayout\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    fdSplitLayout\n                                \n                                \n                                    layoutMode\n                                \n                                \n                                    windowOrder\n                                \n                                \n                                    readingDirection\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(element: ElementRef, screenContext: ScreenContext)\n                    \n                \n                        \n                            \n                                Defined in projects/lib/src/core/split-layout.directive.ts:205\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        element\n                                                  \n                                                        \n                                                                        ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        screenContext\n                                                  \n                                                        \n                                                                        ScreenContext\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        fdSplitLayout\n                    \n                \n                        \n                            \n                                    Defined in projects/lib/src/core/split-layout.directive.ts:196\n                            \n                        \n                \n                    \n                        Sets the current split layout options to use when multi screen is\ndetected.\n\n                    \n                \n            \n        \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        fdSplitLayout\n                    \n                \n\n\n                \n                    \n                        setfdSplitLayout(options: string | undefined)\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/split-layout.directive.ts:196\n                                \n                            \n                    \n                        \n                                Sets the current split layout options to use when multi screen is\ndetected.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                        Description\n                                                \n                                            \n                                            \n                                                    \n                                                            options\n                                                    \n                                                            \n                                                                        string | undefined\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                            \n                                                                    The split layout options to use.\nFormat: [mode] [order]\n\nThe SplitLayoutMode to use (default is href=\"SplitLayoutMode\">).\nThe WindowOrder to use (default is href=\"SplitLayoutMode\">).\n\n\n                                                            \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        layoutMode\n                    \n                \n\n                \n                    \n                        getlayoutMode()\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/split-layout.directive.ts:222\n                                \n                            \n                    \n                        \n                                The current split layout mode to use when multi screen is detected.\n\n\n                                \n                                \n                                \n                                    Returns :         SplitLayoutMode\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        windowOrder\n                    \n                \n\n                \n                    \n                        getwindowOrder()\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/split-layout.directive.ts:231\n                                \n                            \n                    \n                        \n                                The window segments order to use when in horizontal spanning mode.\n\n\n                                \n                                \n                                \n                                    Returns :         WindowOrder\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        readingDirection\n                    \n                \n\n                \n                    \n                        getreadingDirection()\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/split-layout.directive.ts:240\n                                \n                            \n                    \n                        \n                                The text reading direction for the host element.\n\n\n                                \n                                \n                                \n                                    Returns :         ReadingDirection\n\n                                \n                        \n                    \n\n            \n        \n\n\n    \n\n\n    \n        import {\n  Directive,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnDestroy,\n} from '@angular/core';\nimport { SafeStyle } from '@angular/platform-browser';\nimport { Subscription } from 'rxjs';\nimport { ScreenContext } from './screen-context';\nimport { ScreenSpanning } from './screen-spanning';\n\n/**\n * Defines how the split layout container should be rendered when multi screen\n * is detected.\n * See {@link SplitLayoutDirective}\n */\nexport type SplitLayoutMode = 'flex' | 'grid' | 'absolute';\n/**\n * Enumeration of split layout modes values for use with\n * {@link SplitLayoutDirective}.\n */\nexport const SplitLayoutMode = {\n  Flex: 'flex' as SplitLayoutMode,\n  Grid: 'grid' as SplitLayoutMode,\n  Absolute: 'absolute' as SplitLayoutMode,\n\n  /**\n   * Checks if the given string value is a valid {@link SplitLayoutMode}.\n   *\n   * @param value The value to check.\n   * @return true if the value is a valid {@link SplitLayoutMode}.\n   */\n  isValid: (value: string): boolean => {\n    switch (value) {\n      case SplitLayoutMode.Flex:\n      case SplitLayoutMode.Grid:\n      case SplitLayoutMode.Absolute:\n        return true;\n    }\n    return false;\n  },\n};\n\n/**\n * Defines how the split layout container should order the window segments\n * when in horizontal spanning mode vs vertical spanning mode.\n * See {@link SplitLayoutDirective}\n */\nexport type WindowOrder = 'normal' | 'reverse';\n/**\n * Enumeration of window order values for use with\n * {@link SplitLayoutDirective}.\n */\nexport const WindowOrder = {\n  Normal: 'normal' as WindowOrder,\n  Reverse: 'reverse' as WindowOrder,\n\n  /**\n   * Checks if the given string value is a valid {@link WindowOrder}.\n   *\n   * @param value The value to check.\n   * @return true if the value is a valid {@link WindowOrder}.\n   */\n  isValid: (value: string): boolean => {\n    switch (value) {\n      case WindowOrder.Normal:\n      case WindowOrder.Reverse:\n        return true;\n    }\n    return false;\n  },\n};\n\n/**\n * Defines the text reading direction for the host element.\n */\nexport type ReadingDirection = 'ltr' | 'rtl';\n/**\n * Enumeration of the text reading direction values.\n */\nexport const ReadingDirection = {\n  LeftToRight: 'ltr' as ReadingDirection,\n  RightToLeft: 'rtl' as ReadingDirection,\n};\n\n/**\n * Look 'ma, CSS-in-JS with Angular! ಠ_ಠ\n *\n * @ignore\n */\nconst layoutStyles = {\n  [SplitLayoutMode.Flex]: {\n    common: {\n      display: 'flex',\n      justifyContent: 'space-between',\n      height: '100vh',\n    },\n    [ScreenSpanning.DualHorizontal]: {\n      flexDirection: 'row',\n    },\n    [ScreenSpanning.DualVertical]: {\n      flexDirection: 'column',\n    },\n    [WindowOrder.Reverse]: {\n      flexDirection: 'column-reverse',\n    },\n  },\n  [SplitLayoutMode.Grid]: {\n    common: {\n      display: 'grid',\n      height: '100vh',\n    },\n    [ScreenSpanning.DualHorizontal]: {\n      gridTemplateColumns: '1fr 1fr',\n      gridTemplateAreas: '\"segment0 segment1\"',\n      gridAutoFlow: 'row',\n      columnGap: 'calc(env(viewport-segment-left 1 0) - env(viewport-segment-right 0 0))',\n    },\n    [ScreenSpanning.DualVertical]: {\n      gridTemplateRows: '1fr 1fr',\n      gridTemplateAreas: '\"segment0\" \"segment1\"',\n      gridAutoFlow: 'row',\n      rowGap: 'calc(env(viewport-segment-top 0 1) - env(viewport-segment-bottom 0 0))',\n    },\n    [WindowOrder.Reverse]: {\n      gridTemplateRows: '1fr 1fr',\n      gridTemplateAreas: '\"segment1\" \"segment0\"',\n      gridAutoFlow: 'row',\n      rowGap: 'calc(env(viewport-segment-top 0 1) - env(viewport-segment-bottom 0 0))',\n    },\n  },\n  [SplitLayoutMode.Absolute]: {\n    common: {\n      position: 'relative',\n      height: '100vh',\n    },\n    [ScreenSpanning.DualHorizontal]: {},\n    [ScreenSpanning.DualVertical]: {},\n    [WindowOrder.Reverse]: {},\n  },\n};\n\n/**\n * Defines a parent layout container for creating a split layout on multi\n * screen devices.\n *\n * When used on a single screen device, no layout change (CSS) is added.\n * You can choose between different {@link SplitLayoutMode} to suit your\n * design.\n *\n * This directive should be used along with {@link WindowDirective}.\n *\n * @example\n * \n *              Will be displayed on first screen\n *              Will be displayed on second screen (if available)\n * \n *\n * In addition, you can also choose keep the same window segments order or\n * reverse it when the spanning mode change from vertical to horizontal using\n * a second optional parameter on the directive:\n *\n * @example\n * \n *              \n *                Will be displayed on first screen in vertical spanning mode\n *                and on the second screen in horizontal spanning mode.\n *              \n *              \n *                Will be displayed on second screen in vertical spanning mode\n *                and on the first screen in horizontal spanning mode.\n *              \n * \n */\n@Directive({\n  selector: '[fdSplitLayout]',\n})\nexport class SplitLayoutDirective implements OnDestroy {\n  private mode: SplitLayoutMode = SplitLayoutMode.Flex;\n  private order: WindowOrder = WindowOrder.Normal;\n  private layoutStyle: SafeStyle = {};\n  private screenContextSubscription: Subscription | null = null;\n  private direction: ReadingDirection = 'ltr';\n\n  /**\n   * Sets the current split layout options to use when multi screen is\n   * detected.\n   *\n   * @param options The split layout options to use.\n   * Format: `[mode] [order]`\n   * - The {@link SplitLayoutMode} to use (default is {@link SplitLayoutMode.Flex}).\n   * - The {@link WindowOrder} to use (default is {@link WindowOrder.Normal}).\n   */\n  @Input()\n  set fdSplitLayout(options: string | undefined) {\n    this.parseOptions(options || '');\n    this.updateStyle();\n  }\n\n  /** @ignore */\n  @HostBinding('style')\n  get style(): SafeStyle {\n    return this.layoutStyle;\n  }\n\n  constructor(\n    private element: ElementRef,\n    private screenContext: ScreenContext\n  ) {\n    this.updateStyle();\n    this.screenContextSubscription = this.screenContext\n      .asObservable()\n      .subscribe(() => this.updateStyle());\n  }\n\n  /**\n   * The current split layout mode to use when multi screen is detected.\n   *\n   * @return The current split layout mode.\n   */\n  get layoutMode(): SplitLayoutMode {\n    return this.mode;\n  }\n\n  /**\n   * The window segments order to use when in horizontal spanning mode.\n   *\n   * @return The current window order.\n   */\n  get windowOrder(): WindowOrder {\n    return this.order;\n  }\n\n  /**\n   * The text reading direction for the host element.\n   *\n   * @return The text reading direction.\n   */\n  get readingDirection(): ReadingDirection {\n    return this.direction;\n  }\n\n  /** @ignore */\n  ngOnDestroy() {\n    if (this.screenContextSubscription !== null) {\n      this.screenContextSubscription.unsubscribe();\n    }\n  }\n\n  private parseOptions(options: string) {\n    let [mode, order] = options.trim().split(' ');\n    mode = SplitLayoutMode.isValid(mode) ? mode : SplitLayoutMode.Flex;\n    order = WindowOrder.isValid(order) ? order : WindowOrder.Normal;\n    this.mode = mode as SplitLayoutMode;\n    this.order = order as WindowOrder;\n  }\n\n  private updateStyle() {\n    const isMultiScreen = this.screenContext.isMultiScreen;\n    const spanning = this.screenContext.screenSpanning;\n    const reverse =\n      spanning === ScreenSpanning.DualVertical &&\n      this.order === WindowOrder.Reverse;\n\n    this.direction =\n      (getComputedStyle(this.element.nativeElement)\n        ?.direction as ReadingDirection) || ReadingDirection.LeftToRight;\n\n    if (isMultiScreen && spanning !== ScreenSpanning.None) {\n      this.layoutStyle = {\n        ...layoutStyles[this.mode].common,\n        ...layoutStyles[this.mode][reverse ? WindowOrder.Reverse : spanning],\n      };\n    } else {\n      this.layoutStyle = {};\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Window.html":{"url":"interfaces/Window.html","title":"interface - Window","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Window\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/lib/src/core/screen-context.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            getWindowSegments\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        getWindowSegments\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getWindowSegments:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, OnDestroy } from '@angular/core';\nimport { fromEvent, merge, Observable, ReplaySubject } from 'rxjs';\nimport { map, filter, shareReplay, startWith, takeUntil } from 'rxjs/operators';\nimport { dualVerticalViewport, dualHorizontalViewport } from './media-queries';\nimport { ScreenSpanning } from './screen-spanning';\n\ndeclare global {\n  interface Window {\n    getWindowSegments: () => DOMRect[];\n  }\n}\n\n/**\n * Holds information about the device screen context.\n */\nexport interface ScreenContextData {\n  /** The list of available window segments. */\n  readonly windowSegments: DOMRect[];\n  /** The current screen spanning mode. */\n  readonly screenSpanning: ScreenSpanning;\n  /** True is current device have multiple screens available. */\n  readonly isMultiScreen: boolean;\n}\n\n/**\n * This service allows to query and receive updates about current device's\n * screen context.\n *\n * See {@link ScreenContextData}\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ScreenContext implements ScreenContextData, OnDestroy {\n  private currentContext: ScreenContextData;\n  private screenContext$: Observable;\n  private destroyed$: ReplaySubject = new ReplaySubject(1);\n\n  constructor() {\n    this.currentContext = this.getScreenContext();\n    this.screenContext$ = merge(\n      fromEvent(matchMedia(dualVerticalViewport), 'change'),\n      fromEvent(matchMedia(dualHorizontalViewport), 'change')\n    ).pipe(\n      filter(\n        () => this.getScreenSpanning() !== this.currentContext.screenSpanning\n      ),\n      startWith(1),\n      map(() => {\n        this.currentContext = this.getScreenContext();\n        return this.currentContext;\n      }),\n      shareReplay(1),\n      takeUntil(this.destroyed$)\n    );\n    this.screenContext$.subscribe();\n  }\n\n  /** @ignored */\n  ngOnDestroy() {\n    this.destroyed$.next();\n    this.destroyed$.complete();\n  }\n\n  /**\n   * The list of available window segments.\n   */\n  get windowSegments(): DOMRect[] {\n    return this.currentContext.windowSegments;\n  }\n\n  /**\n   * The current screen spanning mode.\n   */\n  get screenSpanning(): ScreenSpanning {\n    return this.currentContext.screenSpanning;\n  }\n\n  /**\n   * True is current device have multiple screens available.\n   */\n  get isMultiScreen(): boolean {\n    return this.currentContext.isMultiScreen;\n  }\n\n  /**\n   * Gets an observable emitting when the screen context changes.\n   */\n  asObservable(): Observable {\n    return this.screenContext$;\n  }\n\n  /**\n   * Gets the current screen context.\n   */\n  asObject(): ScreenContextData {\n    return this.currentContext;\n  }\n\n  private getScreenContext(): ScreenContextData {\n    const windowSegments = this.getWindowSegments();\n    const screenSpanning = this.getScreenSpanning();\n    return {\n      windowSegments,\n      screenSpanning,\n      isMultiScreen: screenSpanning !== ScreenSpanning.None,\n    };\n  }\n\n  private getScreenSpanning(): ScreenSpanning {\n    if (matchMedia(dualVerticalViewport).matches) {\n      return ScreenSpanning.DualVertical;\n    } else if (matchMedia(dualHorizontalViewport).matches) {\n      return ScreenSpanning.DualHorizontal;\n    }\n    return ScreenSpanning.None;\n  }\n\n  private getWindowSegments(): DOMRect[] {\n    if ('getWindowSegments' in window) {\n      console.warn('getWindowSegments() is not supported anymore, please update your browser to use the new visualViewport API');\n    }\n    if ('visualViewport' in window) {\n      return (window.visualViewport as any).segments;\n    }\n    return [\n      new DOMRect(\n        window.pageXOffset,\n        window.pageYOffset,\n        window.innerWidth,\n        window.innerHeight\n      ),\n    ];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/WindowDirective.html":{"url":"directives/WindowDirective.html","title":"directive - WindowDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  WindowDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/lib/src/core/window.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                This directive is used to set specify on which window segment the container\nshould be placed on multi screen devices.\nWhen used on a single screen device, no layout change (CSS) is added.\nOnly devices with up to two screen are currently supported, meaning that the\nwindow segment value must be either 0 or 1.\nThis directive can only be used within a SplitLayoutDirective.\nIf SplitLayoutMode is set to absolute, you can assign multiple\ncontainer element to the same window segment.\nNote that if you have set the read direction to Right-To-Left mode (rtl)\nin CSS, the first segment will be the rightmost one.\nIf the WindowOrder option is set to WindowOrder.Reverse,\nthe window segments order will be reversed in horizontal spanning mode.\n\n             Will be displayed on first screen\n             Will be displayed on second screen (if available)\n\n\n            \n\n            \n                Implements\n            \n            \n                            OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [fdWindow]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                fdWindow\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    fdWindow\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(screenContext: ScreenContext, splitLayout: SplitLayoutDirective)\n                    \n                \n                        \n                            \n                                Defined in projects/lib/src/core/window.directive.ts:121\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        screenContext\n                                                  \n                                                        \n                                                                        ScreenContext\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        splitLayout\n                                                  \n                                                        \n                                                                        SplitLayoutDirective\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        fdWindow\n                    \n                \n                        \n                            \n                                    Defined in projects/lib/src/core/window.directive.ts:115\n                            \n                        \n                \n                    \n                        Sets the target window segment to display this container on when multi\nscreen is detected.\n\n                    \n                \n            \n        \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        fdWindow\n                    \n                \n\n\n                \n                    \n                        setfdWindow(segment: number | string)\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/window.directive.ts:115\n                                \n                            \n                    \n                        \n                                Sets the target window segment to display this container on when multi\nscreen is detected.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                        Description\n                                                \n                                            \n                                            \n                                                    \n                                                            segment\n                                                    \n                                                            \n                                                                        number | string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                            \n                                                                    The target window segment, must be 0 or 1.\n\n                                                            \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n    \n\n\n    \n        import { Directive, Host, HostBinding, Input, OnDestroy } from '@angular/core';\nimport { SafeStyle } from '@angular/platform-browser';\nimport { Subscription } from 'rxjs';\nimport { ScreenContext } from './screen-context';\nimport { ScreenSpanning } from './screen-spanning';\nimport {\n  ReadingDirection,\n  SplitLayoutDirective,\n  SplitLayoutMode,\n  WindowOrder,\n} from './split-layout.directive';\n\n/**\n * Look 'ma, CSS-in-JS with Angular! ಠ_ಠ\n *\n * @ignore\n */\nconst layoutStyles = {\n  [SplitLayoutMode.Flex]: {\n    [ScreenSpanning.DualHorizontal]: [\n      { flex: '0 0 env(viewport-segment-width 0 0)' },\n      { flex: '0 0 env(viewport-segment-width 1 0)' },\n    ],\n    [ScreenSpanning.DualVertical]: [\n      { flex: '0 0 env(viewport-segment-height 0 0)' },\n      { flex: '0 0 env(viewport-segment-height 0 1)' },\n    ],\n  },\n  [SplitLayoutMode.Grid]: {\n    [ScreenSpanning.DualHorizontal]: [\n      { gridArea: 'segment0' },\n      { gridArea: 'segment1' },\n    ],\n    [ScreenSpanning.DualVertical]: [\n      { gridArea: 'segment0' },\n      { gridArea: 'segment1' },\n    ],\n  },\n  [SplitLayoutMode.Absolute]: {\n    [ScreenSpanning.DualHorizontal]: [\n      {\n        position: 'absolute',\n        left: 0,\n        // Not sure why, but 'right:' isn't working\n        width: 'env(viewport-segment-right 0 0)',\n      },\n      {\n        position: 'absolute',\n        left: 'env(viewport-segment-left 1 0)',\n        right: 0,\n      },\n    ],\n    [ScreenSpanning.DualVertical]: [\n      {\n        position: 'absolute',\n        top: 0,\n        width: '100%',\n        maxHeight: 'env(viewport-segment-height 0 0)',\n      },\n      {\n        position: 'absolute',\n        top: 'env(viewport-segment-top 0 1)',\n        width: '100%',\n        maxHeight: 'env(viewport-segment-height 0 1)',\n      },\n    ],\n  },\n};\n\n/**\n * This directive is used to set specify on which window segment the container\n * should be placed on multi screen devices.\n *\n * When used on a single screen device, no layout change (CSS) is added.\n * Only devices with up to two screen are currently supported, meaning that the\n * window segment value must be either 0 or 1.\n *\n * This directive can only be used within a {@link SplitLayoutDirective}.\n * If {@link SplitLayoutMode} is set to `absolute`, you can assign multiple\n * container element to the same window segment.\n *\n * Note that if you have set the read direction to Right-To-Left mode (`rtl`)\n * in CSS, the first segment will be the rightmost one.\n *\n * If the {@link WindowOrder} option is set to {@link WindowOrder.Reverse},\n * the window segments order will be reversed in horizontal spanning mode.\n *\n * @example\n * \n *              Will be displayed on first screen\n *              Will be displayed on second screen (if available)\n * \n */\n@Directive({\n  selector: '[fdWindow]',\n})\nexport class WindowDirective implements OnDestroy {\n  private segment = -1;\n  private layoutStyle: SafeStyle = {};\n  private screenContextSubscription: Subscription | null = null;\n\n  /** @ignore */\n  @HostBinding('style')\n  get style(): SafeStyle {\n    return this.layoutStyle;\n  }\n\n  /**\n   * Sets the target window segment to display this container on when multi\n   * screen is detected.\n   *\n   * @param segment The target window segment, must be 0 or 1.\n   */\n  @Input()\n  set fdWindow(segment: number | string) {\n    segment = typeof segment === 'string' ? parseInt(segment, 10) : segment;\n    if (segment !== this.segment) {\n      this.segment = segment;\n      this.updateStyle();\n    }\n  }\n\n  constructor(\n    private screenContext: ScreenContext,\n    @Host() private splitLayout: SplitLayoutDirective\n  ) {\n    this.screenContextSubscription = this.screenContext\n      .asObservable()\n      .subscribe(() => this.updateStyle());\n  }\n\n  /** @ignore */\n  ngOnDestroy() {\n    if (this.screenContextSubscription !== null) {\n      this.screenContextSubscription.unsubscribe();\n    }\n  }\n\n  private updateStyle() {\n    if (this.segment === -1) {\n      return;\n    }\n\n    const isMultiScreen = this.screenContext.isMultiScreen;\n    const spanning = this.screenContext.screenSpanning;\n\n    if (isMultiScreen && spanning !== ScreenSpanning.None) {\n      if (this.segment  1) {\n        throw new Error('Segment index must be 0 or 1');\n      }\n\n      const mode = this.splitLayout.layoutMode;\n      const order = this.splitLayout.windowOrder;\n      const direction = this.splitLayout.readingDirection;\n      // Swap segments for vertical span and RTL mode or\n      // horizontal span and reverse window order\n      const swap =\n        (spanning === ScreenSpanning.DualHorizontal &&\n          mode !== SplitLayoutMode.Grid &&\n          direction === ReadingDirection.RightToLeft) ||\n        (spanning === ScreenSpanning.DualVertical &&\n          mode !== SplitLayoutMode.Grid &&\n          order === WindowOrder.Reverse);\n\n      const segment = swap ? 1 - this.segment : this.segment;\n      this.layoutStyle = layoutStyles[mode][spanning][segment];\n    } else {\n      this.layoutStyle = {};\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\n2.0.0 (2021-11-22)\nFeatures\n\nremove old APIs support (df1ca39)\nupdate CSS for new APIs (afab1c4)\nupdate media queries to support new css segments API (fc26aae)\nupdate screenContext to support new visualViewport API (a444236)\n\nBREAKING CHANGES\n\nremove old APIs support\n\n1.1.1 (2021-03-19)\nBug Fixes\n\nlayout issues on real devices (8446001)\n\n1.1.0 (2021-03-17)\nBug Fixes\n\ninconsistent layout with rtl and fdIfSpan (1acd46e)\nonly allow valid options for SplitLayoutDirective (3240712)\n\nFeatures\n\nadd option to reverse window order (acb3fff)\n\n1.0.5 (2021-03-16)\nBug Fixes\n\nrefresh on orientation changes and extra repaints (0683aa3)\nscreen context initialization (14da071)\n\n1.0.4 (2021-03-16)\nBug Fixes\n\nissues when using typescript strict mode (b84fc9f)\n\n1.0.3 (2021-03-12)\nBug Fixes\n\nupdate min angular version (d383609)\n\n1.0.2 (2021-03-12)\nBug Fixes\n\nangular min version (4aa85c7)\n\n1.0.1 (2021-03-11)\nBug Fixes\n\ndocs deployment (b1c68ac)\n\n1.0.0 (2021-03-11)\nBug Fixes\n\ndirectives export (536764f)\nfdIfSpan init (7e66b70)\nrevert naming changes (3ee5543)\n\nFeatures\n\nadd RTL support (8bdb155)\nadd ScreenContext first value and fix span check (487885f)\nadd SplitLayout directive (9fadf70)\nadd support for grid and absolute layouts (582e83e)\nadd Window directive (b2a3632)\ndemo test (90ad184)\nfinish demo project (db13ef1)\nimplement fdIfSpan directive (083b648)\nimplement ScreenContext service (466a9d7)\ninitial commit (9ff473a)\ninitial work on service API (962620d)\nupdate to ng 11 (4708aff)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n📖 ngx-foldable\n\n\n\n\n\n\nngx-foldable is a set of components and services to help you build dual-screen experiences for foldable or dual-screen devices, such as the Surface Duo\n\n\n  \n\n\nSee the live demo or read the full documentation.\nHow to test on your browser\nThe dual-screen emulation feature requires latest Microsoft Edge or Google Chrome versions, with experimental flags to enable.\nFollow the instructions here to setup your browser for dual-screen emulation.\nLibrary usage\nCheck out the demo source code to see an example usage of the library.\nAdd the library to your Angular project:\nnpm install ngx-foldableImport the library in your app:\nimport { FoldableModule } from 'ngx-foldable';\n...\n\n@NgModule({\n  ...\n  imports: [\n    FoldableModule\n    ...\n  ],\n  ...\n})\nexport class AppModule { }Use the provided fdSplitLayout, fdWindow and fdIfSpan directives to build your layout:\n\n\n\n  \n  \n    This will be displayed on the first window segment of a multi screen or single screen device.\n    \n    This is only visible on a single screen device.\n    This is only visible on a multi screen device.\n  \n\n  \n  \n    This will be displayed on the second window segment of a multi screen device.\n\n    This is only visible on multi screen device, regardless of the orientation.\n    This is only visible on dual vertical viewports.\n    This is only visible on dual horizontal viewports.\n  \nUsing the ScreenContext service, you can also receive updates when the screen context changes:\nimport { ScreenContext } from 'ngx-foldable';\n...\nexport class AppComponent {\n  constructor(private screenContext: ScreenContext) {\n    this.screenContext\n      .asObservable()\n      .subscribe((context) => {\n        console.log('Screen context changed:', context);\n      });\n  }\n}You can read the full documentation here.\nContributing\nYou're welcome to contribute to this project!\nMake sure you have read the code of conduct before posting an issue or a pull request.\nFollow these steps to run this project locally:\n\nClone the repository on your machine\nRun npm install to install packages\nRun npm start to start the dev server with the demo app\n\nYou can then start making modifications on the library or demo app code.\nRelated work\n\nSurface Duo Photo Gallery: Angular re-implementation of the Surface Duo Photo Gallery sample using this library\nreact-foldable: a similar library built for React\nfoldable-devices/demos: web demos for foldables devices.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nThe MIT License (MIT)\nCopyright (c) 2021 Yohan Lasorsa\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        FoldableModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_FoldableModule\n\n\n\ncluster_FoldableModule_declarations\n\n\n\ncluster_FoldableModule_exports\n\n\n\n\nIfSpanDirective\n\nIfSpanDirective\n\n\n\nFoldableModule\n\nFoldableModule\n\nFoldableModule -->\n\nIfSpanDirective->FoldableModule\n\n\n\n\n\nSplitLayoutDirective\n\nSplitLayoutDirective\n\nFoldableModule -->\n\nSplitLayoutDirective->FoldableModule\n\n\n\n\n\nWindowDirective\n\nWindowDirective\n\nFoldableModule -->\n\nWindowDirective->FoldableModule\n\n\n\n\n\nIfSpanDirective \n\nIfSpanDirective \n\nIfSpanDirective  -->\n\nFoldableModule->IfSpanDirective \n\n\n\n\n\nSplitLayoutDirective \n\nSplitLayoutDirective \n\nSplitLayoutDirective  -->\n\nFoldableModule->SplitLayoutDirective \n\n\n\n\n\nWindowDirective \n\nWindowDirective \n\nWindowDirective  -->\n\nFoldableModule->WindowDirective \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Directives\n                \n            \n        \n        \n            \n                \n                    \n                    1 Injectable\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ReadingDirection   (projects/.../split-layout.directive.ts)\n                        \n                        \n                            ScreenSpanning   (projects/.../screen-spanning.ts)\n                        \n                        \n                            SpanCondition   (projects/.../if-span.directive.ts)\n                        \n                        \n                            SplitLayoutMode   (projects/.../split-layout.directive.ts)\n                        \n                        \n                            WindowOrder   (projects/.../split-layout.directive.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/lib/src/core/split-layout.directive.ts\n    \n    \n        \n            \n                \n                    \n                    ReadingDirection\n                \n            \n            \n                \n                    Defines the text reading direction for the host element.\n\n                \n            \n            \n                \n                        \"ltr\" | \"rtl\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SplitLayoutMode\n                \n            \n            \n                \n                    Defines how the split layout container should be rendered when multi screen\nis detected.\nSee SplitLayoutDirective\n\n                \n            \n            \n                \n                        \"flex\" | \"grid\" | \"absolute\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    WindowOrder\n                \n            \n            \n                \n                    Defines how the split layout container should order the window segments\nwhen in horizontal spanning mode vs vertical spanning mode.\nSee SplitLayoutDirective\n\n                \n            \n            \n                \n                        \"normal\" | \"reverse\"\n\n                \n            \n        \n    \n    projects/lib/src/core/screen-spanning.ts\n    \n    \n        \n            \n                \n                    \n                    ScreenSpanning\n                \n            \n            \n                \n                    Represents the screen spanning mode.\n\n                \n            \n            \n                \n                        \"dual-horizontal\" | \"dual-vertical\" | \"none\"\n\n                \n            \n        \n    \n    projects/lib/src/core/if-span.directive.ts\n    \n    \n        \n            \n                \n                    \n                    SpanCondition\n                \n            \n            \n                \n                    Spanning mode conditions for use with IfSpanDirective.\n\n                \n            \n            \n                \n                        \"dual-horizontal\" | \"dual-vertical\" | \"none\" | \"multi\"\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            dualHorizontalViewport   (projects/.../media-queries.ts)\n                        \n                        \n                            dualVerticalViewport   (projects/.../media-queries.ts)\n                        \n                        \n                            ReadingDirection   (projects/.../split-layout.directive.ts)\n                        \n                        \n                            ScreenSpanning   (projects/.../screen-spanning.ts)\n                        \n                        \n                            SpanCondition   (projects/.../if-span.directive.ts)\n                        \n                        \n                            SplitLayoutMode   (projects/.../split-layout.directive.ts)\n                        \n                        \n                            WindowOrder   (projects/.../split-layout.directive.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/lib/src/core/media-queries.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        dualHorizontalViewport\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '(horizontal-viewport-segments: 2)'\n                    \n                \n\n            \n                \n                    Media query used to detect dual horizontal viewports screen mode.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dualVerticalViewport\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '(vertical-viewport-segments: 2)'\n                    \n                \n\n            \n                \n                    Media query used to detect dual vertical viewports screen mode.\n\n                \n            \n\n        \n    \n\n    projects/lib/src/core/split-layout.directive.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ReadingDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  LeftToRight: 'ltr' as ReadingDirection,\n  RightToLeft: 'rtl' as ReadingDirection,\n}\n                    \n                \n\n            \n                \n                    Enumeration of the text reading direction values.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SplitLayoutMode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  Flex: 'flex' as SplitLayoutMode,\n  Grid: 'grid' as SplitLayoutMode,\n  Absolute: 'absolute' as SplitLayoutMode,\n\n  /**\n   * Checks if the given string value is a valid {@link SplitLayoutMode}.\n   *\n   * @param value The value to check.\n   * @return true if the value is a valid {@link SplitLayoutMode}.\n   */\n  isValid: (value: string): boolean => {\n    switch (value) {\n      case SplitLayoutMode.Flex:\n      case SplitLayoutMode.Grid:\n      case SplitLayoutMode.Absolute:\n        return true;\n    }\n    return false;\n  },\n}\n                    \n                \n\n            \n                \n                    Enumeration of split layout modes values for use with\nSplitLayoutDirective.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        WindowOrder\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  Normal: 'normal' as WindowOrder,\n  Reverse: 'reverse' as WindowOrder,\n\n  /**\n   * Checks if the given string value is a valid {@link WindowOrder}.\n   *\n   * @param value The value to check.\n   * @return true if the value is a valid {@link WindowOrder}.\n   */\n  isValid: (value: string): boolean => {\n    switch (value) {\n      case WindowOrder.Normal:\n      case WindowOrder.Reverse:\n        return true;\n    }\n    return false;\n  },\n}\n                    \n                \n\n            \n                \n                    Enumeration of window order values for use with\nSplitLayoutDirective.\n\n                \n            \n\n        \n    \n\n    projects/lib/src/core/screen-spanning.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ScreenSpanning\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  /** Screen spanning mode is dual horizontal viewports. */\n  DualHorizontal: 'dual-horizontal' as ScreenSpanning,\n  /** Screen spanning mode is dual vertical viewports. */\n  DualVertical: 'dual-vertical' as ScreenSpanning,\n  /** No screen spanning (single screen mode). */\n  None: 'none' as ScreenSpanning,\n}\n                    \n                \n\n            \n                \n                    Enumeration of screen spanning mode values.\n\n                \n            \n\n        \n    \n\n    projects/lib/src/core/if-span.directive.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SpanCondition\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  /** Screen spanning mode is dual horizontal viewports. */\n  Vertical: 'dual-horizontal' as SpanCondition,\n  /** Screen spanning mode is dual vertical viewports. */\n  Horizontal: 'dual-vertical' as SpanCondition,\n  /** No screen spanning (single screen mode). */\n  None: 'none' as SpanCondition,\n  /** Any screen spanning mode is active (multi screen mode). */\n  Multi: 'multi' as SpanCondition,\n}\n                    \n                \n\n            \n                \n                    Enumeration of spanning mode conditions values for use with\nIfSpanDirective.\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
