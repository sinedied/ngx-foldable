var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/FoldableModule.html",[0,1.551,1,1.07]],["body/modules/FoldableModule.html",[0,2.374,1,2.095,2,1.886,3,2.923,4,2.323,5,2.323,6,2.323,7,1.752,8,0.073,9,1.19,10,2.103,11,2.923,12,2.323,13,1.561,14,0.899,15,0.736,16,0.899,17,2.985,18,1.084,19,3.756,20,3.756,21,2.923,22,2.923,23,2.923,24,1.131,25,1.131,26,0.433,27,1.364,28,1.131,29,0.582,30,3.756,31,3.756,32,1.064,33,2.923,34,0.899,35,2.985,36,2.985,37,1.301,38,2.323,39,1.064,40,0.592,41,0.736,42,0.055,43,0.055]],["title/directives/IfSpanDirective.html",[7,0.892,44,0.739]],["body/directives/IfSpanDirective.html",[7,1.237,8,0.074,14,0.517,15,0.424,16,0.517,18,0.932,25,1.226,26,0.521,27,1.389,29,0.592,32,0.84,34,0.517,39,0.84,40,0.609,41,0.424,42,0.038,43,0.038,44,0.772,45,0.624,46,2.632,47,1.086,48,2.566,49,4.405,50,1.118,51,0.882,52,0.882,53,2.566,54,2.566,55,2.81,56,2.566,57,2.566,58,2.566,59,2.566,60,2.566,61,1.115,62,2.566,63,1.999,64,2.976,65,1.588,66,0.932,67,1.115,68,1.086,69,1.622,70,2.417,71,0.341,72,1.997,73,1.237,74,1.622,75,3.406,76,3.406,77,1.342,78,0.932,79,1.337,80,3.071,81,3.406,82,4.616,83,2.13,84,1.718,85,2.153,86,2.153,87,1.097,88,2.153,89,2.566,90,4.516,91,1.941,92,3.071,93,2.566,94,3.824,95,2.417,96,3.824,97,1.941,98,2.566,99,1.115,100,1.718,101,1.622,102,1.781,103,2.153,104,1.718,105,2.566,106,1.718,107,2.952,108,1.718,109,3.071,110,2.153,111,1.622,112,0.624,113,0.424,114,0.424,115,1.342,116,0.509,117,1.999,118,1.237,119,1.237,120,1.941,121,1.086,122,1.086,123,0.932,124,1.337,125,1.342,126,1.54,127,1.086,128,1.718,129,1.718,130,1.718,131,1.718,132,0.898,133,1.606,134,1.718,135,3.071,136,3.406,137,1.718,138,3.406,139,3.645,140,1.718,141,3.071,142,1.622,143,0.517,144,0.517,145,1.086,146,1.086,147,1.718,148,1.086,149,1.941,150,1.718,151,1.025,152,1.086,153,1.718,154,1.941,155,0.624,156,1.718,157,0.624,158,1.086,159,0.624,160,1.718,161,2.566,162,1.718,163,2.566,164,3.071,165,2.566]],["title/injectables/ScreenContext.html",[29,0.38,166,1.07]],["body/injectables/ScreenContext.html",[8,0.074,14,0.622,15,0.51,16,0.622,18,0.751,26,0.516,28,0.884,29,0.529,32,0.969,34,0.622,39,0.51,40,0.582,41,0.51,42,0.043,43,0.043,50,1.928,51,0.737,52,0.677,61,1.24,66,0.751,67,1.066,71,0.41,72,2.285,73,0.751,77,1.535,78,1.24,83,2.133,99,1.24,102,2.053,112,0.751,113,1.035,114,1.115,116,0.41,123,1.066,126,1.482,143,0.884,144,1.119,151,1.36,155,0.751,157,0.751,159,1.066,166,1.279,167,2.067,168,1.828,169,1.306,170,1.279,171,1.856,172,1.535,173,1.535,174,1.535,175,1.856,176,2.242,177,2.35,178,2.578,179,1.711,180,2.067,181,2.067,182,2.35,183,2.067,184,2.578,185,1.856,186,1.279,187,2.35,188,2.067,189,2.158,190,1.778,191,0.632,192,1.028,193,2.578,194,1.856,195,2.067,196,2.067,197,2.067,198,1.35,199,1.785,200,2.158,201,1.306,202,1.535,203,1.856,204,1.856,205,1.856,206,1.306,207,1.306,208,1.306,209,1.306,210,1.081,211,1.081,212,1.081,213,1.306,214,1.306,215,1.306,216,1.279,217,1.306,218,1.306,219,2.158,220,1.306,221,1.306,222,1.306,223,1.306,224,1.785,225,1.306,226,2.35,227,1.856,228,1.306,229,1.279,230,1.306,231,1.306,232,1.856,233,1.856,234,1.306,235,1.306,236,1.306,237,1.306,238,1.306,239,1.306,240,1.306,241,1.306,242,1.306,243,1.306,244,1.306,245,1.306,246,1.306,247,1.306,248,1.081,249,1.306,250,1.306,251,1.081,252,0.622,253,1.856,254,1.081,255,1.306,256,1.306,257,1.306,258,1.306,259,1.306,260,1.306]],["title/interfaces/ScreenContextData.html",[176,1.284,216,1.07]],["body/interfaces/ScreenContextData.html",[8,0.074,14,0.657,15,0.538,16,0.657,18,0.792,26,0.51,28,0.657,29,0.472,32,0.988,34,0.657,39,0.538,40,0.605,41,0.538,42,0.045,43,0.045,50,1.894,51,0.755,52,0.697,61,1.383,66,0.792,67,1.107,71,0.433,73,0.792,78,0.792,87,1.058,99,1.277,112,0.792,113,0.988,114,1.142,116,0.433,123,1.107,126,1.507,143,0.918,144,0.657,151,1.374,155,0.792,157,0.792,159,1.107,166,1.329,168,0.95,169,1.378,170,0.95,171,1.378,172,1.14,173,1.14,174,1.14,175,1.378,176,2.228,177,1.378,178,2.693,179,1.809,182,1.927,184,2.406,185,1.378,186,0.95,187,2.222,189,2.222,190,1.809,191,0.643,192,1.058,193,2.693,194,1.378,198,1.455,199,1.838,200,2.222,201,1.378,202,1.594,203,1.927,204,1.927,205,1.927,206,1.378,207,1.378,208,1.378,209,1.378,210,1.14,211,1.14,212,1.14,213,1.378,214,1.378,215,1.378,216,1.329,217,1.927,218,1.927,219,2.222,220,1.378,221,1.378,222,1.378,223,1.378,224,1.838,225,1.378,226,2.406,227,1.927,228,1.378,229,1.329,230,1.378,231,1.378,232,1.927,233,1.927,234,1.378,235,1.378,236,1.378,237,1.378,238,1.378,239,1.378,240,1.378,241,1.378,242,1.378,243,1.378,244,1.378,245,1.378,246,1.378,247,1.378,248,1.14,249,1.378,250,1.378,251,1.14,252,0.657,253,1.927,254,1.14,255,1.378,256,1.378,257,1.378,258,1.378,259,1.378,260,1.378,261,1.378,262,2.373]],["title/directives/SplitLayoutDirective.html",[9,0.606,44,0.739]],["body/directives/SplitLayoutDirective.html",[8,0.074,9,0.829,10,0.876,14,0.377,15,0.309,16,0.377,18,0.73,24,1.293,25,1.105,26,0.519,27,0.73,28,0.605,29,0.547,32,0.777,34,0.377,37,1.789,39,1.027,40,0.7,41,0.309,42,0.03,43,0.03,44,1.012,45,0.455,50,1.539,51,0.866,52,0.892,61,0.73,63,1.647,65,0.876,66,0.73,67,0.913,68,0.792,69,1.27,71,0.249,73,0.455,74,1.27,77,1.051,78,0.73,83,1.758,85,1.27,86,1.27,87,0.948,88,1.819,91,1.991,97,1.27,99,1.045,101,1.59,102,1.505,103,0.792,107,1.59,110,1.27,111,1.27,112,0.455,113,0.309,114,0.309,116,0.835,118,1.282,119,1.375,121,1.59,122,1.59,123,1.282,125,1.051,126,1.375,127,0.792,132,1.315,133,0.655,142,1.27,143,0.377,144,0.377,145,0.792,146,0.792,148,1.27,149,1.991,151,1.236,152,0.792,154,0.792,155,1.045,157,0.913,158,1.819,159,0.455,179,0.876,190,0.876,191,0.547,192,0.948,198,0.73,229,1.254,252,0.377,263,2.232,264,0.792,265,2.009,266,1.819,267,2.009,268,1.819,269,1.957,270,1.564,271,2.877,272,2.515,273,2.009,274,2.202,275,2.009,276,2.009,277,2.009,278,2.32,279,1.758,280,2.32,281,2.009,282,2.009,283,1.564,284,1.813,285,1.539,286,1.27,287,2.009,288,2.616,289,2.515,290,2.202,291,2.075,292,1.253,293,2.877,294,1.253,295,1.991,296,2.009,297,1.957,298,2.748,299,2.125,300,1.253,301,2.32,302,2.515,303,2.009,304,2.009,305,1.253,306,1.253,307,1.253,308,1.253,309,1.253,310,1.253,311,1.991,312,1.846,313,1.59,314,0.975,315,1.957,316,0.975,317,0.975,318,1.505,319,1.505,320,1.096,321,0.975,322,1.564,323,1.564,324,2.113,325,1.819,326,1.051,327,1.564,328,1.991,329,1.27,330,1.27,331,0.975,332,1.59,333,2.239,334,2.125,335,1.59,336,0.876,337,0.975,338,0.975,339,0.975,340,0.975,341,0.975,342,0.655,343,0.975,344,0.975,345,2.515,346,1.564,347,1.253,348,1.253,349,2.515,350,2.515,351,2.515,352,2.877,353,2.009,354,1.253,355,3.361,356,2.515,357,1.957,358,1.957,359,2.515,360,1.253,361,1.957,362,2.125,363,0.975,364,1.59,365,2.946,366,1.957,367,0.975,368,2.009,369,2.009,370,1.564,371,1.564,372,0.975,373,1.253,374,0.975,375,1.253,376,1.253,377,1.957,378,0.975,379,0.975,380,1.957,381,2.009,382,2.515,383,2.009,384,1.253,385,1.253,386,1.253,387,1.253,388,0.975,389,1.253,390,1.253,391,1.253,392,1.253]],["title/interfaces/Window.html",[191,0.38,216,1.07]],["body/interfaces/Window.html",[8,0.074,14,0.684,15,0.56,16,0.684,26,0.497,28,0.684,29,0.486,32,1.003,34,0.684,39,0.56,40,0.622,41,0.56,42,0.046,43,0.046,50,1.832,51,0.713,52,0.622,61,1.139,66,0.825,67,1.139,71,0.451,73,0.825,78,0.825,87,0.684,99,1.139,112,0.825,113,0.956,114,1.099,116,0.451,123,1.139,126,1.527,143,0.944,144,0.684,151,1.383,155,0.825,157,0.825,159,1.139,166,1.367,168,0.99,169,1.436,170,0.99,171,1.436,172,1.188,173,1.188,174,1.188,175,1.436,176,2.198,177,1.436,178,2.449,179,1.565,182,1.982,184,2.449,185,1.436,186,0.99,187,2.657,189,1.982,190,1.688,191,0.651,192,0.944,193,2.569,194,1.436,198,1.305,199,1.64,200,1.982,201,1.436,202,1.64,203,1.982,204,1.982,205,1.982,206,1.436,207,1.436,208,1.436,209,1.436,210,1.188,211,1.188,212,1.188,213,1.436,214,1.436,215,1.436,216,1.367,217,1.436,218,1.436,219,2.27,220,1.436,221,1.436,222,1.436,223,1.436,224,1.878,225,1.436,226,2.449,227,1.982,228,1.436,229,1.367,230,1.436,231,1.436,232,1.982,233,1.982,234,1.436,235,1.436,236,1.436,237,1.436,238,1.436,239,1.436,240,1.436,241,1.436,242,1.436,243,1.436,244,1.436,245,1.436,246,1.436,247,1.436,248,1.188,249,1.436,250,1.436,251,1.188,252,0.684,253,1.982,254,1.188,255,1.436,256,1.436,257,1.436,258,1.436,259,1.436,260,1.436,261,1.436,262,2.441,393,3.136]],["title/directives/WindowDirective.html",[10,1.07,44,0.739]],["body/directives/WindowDirective.html",[8,0.074,9,0.916,10,1.055,14,0.479,15,0.392,16,0.479,18,0.879,24,0.729,25,1.061,26,0.51,27,1.19,29,0.575,32,0.916,34,0.479,37,0.693,38,1.238,39,0.808,40,0.315,41,0.392,42,0.036,43,0.036,44,1.118,45,0.578,51,0.766,52,0.789,65,1.055,66,0.879,67,1.064,68,1.005,69,1.53,71,0.48,73,0.578,74,1.53,77,1.266,78,0.879,79,1.238,83,1.533,85,1.53,86,1.53,87,0.729,88,1.53,95,1.53,101,1.852,102,0.832,103,1.005,107,1.852,110,1.53,111,1.53,112,0.578,113,0.392,114,0.392,118,0.578,119,1.064,123,1.445,125,0.832,126,1.349,127,1.005,132,0.832,133,2.131,142,1.53,143,0.479,144,0.479,145,1.005,146,1.005,151,0.729,152,1.005,154,1.005,155,1.19,157,1.19,159,0.578,179,1.055,190,1.055,191,0.679,192,0.882,198,0.879,199,1.266,224,0.832,229,1.055,248,1.266,252,0.479,266,2.44,268,2.347,269,2.743,270,1.884,274,1.533,278,2.071,279,1.713,280,1.53,283,1.884,284,1.536,285,0.693,290,1.533,291,0.832,295,1.53,297,2.281,299,1.852,301,2.071,312,1.713,313,1.53,314,1.238,315,2.281,316,1.238,318,1.713,320,1.618,324,1.266,328,1.005,329,1.852,330,1.005,334,1.852,336,1.277,339,1.238,340,1.238,341,1.238,342,0.832,343,1.238,344,1.238,346,2.281,357,1.884,358,1.884,361,1.238,362,2.991,363,2.89,364,2.769,365,3.666,366,3.096,367,2.89,370,2.743,371,1.884,372,2.549,374,1.238,377,1.884,378,1.238,379,1.238,380,2.281,388,1.238,394,1.59,395,2.421,396,2.421,397,2.421,398,2.421,399,2.421,400,2.421,401,2.421,402,2.421,403,2.421,404,1.884,405,2.421,406,2.421,407,1.884,408,2.421,409,2.89,410,2.281,411,1.59,412,2.421,413,3.525,414,1.59,415,2.931,416,1.59,417,2.421,418,3.276,419,1.238,420,1.59,421,1.59,422,2.931,423,2.421,424,2.421,425,1.59,426,1.59,427,1.59,428,1.59,429,3.713,430,1.59,431,1.59,432,1.59,433,1.59,434,1.59,435,2.931,436,1.59,437,1.59]],["title/changelog.html",[438,1.309,439,1.309,440,2.071]],["body/changelog.html",[8,0.054,9,0.711,24,1.106,26,0.333,27,1.047,29,0.569,40,0.572,42,0.054,43,0.054,44,1.218,45,1.047,52,0.572,70,2.557,95,1.822,113,0.711,170,1.601,186,1.601,191,0.569,251,1.921,254,1.508,279,1.508,284,1.256,285,1.256,286,1.822,298,2.244,319,1.508,320,1.256,324,1.508,325,1.822,326,1.508,336,1.601,342,1.921,407,2.244,410,2.244,441,2.883,442,3.601,443,4.628,444,2.883,445,4.628,446,4.628,447,3.675,448,2.883,449,2.883,450,2.883,451,2.883,452,2.883,453,2.883,454,2.883,455,2.883,456,3.675,457,3.5,458,2.883,459,2.883,460,3.675,461,2.883,462,2.244,463,2.883,464,2.883,465,2.883,466,2.883,467,2.883,468,2.883,469,2.883,470,2.883,471,2.883,472,2.883,473,3.675,474,3.675,475,3.675,476,2.883,477,2.883,478,2.883,479,2.883,480,4.045,481,2.883,482,2.883,483,2.883,484,2.883,485,2.883,486,2.883,487,2.883,488,2.883,489,2.883,490,2.883,491,2.86,492,2.883,493,2.883,494,2.883,495,2.883,496,2.883,497,2.883,498,2.883,499,2.86,500,2.244,501,2.883,502,2.883,503,2.244,504,2.883,505,3.675,506,2.883,507,2.883,508,3.675,509,2.883,510,2.883,511,2.244,512,2.883,513,2.883,514,2.883]],["title/index.html",[71,0.411,438,1.309,439,1.309]],["body/index.html",[1,1.479,8,0.071,13,1.334,15,0.629,21,1.985,22,2.641,23,2.967,24,0.768,25,1.223,26,0.536,27,1.232,28,1.022,29,0.63,32,0.837,33,1.985,40,0.673,41,0.837,42,0.05,43,0.05,45,0.927,51,0.673,64,3.293,65,1.479,70,1.613,113,0.941,116,0.506,117,1.774,118,0.927,119,0.927,125,1.334,133,1.334,143,0.768,144,0.768,170,1.112,173,1.334,174,1.334,186,1.112,191,0.526,198,1.537,252,1.022,278,2.145,279,1.334,280,1.613,286,2.145,288,1.985,326,1.334,342,1.774,362,2.145,404,2.967,409,1.985,419,1.985,457,1.985,462,1.985,499,3.163,500,1.985,503,2.967,511,1.985,515,4.232,516,4.441,517,2.551,518,2.551,519,4.064,520,2.551,521,2.551,522,3.813,523,3.813,524,2.551,525,3.394,526,2.641,527,3.394,528,2.551,529,2.551,530,2.551,531,2.551,532,2.551,533,2.551,534,2.551,535,2.551,536,2.551,537,2.551,538,2.551,539,3.394,540,2.551,541,3.394,542,2.551,543,4.441,544,3.394,545,3.813,546,3.813,547,3.813,548,2.551,549,2.551,550,2.551,551,1.985,552,2.551,553,2.551,554,2.551,555,2.551,556,2.551,557,2.551,558,2.551,559,2.551,560,2.551,561,2.551,562,2.551,563,2.551,564,2.551,565,2.551,566,2.551,567,2.551,568,2.551,569,2.551,570,3.813,571,2.551,572,2.551,573,2.551,574,2.551,575,2.551,576,3.813,577,2.551,578,2.551,579,2.551,580,2.551,581,2.551,582,3.394,583,3.394,584,2.551,585,2.551,586,2.551,587,3.394,588,2.551,589,2.551,590,2.551,591,2.551,592,2.551,593,2.551]],["title/license.html",[438,1.309,439,1.309,594,1.612]],["body/license.html",[8,0.058,13,1.685,42,0.058,43,0.058,115,1.685,116,0.781,202,1.685,442,2.508,526,2.508,551,2.508,594,2.508,595,3.939,596,4.254,597,3.222,598,3.222,599,3.222,600,3.939,601,3.222,602,3.222,603,3.222,604,3.222,605,3.222,606,3.222,607,3.939,608,4.763,609,3.222,610,3.222,611,3.222,612,4.254,613,3.222,614,3.939,615,3.222,616,3.222,617,3.222,618,3.222,619,3.222,620,3.222,621,3.222,622,3.222,623,3.939,624,3.222,625,3.222,626,3.222,627,3.222,628,3.222,629,3.222,630,3.939,631,3.939,632,3.222,633,3.222,634,3.222,635,3.222,636,3.222,637,3.222,638,3.222,639,3.222,640,3.222,641,3.222,642,3.222,643,3.222,644,3.222,645,3.222,646,3.222,647,3.222,648,3.222,649,3.222,650,3.222,651,3.222,652,3.222,653,3.222,654,3.222,655,3.222,656,3.222,657,3.222,658,3.222,659,3.222,660,3.222]],["title/modules.html",[2,2.09]],["body/modules.html",[1,1.656,2,2.402,8,0.064,42,0.064,43,0.064,252,1.144,491,2.958,661,3.801,662,3.801]],["title/overview.html",[663,2.573]],["body/overview.html",[0,2.18,1,2.117,3,3.194,4,2.684,5,2.684,6,2.684,7,1.724,8,0.07,9,1.171,10,2.069,11,3.194,12,2.684,13,1.804,42,0.06,43,0.06,45,1.253,166,1.503,261,2.18,364,2.594,663,2.684,664,3.449,665,2.684]],["title/miscellaneous/typealiases.html",[666,1.083,667,2.941]],["body/miscellaneous/typealiases.html",[7,1.162,8,0.071,9,0.968,24,1.181,25,1.181,26,0.453,28,1.181,37,1.709,42,0.058,43,0.058,46,2.023,47,2.479,51,0.877,52,0.877,55,2.479,63,1.673,71,0.635,87,0.963,91,2.681,114,0.968,115,1.673,116,0.635,117,2.312,118,1.54,119,1.54,120,2.479,168,1.394,191,0.496,192,0.963,263,2.023,264,2.794,266,2.479,274,2.051,284,1.394,285,1.394,290,2.051,291,2.051,295,2.023,299,2.023,311,2.023,312,1.673,313,2.023,317,2.49,318,1.673,319,1.673,320,1.394,331,2.49,332,2.023,335,2.023,336,1.394,666,1.673,668,3.2,669,3.301,670,2.49,671,3.052,672,2.49,673,3.2]],["title/miscellaneous/variables.html",[666,1.083,674,2.288]],["body/miscellaneous/variables.html",[7,0.827,8,0.073,9,0.775,24,0.685,25,1.083,26,0.534,37,0.992,39,0.957,42,0.046,43,0.046,46,1.439,47,1.986,51,0.884,52,0.912,55,2.659,61,1.141,63,1.191,65,1.914,71,0.452,87,1.298,97,1.986,99,1.408,114,1.004,115,1.191,116,0.714,117,2.36,118,1.595,119,1.595,120,2.451,121,2.572,122,2.572,124,1.772,132,1.643,148,1.986,149,2.572,151,1.266,158,2.725,168,0.992,172,1.643,191,0.353,192,0.946,210,1.643,211,1.643,212,1.643,263,1.439,264,2.451,268,1.986,274,2.254,284,0.992,285,1.369,290,2.2,291,2.028,301,2.659,311,1.439,312,1.191,318,1.643,319,1.643,320,1.369,321,1.772,322,2.445,323,2.445,324,2.488,325,2.451,326,1.643,327,2.445,328,1.439,329,1.439,330,1.439,332,1.986,333,1.772,334,1.439,335,1.439,336,0.992,337,1.772,338,1.772,665,2.445,666,1.191,669,2.799,670,1.772,671,2.445,672,1.772,674,1.772,675,3.142,676,3.597,677,4.069,678,2.277,679,3.142,680,3.142]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":365,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["03",{"_index":443,"title":{},"body":{"changelog.html":{}}}],["0683aa3",{"_index":465,"title":{},"body":{"changelog.html":{}}}],["083b648",{"_index":506,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":364,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"overview.html":{}}}],["1.0.0",{"_index":484,"title":{},"body":{"changelog.html":{}}}],["1.0.1",{"_index":479,"title":{},"body":{"changelog.html":{}}}],["1.0.2",{"_index":477,"title":{},"body":{"changelog.html":{}}}],["1.0.3",{"_index":472,"title":{},"body":{"changelog.html":{}}}],["1.0.4",{"_index":468,"title":{},"body":{"changelog.html":{}}}],["1.0.5",{"_index":459,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":450,"title":{},"body":{"changelog.html":{}}}],["1.1.1",{"_index":441,"title":{},"body":{"changelog.html":{}}}],["10",{"_index":428,"title":{},"body":{"directives/WindowDirective.html":{}}}],["100",{"_index":423,"title":{},"body":{"directives/WindowDirective.html":{}}}],["100vh",{"_index":350,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["11",{"_index":480,"title":{},"body":{"changelog.html":{}}}],["12",{"_index":473,"title":{},"body":{"changelog.html":{}}}],["14da071",{"_index":467,"title":{},"body":{"changelog.html":{}}}],["16",{"_index":460,"title":{},"body":{"changelog.html":{}}}],["17",{"_index":451,"title":{},"body":{"changelog.html":{}}}],["19",{"_index":444,"title":{},"body":{"changelog.html":{}}}],["1acd46e",{"_index":453,"title":{},"body":{"changelog.html":{}}}],["1fr",{"_index":355,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["2",{"_index":665,"title":{},"body":{"overview.html":{},"miscellaneous/variables.html":{}}}],["2021",{"_index":442,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["3",{"_index":664,"title":{},"body":{"overview.html":{}}}],["3240712",{"_index":455,"title":{},"body":{"changelog.html":{}}}],["3ee5543",{"_index":490,"title":{},"body":{"changelog.html":{}}}],["466a9d7",{"_index":507,"title":{},"body":{"changelog.html":{}}}],["4708aff",{"_index":514,"title":{},"body":{"changelog.html":{}}}],["487885f",{"_index":494,"title":{},"body":{"changelog.html":{}}}],["4aa85c7",{"_index":478,"title":{},"body":{"changelog.html":{}}}],["536764f",{"_index":485,"title":{},"body":{"changelog.html":{}}}],["582e83e",{"_index":497,"title":{},"body":{"changelog.html":{}}}],["7e66b70",{"_index":487,"title":{},"body":{"changelog.html":{}}}],["8446001",{"_index":449,"title":{},"body":{"changelog.html":{}}}],["8bdb155",{"_index":492,"title":{},"body":{"changelog.html":{}}}],["90ad184",{"_index":501,"title":{},"body":{"changelog.html":{}}}],["962620d",{"_index":512,"title":{},"body":{"changelog.html":{}}}],["9fadf70",{"_index":495,"title":{},"body":{"changelog.html":{}}}],["9ff473a",{"_index":510,"title":{},"body":{"changelog.html":{}}}],["_",{"_index":343,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["above",{"_index":629,"title":{},"body":{"license.html":{}}}],["absolute",{"_index":320,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["acb3fff",{"_index":458,"title":{},"body":{"changelog.html":{}}}],["accepts",{"_index":59,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["accessors",{"_index":77,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["action",{"_index":654,"title":{},"body":{"license.html":{}}}],["active",{"_index":124,"title":{},"body":{"directives/IfSpanDirective.html":{},"miscellaneous/variables.html":{}}}],["add",{"_index":457,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["added",{"_index":270,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["addition",{"_index":281,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["aliases",{"_index":668,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow",{"_index":454,"title":{},"body":{"changelog.html":{}}}],["allows",{"_index":171,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["along",{"_index":277,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["and/or",{"_index":621,"title":{},"body":{"license.html":{}}}],["angular",{"_index":342,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{}}}],["angular/core",{"_index":34,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["angular/platform",{"_index":316,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["any).segments",{"_index":256,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["anymore",{"_index":249,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["api",{"_index":254,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["app",{"_index":23,"title":{},"body":{"modules/FoldableModule.html":{},"index.html":{}}}],["appcomponent",{"_index":553,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":550,"title":{},"body":{"index.html":{}}}],["arising",{"_index":658,"title":{},"body":{"license.html":{}}}],["asobject",{"_index":177,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["asobservable",{"_index":144,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["assign",{"_index":402,"title":{},"body":{"directives/WindowDirective.html":{}}}],["associated",{"_index":609,"title":{},"body":{"license.html":{}}}],["authors",{"_index":647,"title":{},"body":{"license.html":{}}}],["available",{"_index":190,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["b1c68ac",{"_index":483,"title":{},"body":{"changelog.html":{}}}],["b2a3632",{"_index":498,"title":{},"body":{"changelog.html":{}}}],["b84fc9f",{"_index":471,"title":{},"body":{"changelog.html":{}}}],["before",{"_index":564,"title":{},"body":{"index.html":{}}}],["behaves",{"_index":56,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["between",{"_index":272,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["boolean",{"_index":61,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["bottom",{"_index":371,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["browse",{"_index":662,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":252,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"index.html":{},"modules.html":{}}}],["bug",{"_index":445,"title":{},"body":{"changelog.html":{}}}],["build",{"_index":22,"title":{},"body":{"modules/FoldableModule.html":{},"index.html":{}}}],["built",{"_index":589,"title":{},"body":{"index.html":{}}}],["c",{"_index":597,"title":{},"body":{"license.html":{}}}],["calc(100vh",{"_index":417,"title":{},"body":{"directives/WindowDirective.html":{}}}],["calc(100vw",{"_index":416,"title":{},"body":{"directives/WindowDirective.html":{}}}],["calc(env(viewport",{"_index":361,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["case",{"_index":149,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"miscellaneous/variables.html":{}}}],["change",{"_index":229,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["changed",{"_index":557,"title":{},"body":{"index.html":{}}}],["changelog",{"_index":440,"title":{"changelog.html":{}},"body":{}}],["changes",{"_index":186,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["charge",{"_index":604,"title":{},"body":{"license.html":{}}}],["check",{"_index":326,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["checks",{"_index":322,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/variables.html":{}}}],["choose",{"_index":271,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["chrome",{"_index":534,"title":{},"body":{"index.html":{}}}],["claim",{"_index":650,"title":{},"body":{"license.html":{}}}],["class",{"_index":41,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["clone",{"_index":572,"title":{},"body":{"index.html":{}}}],["cluster_foldablemodule",{"_index":4,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["cluster_foldablemodule_declarations",{"_index":5,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["cluster_foldablemodule_exports",{"_index":6,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["code",{"_index":545,"title":{},"body":{"index.html":{}}}],["column",{"_index":353,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["columngap",{"_index":360,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["commit",{"_index":509,"title":{},"body":{"changelog.html":{}}}],["common",{"_index":345,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["components",{"_index":517,"title":{},"body":{"index.html":{}}}],["condition",{"_index":90,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["conditions",{"_index":115,"title":{},"body":{"directives/IfSpanDirective.html":{},"license.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["conduct",{"_index":563,"title":{},"body":{"index.html":{}}}],["connection",{"_index":659,"title":{},"body":{"license.html":{}}}],["console.log('screen",{"_index":556,"title":{},"body":{"index.html":{}}}],["console.warn('getwindowsegments",{"_index":247,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["const",{"_index":123,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["constructor",{"_index":78,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["constructor(element",{"_index":292,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["constructor(private",{"_index":554,"title":{},"body":{"index.html":{}}}],["constructor(screencontext",{"_index":79,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/WindowDirective.html":{}}}],["container",{"_index":266,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{}}}],["contains",{"_index":19,"title":{},"body":{"modules/FoldableModule.html":{}}}],["context",{"_index":113,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{}}}],["context.ts",{"_index":169,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["context.ts:37",{"_index":180,"title":{},"body":{"injectables/ScreenContext.html":{}}}],["context.ts:68",{"_index":188,"title":{},"body":{"injectables/ScreenContext.html":{}}}],["context.ts:75",{"_index":195,"title":{},"body":{"injectables/ScreenContext.html":{}}}],["context.ts:82",{"_index":197,"title":{},"body":{"injectables/ScreenContext.html":{}}}],["context.ts:89",{"_index":183,"title":{},"body":{"injectables/ScreenContext.html":{}}}],["context.ts:96",{"_index":181,"title":{},"body":{"injectables/ScreenContext.html":{}}}],["contract",{"_index":655,"title":{},"body":{"license.html":{}}}],["contribute",{"_index":561,"title":{},"body":{"index.html":{}}}],["contributing",{"_index":558,"title":{},"body":{"index.html":{}}}],["copies",{"_index":623,"title":{},"body":{"license.html":{}}}],["copy",{"_index":607,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":596,"title":{},"body":{"license.html":{}}}],["creating",{"_index":267,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["css",{"_index":269,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["current",{"_index":50,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{}}}],["currentcontext",{"_index":222,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["currently",{"_index":399,"title":{},"body":{"directives/WindowDirective.html":{}}}],["d383609",{"_index":476,"title":{},"body":{"changelog.html":{}}}],["damages",{"_index":651,"title":{},"body":{"license.html":{}}}],["db13ef1",{"_index":504,"title":{},"body":{"changelog.html":{}}}],["deal",{"_index":611,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":660,"title":{},"body":{"license.html":{}}}],["declarations",{"_index":30,"title":{},"body":{"modules/FoldableModule.html":{}}}],["declare",{"_index":214,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["default",{"_index":158,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":83,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["defines",{"_index":91,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"miscellaneous/typealiases.html":{}}}],["demo",{"_index":499,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["demos",{"_index":592,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":3,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["deployment",{"_index":482,"title":{},"body":{"changelog.html":{}}}],["description",{"_index":18,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["design",{"_index":276,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["destroyed",{"_index":223,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["detect",{"_index":680,"title":{},"body":{"miscellaneous/variables.html":{}}}],["detected",{"_index":299,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{}}}],["dev",{"_index":577,"title":{},"body":{"index.html":{}}}],["device",{"_index":198,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["device's",{"_index":175,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["devices",{"_index":27,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{}}}],["devices/demos",{"_index":590,"title":{},"body":{"index.html":{}}}],["different",{"_index":273,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["direction",{"_index":312,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["directive",{"_index":44,"title":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{}}}],["directives",{"_index":45,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{},"overview.html":{}}}],["display",{"_index":346,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["displayed",{"_index":278,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["distribute",{"_index":619,"title":{},"body":{"license.html":{}}}],["docs",{"_index":481,"title":{},"body":{"changelog.html":{}}}],["documentation",{"_index":526,"title":{},"body":{"index.html":{},"license.html":{}}}],["domrect",{"_index":193,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["dual",{"_index":519,"title":{},"body":{"index.html":{}}}],["duo",{"_index":523,"title":{},"body":{"index.html":{}}}],["edge",{"_index":532,"title":{},"body":{"index.html":{}}}],["element",{"_index":295,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{}}}],["elementref",{"_index":293,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["elsetemplateref",{"_index":129,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["elseviewref",{"_index":131,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["embeddedviewref",{"_index":109,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["emitting",{"_index":185,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["emulation",{"_index":527,"title":{},"body":{"index.html":{}}}],["enable",{"_index":538,"title":{},"body":{"index.html":{}}}],["enumeration",{"_index":121,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"miscellaneous/variables.html":{}}}],["env(viewport",{"_index":366,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["error('segment",{"_index":431,"title":{},"body":{"directives/WindowDirective.html":{}}}],["evaluates",{"_index":96,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["event",{"_index":646,"title":{},"body":{"license.html":{}}}],["example",{"_index":125,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["except",{"_index":58,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["experiences",{"_index":520,"title":{},"body":{"index.html":{}}}],["experimental",{"_index":536,"title":{},"body":{"index.html":{}}}],["export",{"_index":40,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{}}}],["exports",{"_index":31,"title":{},"body":{"modules/FoldableModule.html":{}}}],["express",{"_index":637,"title":{},"body":{"license.html":{}}}],["expression",{"_index":62,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["extra",{"_index":463,"title":{},"body":{"changelog.html":{}}}],["false",{"_index":97,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"miscellaneous/variables.html":{}}}],["fdifspan",{"_index":70,"title":{},"body":{"directives/IfSpanDirective.html":{},"changelog.html":{},"index.html":{}}}],["fdifspan(condition",{"_index":134,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["fdifspanelse",{"_index":75,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["fdifspanelse(templateref",{"_index":140,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["fdifspanthen",{"_index":76,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["fdifspanthen(templateref",{"_index":137,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["fdsplitlayout",{"_index":288,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"index.html":{}}}],["fdsplitlayout(options",{"_index":375,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["fdwindow",{"_index":409,"title":{},"body":{"directives/WindowDirective.html":{},"index.html":{}}}],["fdwindow(segment",{"_index":425,"title":{},"body":{"directives/WindowDirective.html":{}}}],["feature",{"_index":528,"title":{},"body":{"index.html":{}}}],["features",{"_index":456,"title":{},"body":{"changelog.html":{}}}],["file",{"_index":16,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["files",{"_index":610,"title":{},"body":{"license.html":{}}}],["filter",{"_index":205,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["finish",{"_index":502,"title":{},"body":{"changelog.html":{}}}],["first",{"_index":279,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{}}}],["fitness",{"_index":642,"title":{},"body":{"license.html":{}}}],["fix",{"_index":493,"title":{},"body":{"changelog.html":{}}}],["fixes",{"_index":446,"title":{},"body":{"changelog.html":{}}}],["flags",{"_index":537,"title":{},"body":{"index.html":{}}}],["flex",{"_index":318,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["flexdirection",{"_index":351,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["fold",{"_index":117,"title":{},"body":{"directives/IfSpanDirective.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["foldable",{"_index":516,"title":{},"body":{"index.html":{}}}],["foldableimport",{"_index":548,"title":{},"body":{"index.html":{}}}],["foldablemodule",{"_index":1,"title":{"modules/FoldableModule.html":{}},"body":{"modules/FoldableModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["foldables",{"_index":593,"title":{},"body":{"index.html":{}}}],["follow",{"_index":539,"title":{},"body":{"index.html":{}}}],["following",{"_index":628,"title":{},"body":{"license.html":{}}}],["format",{"_index":303,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["free",{"_index":603,"title":{},"body":{"license.html":{}}}],["fromevent",{"_index":201,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["fromevent(matchmedia(singlefoldhorizontal",{"_index":228,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["fromevent(matchmedia(singlefoldvertical",{"_index":230,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["full",{"_index":525,"title":{},"body":{"index.html":{}}}],["function",{"_index":393,"title":{},"body":{"interfaces/Window.html":{}}}],["furnished",{"_index":626,"title":{},"body":{"license.html":{}}}],["gallery",{"_index":583,"title":{},"body":{"index.html":{}}}],["getcomputedstyle(this.element.nativeelement",{"_index":389,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["getismultiscreen",{"_index":196,"title":{},"body":{"injectables/ScreenContext.html":{}}}],["getlayoutmode",{"_index":305,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["getreadingdirection",{"_index":309,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["gets",{"_index":182,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["getscreencontext",{"_index":243,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["getscreenspanning",{"_index":194,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["getting",{"_index":438,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["getwindoworder",{"_index":307,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["getwindowsegments",{"_index":187,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["given",{"_index":323,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/variables.html":{}}}],["global",{"_index":215,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["google",{"_index":533,"title":{},"body":{"index.html":{}}}],["granted",{"_index":602,"title":{},"body":{"license.html":{}}}],["grid",{"_index":319,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["gridarea",{"_index":418,"title":{},"body":{"directives/WindowDirective.html":{}}}],["gridautoflow",{"_index":359,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["gridtemplateareas",{"_index":356,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["gridtemplatecolumns",{"_index":354,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["gridtemplaterows",{"_index":368,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["height",{"_index":349,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["help",{"_index":21,"title":{},"body":{"modules/FoldableModule.html":{},"index.html":{}}}],["here",{"_index":541,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":601,"title":{},"body":{"license.html":{}}}],["holders",{"_index":648,"title":{},"body":{"license.html":{}}}],["holds",{"_index":217,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["horizontal",{"_index":119,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["host",{"_index":313,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{}}}],["hostbinding",{"_index":314,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["hostbinding('style",{"_index":378,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["href=\"splitlayoutmode",{"_index":304,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["ifspandirective",{"_index":7,"title":{"directives/IfSpanDirective.html":{}},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["ignore",{"_index":101,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["ignored",{"_index":238,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["implement",{"_index":505,"title":{},"body":{"changelog.html":{}}}],["implementation",{"_index":585,"title":{},"body":{"index.html":{}}}],["implements",{"_index":66,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["implied",{"_index":638,"title":{},"body":{"license.html":{}}}],["import",{"_index":32,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["imports",{"_index":549,"title":{},"body":{"index.html":{}}}],["included",{"_index":632,"title":{},"body":{"license.html":{}}}],["including",{"_index":614,"title":{},"body":{"license.html":{}}}],["inconsistent",{"_index":452,"title":{},"body":{"changelog.html":{}}}],["index",{"_index":71,"title":{"index.html":{}},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":14,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["information",{"_index":218,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["init",{"_index":486,"title":{},"body":{"changelog.html":{}}}],["initial",{"_index":508,"title":{},"body":{"changelog.html":{}}}],["initialization",{"_index":466,"title":{},"body":{"changelog.html":{}}}],["injectable",{"_index":166,"title":{"injectables/ScreenContext.html":{}},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"overview.html":{}}}],["injectables",{"_index":167,"title":{},"body":{"injectables/ScreenContext.html":{}}}],["input",{"_index":110,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["inputs",{"_index":74,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["install",{"_index":547,"title":{},"body":{"index.html":{}}}],["instead",{"_index":60,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["instructions",{"_index":540,"title":{},"body":{"index.html":{}}}],["interface",{"_index":216,"title":{"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["interfaces",{"_index":261,"title":{},"body":{"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"overview.html":{}}}],["ismultiscreen",{"_index":179,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["isn't",{"_index":420,"title":{},"body":{"directives/WindowDirective.html":{}}}],["issue",{"_index":566,"title":{},"body":{"index.html":{}}}],["issues",{"_index":447,"title":{},"body":{"changelog.html":{}}}],["isvalid",{"_index":327,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/variables.html":{}}}],["js",{"_index":341,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["justifycontent",{"_index":347,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["keep",{"_index":282,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["kind",{"_index":636,"title":{},"body":{"license.html":{}}}],["lasorsa",{"_index":599,"title":{},"body":{"license.html":{}}}],["latest",{"_index":530,"title":{},"body":{"index.html":{}}}],["layout",{"_index":24,"title":{},"body":{"modules/FoldableModule.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["layout.directive",{"_index":38,"title":{},"body":{"modules/FoldableModule.html":{},"directives/WindowDirective.html":{}}}],["layout.directive.ts",{"_index":264,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["layout.directive.ts:196",{"_index":296,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["layout.directive.ts:205",{"_index":294,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["layout.directive.ts:222",{"_index":306,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["layout.directive.ts:231",{"_index":308,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["layout.directive.ts:240",{"_index":310,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["layoutmode",{"_index":289,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["layouts",{"_index":496,"title":{},"body":{"changelog.html":{}}}],["layoutstyle",{"_index":374,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["layoutstyles",{"_index":344,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["layoutstyles[mode][spanning][segment",{"_index":437,"title":{},"body":{"directives/WindowDirective.html":{}}}],["layoutstyles[this.mode].common",{"_index":391,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["layoutstyles[this.mode][reverse",{"_index":392,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["left",{"_index":363,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["lefttoright",{"_index":337,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/variables.html":{}}}],["liability",{"_index":652,"title":{},"body":{"license.html":{}}}],["liable",{"_index":649,"title":{},"body":{"license.html":{}}}],["library",{"_index":543,"title":{},"body":{"index.html":{}}}],["license",{"_index":594,"title":{"license.html":{}},"body":{"license.html":{}}}],["limitation",{"_index":615,"title":{},"body":{"license.html":{}}}],["limited",{"_index":639,"title":{},"body":{"license.html":{}}}],["link",{"_index":39,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"miscellaneous/variables.html":{}}}],["list",{"_index":189,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["live",{"_index":524,"title":{},"body":{"index.html":{}}}],["locally",{"_index":571,"title":{},"body":{"index.html":{}}}],["look",{"_index":339,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["ltr",{"_index":335,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["ma",{"_index":340,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["machine",{"_index":574,"title":{},"body":{"index.html":{}}}],["make",{"_index":562,"title":{},"body":{"index.html":{}}}],["making",{"_index":579,"title":{},"body":{"index.html":{}}}],["map",{"_index":204,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["match",{"_index":161,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["matchcondition",{"_index":147,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["matches",{"_index":53,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["matching",{"_index":43,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["matchmedia(singlefoldhorizontal).matches",{"_index":245,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["matchmedia(singlefoldvertical).matches",{"_index":246,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["maxheight",{"_index":424,"title":{},"body":{"directives/WindowDirective.html":{}}}],["meaning",{"_index":400,"title":{},"body":{"directives/WindowDirective.html":{}}}],["media",{"_index":212,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["merchantability",{"_index":641,"title":{},"body":{"license.html":{}}}],["merge",{"_index":202,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"license.html":{}}}],["metadata",{"_index":68,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["methods",{"_index":72,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{}}}],["microsoft",{"_index":531,"title":{},"body":{"index.html":{}}}],["min",{"_index":474,"title":{},"body":{"changelog.html":{}}}],["miscellaneous",{"_index":666,"title":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":595,"title":{},"body":{"license.html":{}}}],["mode",{"_index":52,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["modes",{"_index":321,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/variables.html":{}}}],["modifications",{"_index":580,"title":{},"body":{"index.html":{}}}],["modify",{"_index":617,"title":{},"body":{"license.html":{}}}],["module",{"_index":0,"title":{"modules/FoldableModule.html":{}},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/FoldableModule.html":{},"modules.html":{}}}],["multi",{"_index":25,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["multiple",{"_index":199,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["name",{"_index":86,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["naming",{"_index":489,"title":{},"body":{"changelog.html":{}}}],["new",{"_index":224,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["ng",{"_index":513,"title":{},"body":{"changelog.html":{}}}],["ngif",{"_index":57,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["ngmodule",{"_index":33,"title":{},"body":{"modules/FoldableModule.html":{},"index.html":{}}}],["ngondestroy",{"_index":73,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["ngx",{"_index":515,"title":{},"body":{"index.html":{}}}],["none",{"_index":120,"title":{},"body":{"directives/IfSpanDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["noninfringement",{"_index":645,"title":{},"body":{"license.html":{}}}],["normal",{"_index":332,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["note",{"_index":403,"title":{},"body":{"directives/WindowDirective.html":{}}}],["notice",{"_index":630,"title":{},"body":{"license.html":{}}}],["npm",{"_index":546,"title":{},"body":{"index.html":{}}}],["null",{"_index":107,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["number",{"_index":415,"title":{},"body":{"directives/WindowDirective.html":{}}}],["object",{"_index":677,"title":{},"body":{"miscellaneous/variables.html":{}}}],["observable",{"_index":184,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["obtaining",{"_index":606,"title":{},"body":{"license.html":{}}}],["ondestroy",{"_index":67,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["one",{"_index":406,"title":{},"body":{"directives/WindowDirective.html":{}}}],["option",{"_index":407,"title":{},"body":{"directives/WindowDirective.html":{},"changelog.html":{}}}],["optional",{"_index":88,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["options",{"_index":298,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"changelog.html":{}}}],["options.trim().split",{"_index":385,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["order",{"_index":284,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["orientation",{"_index":462,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["otherwise",{"_index":657,"title":{},"body":{"license.html":{}}}],["out",{"_index":13,"title":{},"body":{"modules/FoldableModule.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":663,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["packages",{"_index":575,"title":{},"body":{"index.html":{}}}],["param",{"_index":132,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/variables.html":{}}}],["parameter",{"_index":287,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["parameters",{"_index":85,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["parent",{"_index":265,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["parseint(segment",{"_index":427,"title":{},"body":{"directives/WindowDirective.html":{}}}],["parseoptions(options",{"_index":384,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["particular",{"_index":643,"title":{},"body":{"license.html":{}}}],["permission",{"_index":600,"title":{},"body":{"license.html":{}}}],["permit",{"_index":624,"title":{},"body":{"license.html":{}}}],["person",{"_index":605,"title":{},"body":{"license.html":{}}}],["persons",{"_index":625,"title":{},"body":{"license.html":{}}}],["photo",{"_index":582,"title":{},"body":{"index.html":{}}}],["pipe",{"_index":231,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["placed",{"_index":396,"title":{},"body":{"directives/WindowDirective.html":{}}}],["please",{"_index":250,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["portions",{"_index":634,"title":{},"body":{"license.html":{}}}],["position",{"_index":372,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["posting",{"_index":565,"title":{},"body":{"index.html":{}}}],["private",{"_index":126,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["project",{"_index":503,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["projects/.../if",{"_index":672,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/.../media",{"_index":675,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/.../screen",{"_index":670,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/.../split",{"_index":669,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/lib/src/core/foldable.module.ts",{"_index":17,"title":{},"body":{"modules/FoldableModule.html":{}}}],["projects/lib/src/core/if",{"_index":46,"title":{},"body":{"directives/IfSpanDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/lib/src/core/media",{"_index":678,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/lib/src/core/screen",{"_index":168,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/lib/src/core/split",{"_index":263,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/lib/src/core/window.directive.ts",{"_index":394,"title":{},"body":{"directives/WindowDirective.html":{}}}],["projects/lib/src/core/window.directive.ts:115",{"_index":412,"title":{},"body":{"directives/WindowDirective.html":{}}}],["projects/lib/src/core/window.directive.ts:121",{"_index":411,"title":{},"body":{"directives/WindowDirective.html":{}}}],["properties",{"_index":262,"title":{},"body":{"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["provided",{"_index":551,"title":{},"body":{"index.html":{},"license.html":{}}}],["providedin",{"_index":220,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["publish",{"_index":618,"title":{},"body":{"license.html":{}}}],["pull",{"_index":567,"title":{},"body":{"index.html":{}}}],["purpose",{"_index":644,"title":{},"body":{"license.html":{}}}],["queries",{"_index":213,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["queries.ts",{"_index":676,"title":{},"body":{"miscellaneous/variables.html":{}}}],["query",{"_index":172,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["re",{"_index":584,"title":{},"body":{"index.html":{}}}],["react",{"_index":587,"title":{},"body":{"index.html":{}}}],["read",{"_index":404,"title":{},"body":{"directives/WindowDirective.html":{},"index.html":{}}}],["reading",{"_index":311,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["readingdirection",{"_index":291,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["readingdirection.lefttoright",{"_index":390,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["readingdirection.righttoleft",{"_index":436,"title":{},"body":{"directives/WindowDirective.html":{}}}],["readonly",{"_index":219,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["real",{"_index":448,"title":{},"body":{"changelog.html":{}}}],["receive",{"_index":173,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"index.html":{}}}],["refresh",{"_index":461,"title":{},"body":{"changelog.html":{}}}],["regardless",{"_index":552,"title":{},"body":{"index.html":{}}}],["related",{"_index":581,"title":{},"body":{"index.html":{}}}],["relative",{"_index":373,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["rendered",{"_index":317,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/typealiases.html":{}}}],["repaints",{"_index":464,"title":{},"body":{"changelog.html":{}}}],["replaysubject",{"_index":203,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["replaysubject(1",{"_index":225,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["repository",{"_index":573,"title":{},"body":{"index.html":{}}}],["represents",{"_index":673,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["request",{"_index":568,"title":{},"body":{"index.html":{}}}],["requires",{"_index":529,"title":{},"body":{"index.html":{}}}],["reset",{"_index":12,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["restriction",{"_index":613,"title":{},"body":{"license.html":{}}}],["results",{"_index":42,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":151,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":102,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["reverse",{"_index":285,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["reversed",{"_index":408,"title":{},"body":{"directives/WindowDirective.html":{}}}],["revert",{"_index":488,"title":{},"body":{"changelog.html":{}}}],["right",{"_index":367,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["rightmost",{"_index":405,"title":{},"body":{"directives/WindowDirective.html":{}}}],["rights",{"_index":616,"title":{},"body":{"license.html":{}}}],["righttoleft",{"_index":338,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/variables.html":{}}}],["root",{"_index":221,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["row",{"_index":352,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["rowgap",{"_index":369,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["rtl",{"_index":336,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["run",{"_index":570,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":112,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["rxjs/operators",{"_index":209,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["safestyle",{"_index":315,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["same",{"_index":283,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["sample",{"_index":586,"title":{},"body":{"index.html":{}}}],["screen",{"_index":26,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["screencontext",{"_index":29,"title":{"injectables/ScreenContext.html":{}},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{}}}],["screencontextdata",{"_index":176,"title":{"interfaces/ScreenContextData.html":{}},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["screencontextsubscription",{"_index":127,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["screens",{"_index":200,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["screenspanning",{"_index":114,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["screenspanning.horizontal",{"_index":155,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["screenspanning.none",{"_index":159,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["screenspanning.vertical",{"_index":157,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["second",{"_index":280,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["see",{"_index":28,"title":{},"body":{"modules/FoldableModule.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["segment",{"_index":362,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["segment0",{"_index":357,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["segment1",{"_index":358,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["segments",{"_index":192,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["selector",{"_index":69,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["sell",{"_index":622,"title":{},"body":{"license.html":{}}}],["server",{"_index":578,"title":{},"body":{"index.html":{}}}],["service",{"_index":170,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["services",{"_index":518,"title":{},"body":{"index.html":{}}}],["set",{"_index":133,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["setfdifspan(condition",{"_index":104,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["setfdifspanelse(templateref",{"_index":108,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["setfdifspanthen(templateref",{"_index":106,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["setfdsplitlayout(options",{"_index":300,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["setfdwindow(segment",{"_index":414,"title":{},"body":{"directives/WindowDirective.html":{}}}],["sets",{"_index":297,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["setup",{"_index":542,"title":{},"body":{"index.html":{}}}],["shall",{"_index":631,"title":{},"body":{"license.html":{}}}],["sharereplay",{"_index":206,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["sharereplay(1",{"_index":235,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["show",{"_index":94,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["showing",{"_index":105,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["shown",{"_index":92,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["shows",{"_index":48,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["similar",{"_index":588,"title":{},"body":{"index.html":{}}}],["single",{"_index":65,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["singlefoldhorizontal",{"_index":210,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["singlefoldvertical",{"_index":211,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["software",{"_index":608,"title":{},"body":{"license.html":{}}}],["source",{"_index":15,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["space",{"_index":348,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["span",{"_index":95,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{}}}],["span.directive",{"_index":35,"title":{},"body":{"modules/FoldableModule.html":{}}}],["span.directive.ts",{"_index":47,"title":{},"body":{"directives/IfSpanDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["span.directive.ts:64",{"_index":89,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["span.directive.ts:73",{"_index":98,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["span.directive.ts:81",{"_index":93,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["span.directive.ts:85",{"_index":84,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["span.directive.ts:99",{"_index":100,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["spancondition",{"_index":55,"title":{},"body":{"directives/IfSpanDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["spancondition.horizontal",{"_index":153,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["spancondition.multi",{"_index":150,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["spancondition.vertical",{"_index":156,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["spanning",{"_index":51,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["spanning.ts",{"_index":671,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["specified",{"_index":54,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["specify",{"_index":395,"title":{},"body":{"directives/WindowDirective.html":{}}}],["split",{"_index":37,"title":{},"body":{"modules/FoldableModule.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["splitlayout",{"_index":410,"title":{},"body":{"directives/WindowDirective.html":{},"changelog.html":{}}}],["splitlayoutdirective",{"_index":9,"title":{"directives/SplitLayoutDirective.html":{}},"body":{"modules/FoldableModule.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["splitlayoutmode",{"_index":274,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["splitlayoutmode.absolute",{"_index":330,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/variables.html":{}}}],["splitlayoutmode.flex",{"_index":328,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/variables.html":{}}}],["splitlayoutmode.grid",{"_index":329,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/variables.html":{}}}],["splitlayoutmode.isvalid(mode",{"_index":386,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["start",{"_index":576,"title":{},"body":{"index.html":{}}}],["started",{"_index":439,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["startwith",{"_index":207,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["startwith(1",{"_index":234,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["steps",{"_index":569,"title":{},"body":{"index.html":{}}}],["strict",{"_index":470,"title":{},"body":{"changelog.html":{}}}],["string",{"_index":301,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/variables.html":{}}}],["style",{"_index":379,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["subject",{"_index":627,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":620,"title":{},"body":{"license.html":{}}}],["subscribe",{"_index":145,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["subscribe((context",{"_index":555,"title":{},"body":{"index.html":{}}}],["subscription",{"_index":111,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["substantial",{"_index":633,"title":{},"body":{"license.html":{}}}],["such",{"_index":521,"title":{},"body":{"index.html":{}}}],["suit",{"_index":275,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["support",{"_index":491,"title":{},"body":{"changelog.html":{},"modules.html":{}}}],["supported",{"_index":248,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["sure",{"_index":419,"title":{},"body":{"directives/WindowDirective.html":{},"index.html":{}}}],["surface",{"_index":522,"title":{},"body":{"index.html":{}}}],["svg",{"_index":661,"title":{},"body":{"modules.html":{}}}],["swap",{"_index":435,"title":{},"body":{"directives/WindowDirective.html":{}}}],["switch",{"_index":148,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"miscellaneous/variables.html":{}}}],["takeuntil",{"_index":208,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["takeuntil(this.destroyed",{"_index":236,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["target",{"_index":413,"title":{},"body":{"directives/WindowDirective.html":{}}}],["template",{"_index":49,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["templateref",{"_index":82,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["test",{"_index":500,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["text",{"_index":63,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["thentemplateref",{"_index":128,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["thenviewref",{"_index":130,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.condition",{"_index":135,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.currentcontext",{"_index":226,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.currentcontext.ismultiscreen",{"_index":242,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.currentcontext.screenspanning",{"_index":233,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.currentcontext.windowsegments",{"_index":241,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.destroyed$.complete",{"_index":240,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.destroyed$.next",{"_index":239,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.direction",{"_index":383,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["this.elsetemplateref",{"_index":141,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.elseviewref",{"_index":164,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.getscreencontext",{"_index":227,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.getscreenspanning",{"_index":232,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.getwindowsegments",{"_index":244,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.layoutstyle",{"_index":380,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["this.matchcondition",{"_index":162,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.mode",{"_index":381,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["this.order",{"_index":382,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["this.parseoptions(options",{"_index":376,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["this.screencontext",{"_index":143,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["this.screencontext$.subscribe",{"_index":237,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.screencontext.ismultiscreen",{"_index":152,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["this.screencontext.screenspanning",{"_index":154,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["this.screencontextsubscription",{"_index":142,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["this.screencontextsubscription.unsubscribe",{"_index":146,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["this.segment",{"_index":429,"title":{},"body":{"directives/WindowDirective.html":{}}}],["this.splitlayout.layoutmode",{"_index":432,"title":{},"body":{"directives/WindowDirective.html":{}}}],["this.splitlayout.readingdirection",{"_index":434,"title":{},"body":{"directives/WindowDirective.html":{}}}],["this.splitlayout.windoworder",{"_index":433,"title":{},"body":{"directives/WindowDirective.html":{}}}],["this.thentemplateref",{"_index":138,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.thenviewref",{"_index":139,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.updatestyle",{"_index":377,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["this.updateview",{"_index":136,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.viewcontainer.clear",{"_index":163,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.viewcontainer.createembeddedview",{"_index":165,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["throw",{"_index":430,"title":{},"body":{"directives/WindowDirective.html":{}}}],["top",{"_index":370,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["tort",{"_index":656,"title":{},"body":{"license.html":{}}}],["true",{"_index":99,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["two",{"_index":398,"title":{},"body":{"directives/WindowDirective.html":{}}}],["type",{"_index":87,"title":{},"body":{"directives/IfSpanDirective.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":667,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":426,"title":{},"body":{"directives/WindowDirective.html":{}}}],["typescript",{"_index":469,"title":{},"body":{"changelog.html":{}}}],["undefined",{"_index":302,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["up",{"_index":397,"title":{},"body":{"directives/WindowDirective.html":{}}}],["update",{"_index":251,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["updates",{"_index":174,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"index.html":{}}}],["updatestyle",{"_index":388,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["updateview",{"_index":160,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["usage",{"_index":544,"title":{},"body":{"index.html":{}}}],["use",{"_index":116,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"index.html":{},"license.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":268,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/variables.html":{}}}],["using",{"_index":286,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"changelog.html":{},"index.html":{}}}],["utilities",{"_index":20,"title":{},"body":{"modules/FoldableModule.html":{}}}],["valid",{"_index":325,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["value",{"_index":324,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":122,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"miscellaneous/variables.html":{}}}],["variables",{"_index":674,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":475,"title":{},"body":{"changelog.html":{}}}],["versions",{"_index":535,"title":{},"body":{"index.html":{}}}],["vertical",{"_index":118,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["viewcontainer",{"_index":80,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["viewcontainerref",{"_index":81,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["viewport",{"_index":679,"title":{},"body":{"miscellaneous/variables.html":{}}}],["visible",{"_index":64,"title":{},"body":{"directives/IfSpanDirective.html":{},"index.html":{}}}],["visualviewport",{"_index":253,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["void",{"_index":103,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["vs",{"_index":331,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/typealiases.html":{}}}],["warranties",{"_index":640,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":635,"title":{},"body":{"license.html":{}}}],["web",{"_index":591,"title":{},"body":{"index.html":{}}}],["welcome",{"_index":560,"title":{},"body":{"index.html":{}}}],["whether",{"_index":653,"title":{},"body":{"license.html":{}}}],["width",{"_index":422,"title":{},"body":{"directives/WindowDirective.html":{}}}],["window",{"_index":191,"title":{"interfaces/Window.html":{}},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["window.directive",{"_index":36,"title":{},"body":{"modules/FoldableModule.html":{}}}],["window.innerheight",{"_index":260,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["window.innerwidth",{"_index":259,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["window.pagexoffset",{"_index":257,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["window.pageyoffset",{"_index":258,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["window.visualviewport",{"_index":255,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["windowdirective",{"_index":10,"title":{"directives/WindowDirective.html":{}},"body":{"modules/FoldableModule.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"overview.html":{}}}],["windoworder",{"_index":290,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["windoworder.isvalid(order",{"_index":387,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["windoworder.normal",{"_index":333,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/variables.html":{}}}],["windoworder.reverse",{"_index":334,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/variables.html":{}}}],["windowsegments",{"_index":178,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["within",{"_index":401,"title":{},"body":{"directives/WindowDirective.html":{}}}],["without",{"_index":612,"title":{},"body":{"license.html":{}}}],["work",{"_index":511,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["working",{"_index":421,"title":{},"body":{"directives/WindowDirective.html":{}}}],["yohan",{"_index":598,"title":{},"body":{"license.html":{}}}],["you're",{"_index":559,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":11,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/FoldableModule.html":{"url":"modules/FoldableModule.html","title":"module - FoldableModule","body":"\n                   \n\n\n\n\n    Modules\n    FoldableModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_FoldableModule\n\n\n\ncluster_FoldableModule_declarations\n\n\n\ncluster_FoldableModule_exports\n\n\n\n\nIfSpanDirective\n\nIfSpanDirective\n\n\n\nFoldableModule\n\nFoldableModule\n\nFoldableModule -->\n\nIfSpanDirective->FoldableModule\n\n\n\n\n\nSplitLayoutDirective\n\nSplitLayoutDirective\n\nFoldableModule -->\n\nSplitLayoutDirective->FoldableModule\n\n\n\n\n\nWindowDirective\n\nWindowDirective\n\nFoldableModule -->\n\nWindowDirective->FoldableModule\n\n\n\n\n\nIfSpanDirective \n\nIfSpanDirective \n\nIfSpanDirective  -->\n\nFoldableModule->IfSpanDirective \n\n\n\n\n\nSplitLayoutDirective \n\nSplitLayoutDirective \n\nSplitLayoutDirective  -->\n\nFoldableModule->SplitLayoutDirective \n\n\n\n\n\nWindowDirective \n\nWindowDirective \n\nWindowDirective  -->\n\nFoldableModule->WindowDirective \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/lib/src/core/foldable.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            This module contains utilities to help you build your app layout for multi\nscreen devices.\nSee SplitLayoutDirective,\nWindowDirective,\nIfSpanDirective,\nScreenContext\n\n        \n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            IfSpanDirective\n                        \n                        \n                            SplitLayoutDirective\n                        \n                        \n                            WindowDirective\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            IfSpanDirective\n                        \n                        \n                            SplitLayoutDirective\n                        \n                        \n                            WindowDirective\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { IfSpanDirective } from './if-span.directive';\nimport { WindowDirective } from './window.directive';\nimport { SplitLayoutDirective } from './split-layout.directive';\n\n/**\n * This module contains utilities to help you build your app layout for multi\n * screen devices.\n *\n * See {@link SplitLayoutDirective},\n * {@link WindowDirective},\n * {@link IfSpanDirective},\n * {@link ScreenContext}\n */\n@NgModule({\n  declarations: [IfSpanDirective, WindowDirective, SplitLayoutDirective],\n  exports: [IfSpanDirective, WindowDirective, SplitLayoutDirective],\n})\nexport class FoldableModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/IfSpanDirective.html":{"url":"directives/IfSpanDirective.html","title":"directive - IfSpanDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  IfSpanDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/lib/src/core/if-span.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                Shows template only if the current screen spanning mode matches\nspecified SpanCondition.\nBehaves like ngIf, except that it accepts a SpanCondition instead of\na boolean expression.\nThis text will only be visible on multi screen devices.\nThis text will only be visible on single screen devices.\nThis text will only be visible on multi screen devices.\n\n            \n\n            \n                Implements\n            \n            \n                            OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [fdIfSpan]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnDestroy\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                fdIfSpan\n                            \n                            \n                                fdIfSpanElse\n                            \n                            \n                                fdIfSpanThen\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    fdIfSpan\n                                \n                                \n                                    fdIfSpanThen\n                                \n                                \n                                    fdIfSpanElse\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(screenContext: ScreenContext, viewContainer: ViewContainerRef, templateRef: TemplateRef)\n                    \n                \n                        \n                            \n                                Defined in projects/lib/src/core/if-span.directive.ts:85\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        screenContext\n                                                  \n                                                        \n                                                                        ScreenContext\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        viewContainer\n                                                  \n                                                        \n                                                                        ViewContainerRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        templateRef\n                                                  \n                                                        \n                                                                    TemplateRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        fdIfSpan\n                    \n                \n                        \n                            \n                                    Defined in projects/lib/src/core/if-span.directive.ts:64\n                            \n                        \n                \n                    \n                        The spanning mode condition that defines if the template should be shown.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        fdIfSpanElse\n                    \n                \n                        \n                            \n                                    Defined in projects/lib/src/core/if-span.directive.ts:81\n                            \n                        \n                \n                    \n                        A template to show if the span condition evaluates to false.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        fdIfSpanThen\n                    \n                \n                        \n                            \n                                    Defined in projects/lib/src/core/if-span.directive.ts:73\n                            \n                        \n                \n                    \n                        A template to show if the span condition evaluates to true.\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in projects/lib/src/core/if-span.directive.ts:99\n                \n            \n\n\n            \n                \n                    ignore\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        fdIfSpan\n                    \n                \n\n\n                \n                    \n                        setfdIfSpan(condition: SpanCondition)\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/if-span.directive.ts:64\n                                \n                            \n                    \n                        \n                                The spanning mode condition that defines if the template should be shown.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                        Description\n                                                \n                                            \n                                            \n                                                    \n                                                            condition\n                                                    \n                                                            \n                                                                            SpanCondition\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                            \n                                                                    The spanning mode condition for showing the template.\n\n                                                            \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        fdIfSpanThen\n                    \n                \n\n\n                \n                    \n                        setfdIfSpanThen(templateRef: TemplateRef | null)\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/if-span.directive.ts:73\n                                \n                            \n                    \n                        \n                                A template to show if the span condition evaluates to true.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            templateRef\n                                                    \n                                                            \n                                                                        TemplateRef | null\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        fdIfSpanElse\n                    \n                \n\n\n                \n                    \n                        setfdIfSpanElse(templateRef: TemplateRef | null)\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/if-span.directive.ts:81\n                                \n                            \n                    \n                        \n                                A template to show if the span condition evaluates to false.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            templateRef\n                                                    \n                                                            \n                                                                        TemplateRef | null\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n    \n\n\n    \n        import {\n  Directive,\n  EmbeddedViewRef,\n  Input,\n  OnDestroy,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { ScreenContext } from './screen-context';\nimport { ScreenSpanning } from './screen-spanning';\n\n/** Spanning mode conditions for use with {@link IfSpanDirective}. */\nexport type SpanCondition =\n  | 'fold-vertical'\n  | 'fold-horizontal'\n  | 'none'\n  | 'multi';\n/**\n * Enumeration of spanning mode conditions values for use with\n * {@link IfSpanDirective}.\n */\nexport const SpanCondition = {\n  /** Screen spanning mode is single fold vertical. */\n  Vertical: 'fold-vertical' as SpanCondition,\n  /** Screen spanning mode is single fold horizontal. */\n  Horizontal: 'fold-horizontal' as SpanCondition,\n  /** No screen spanning (single screen mode). */\n  None: 'none' as SpanCondition,\n  /** Any screen spanning mode is active (multi screen mode). */\n  Multi: 'multi' as SpanCondition,\n};\n\n/**\n * Shows template only if the current screen spanning mode matches\n * specified {@link SpanCondition}.\n *\n * Behaves like `ngIf`, except that it accepts a {@link SpanCondition} instead of\n * a boolean expression.\n *\n * @example\n * This text will only be visible on multi screen devices.\n * @example\n * This text will only be visible on single screen devices.\n * This text will only be visible on multi screen devices.\n */\n@Directive({\n  selector: '[fdIfSpan]',\n})\nexport class IfSpanDirective implements OnDestroy {\n  private screenContextSubscription: Subscription | null = null;\n  private condition: SpanCondition | null = null;\n  private thenTemplateRef: TemplateRef | null = null;\n  private elseTemplateRef: TemplateRef | null = null;\n  private thenViewRef: EmbeddedViewRef | null = null;\n  private elseViewRef: EmbeddedViewRef | null = null;\n\n  /**\n   * The spanning mode condition that defines if the template should be shown.\n   *\n   * @param condition The spanning mode condition for showing the template.\n   */\n  @Input()\n  set fdIfSpan(condition: SpanCondition) {\n    if (condition !== this.condition) {\n      this.condition = condition;\n      this.updateView();\n    }\n  }\n\n  /** A template to show if the span condition evaluates to true. */\n  @Input()\n  set fdIfSpanThen(templateRef: TemplateRef | null) {\n    this.thenTemplateRef = templateRef;\n    this.thenViewRef = null;\n    this.updateView();\n  }\n\n  /** A template to show if the span condition evaluates to false. */\n  @Input()\n  set fdIfSpanElse(templateRef: TemplateRef | null) {\n    this.elseTemplateRef = templateRef;\n    this.thenViewRef = null;\n    this.updateView();\n  }\n\n  constructor(\n    private screenContext: ScreenContext,\n    private viewContainer: ViewContainerRef,\n    templateRef: TemplateRef\n  ) {\n    this.thenTemplateRef = templateRef;\n    this.screenContextSubscription = this.screenContext\n      .asObservable()\n      .subscribe(() => this.updateView());\n  }\n\n  /** ignore */\n  ngOnDestroy() {\n    if (this.screenContextSubscription !== null) {\n      this.screenContextSubscription.unsubscribe();\n    }\n  }\n\n  private matchCondition(): boolean {\n    switch (this.condition) {\n      case SpanCondition.Multi:\n        return this.screenContext.isMultiScreen;\n      case SpanCondition.Horizontal:\n        return this.screenContext.screenSpanning === ScreenSpanning.Horizontal;\n      case SpanCondition.Vertical:\n        return this.screenContext.screenSpanning === ScreenSpanning.Vertical;\n      default:\n        return this.screenContext.screenSpanning === ScreenSpanning.None;\n    }\n  }\n\n  private updateView() {\n    const match = this.matchCondition();\n\n    if (match) {\n      if (!this.thenViewRef) {\n        this.viewContainer.clear();\n        this.elseViewRef = null;\n        if (this.thenTemplateRef) {\n          this.thenViewRef = this.viewContainer.createEmbeddedView(\n            this.thenTemplateRef\n          );\n        }\n      }\n    } else {\n      if (!this.elseViewRef) {\n        this.viewContainer.clear();\n        this.thenViewRef = null;\n        if (this.elseTemplateRef) {\n          this.elseViewRef = this.viewContainer.createEmbeddedView(\n            this.elseTemplateRef\n          );\n        }\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ScreenContext.html":{"url":"injectables/ScreenContext.html","title":"injectable - ScreenContext","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ScreenContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/lib/src/core/screen-context.ts\n        \n\n\n            \n                Description\n            \n            \n                This service allows to query and receive updates about current device's\nscreen context.\nSee ScreenContextData\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                asObject\n                            \n                            \n                                asObservable\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    windowSegments\n                                \n                                \n                                    screenSpanning\n                                \n                                \n                                    isMultiScreen\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in projects/lib/src/core/screen-context.ts:37\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        asObject\n                        \n                    \n                \n            \n            \n                \nasObject()\n                \n            \n\n\n            \n                \n                    Defined in projects/lib/src/core/screen-context.ts:96\n                \n            \n\n\n            \n                \n                    Gets the current screen context.\n\n\n                    \n                        Returns :         ScreenContextData\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        asObservable\n                        \n                    \n                \n            \n            \n                \nasObservable()\n                \n            \n\n\n            \n                \n                    Defined in projects/lib/src/core/screen-context.ts:89\n                \n            \n\n\n            \n                \n                    Gets an observable emitting when the screen context changes.\n\n\n                    \n                        Returns :         Observable\n\n                    \n                \n            \n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        windowSegments\n                    \n                \n\n                \n                    \n                        getwindowSegments()\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/screen-context.ts:68\n                                \n                            \n                    \n                        \n                                The list of available window segments.\n\n\n                                \n                                    Returns :     DOMRect[]\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        screenSpanning\n                    \n                \n\n                \n                    \n                        getscreenSpanning()\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/screen-context.ts:75\n                                \n                            \n                    \n                        \n                                The current screen spanning mode.\n\n\n                                \n                                    Returns :         ScreenSpanning\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        isMultiScreen\n                    \n                \n\n                \n                    \n                        getisMultiScreen()\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/screen-context.ts:82\n                                \n                            \n                    \n                        \n                                True is current device have multiple screens available.\n\n\n                                \n                                    Returns :         boolean\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Injectable, OnDestroy } from '@angular/core';\nimport { fromEvent, merge, Observable, ReplaySubject } from 'rxjs';\nimport { map, filter, shareReplay, startWith, takeUntil } from 'rxjs/operators';\nimport { singleFoldHorizontal, singleFoldVertical } from './media-queries';\nimport { ScreenSpanning } from './screen-spanning';\n\ndeclare global {\n  interface Window {\n    getWindowSegments: () => DOMRect[];\n  }\n}\n\n/**\n * Holds information about the device screen context.\n */\nexport interface ScreenContextData {\n  /** The list of available window segments. */\n  readonly windowSegments: DOMRect[];\n  /** The current screen spanning mode. */\n  readonly screenSpanning: ScreenSpanning;\n  /** True is current device have multiple screens available. */\n  readonly isMultiScreen: boolean;\n}\n\n/**\n * This service allows to query and receive updates about current device's\n * screen context.\n *\n * See {@link ScreenContextData}\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ScreenContext implements ScreenContextData, OnDestroy {\n  private currentContext: ScreenContextData;\n  private screenContext$: Observable;\n  private destroyed$: ReplaySubject = new ReplaySubject(1);\n\n  constructor() {\n    this.currentContext = this.getScreenContext();\n    this.screenContext$ = merge(\n      fromEvent(matchMedia(singleFoldHorizontal), 'change'),\n      fromEvent(matchMedia(singleFoldVertical), 'change')\n    ).pipe(\n      filter(\n        () => this.getScreenSpanning() !== this.currentContext.screenSpanning\n      ),\n      startWith(1),\n      map(() => {\n        this.currentContext = this.getScreenContext();\n        return this.currentContext;\n      }),\n      shareReplay(1),\n      takeUntil(this.destroyed$)\n    );\n    this.screenContext$.subscribe();\n  }\n\n  /** @ignored */\n  ngOnDestroy() {\n    this.destroyed$.next();\n    this.destroyed$.complete();\n  }\n\n  /**\n   * The list of available window segments.\n   */\n  get windowSegments(): DOMRect[] {\n    return this.currentContext.windowSegments;\n  }\n\n  /**\n   * The current screen spanning mode.\n   */\n  get screenSpanning(): ScreenSpanning {\n    return this.currentContext.screenSpanning;\n  }\n\n  /**\n   * True is current device have multiple screens available.\n   */\n  get isMultiScreen(): boolean {\n    return this.currentContext.isMultiScreen;\n  }\n\n  /**\n   * Gets an observable emitting when the screen context changes.\n   */\n  asObservable(): Observable {\n    return this.screenContext$;\n  }\n\n  /**\n   * Gets the current screen context.\n   */\n  asObject(): ScreenContextData {\n    return this.currentContext;\n  }\n\n  private getScreenContext(): ScreenContextData {\n    const windowSegments = this.getWindowSegments();\n    const screenSpanning = this.getScreenSpanning();\n    return {\n      windowSegments,\n      screenSpanning,\n      isMultiScreen: screenSpanning !== ScreenSpanning.None,\n    };\n  }\n\n  private getScreenSpanning(): ScreenSpanning {\n    if (matchMedia(singleFoldHorizontal).matches) {\n      return ScreenSpanning.Horizontal;\n    } else if (matchMedia(singleFoldVertical).matches) {\n      return ScreenSpanning.Vertical;\n    }\n    return ScreenSpanning.None;\n  }\n\n  private getWindowSegments(): DOMRect[] {\n    if ('getWindowSegments' in window) {\n      console.warn('getWindowSegments() is not supported anymore, please update your browser to use the new visualViewport API');\n    }\n    if ('visualViewport' in window) {\n      return (window.visualViewport as any).segments;\n    }\n    return [\n      new DOMRect(\n        window.pageXOffset,\n        window.pageYOffset,\n        window.innerWidth,\n        window.innerHeight\n      ),\n    ];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ScreenContextData.html":{"url":"interfaces/ScreenContextData.html","title":"interface - ScreenContextData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ScreenContextData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/lib/src/core/screen-context.ts\n        \n\n\n            \n                Description\n            \n            \n                Holds information about the device screen context.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            isMultiScreen\n                                        \n                                \n                                \n                                        \n                                            screenSpanning\n                                        \n                                \n                                \n                                        \n                                            windowSegments\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isMultiScreen\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isMultiScreen:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    True is current device have multiple screens available.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        screenSpanning\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        screenSpanning:         ScreenSpanning\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ScreenSpanning\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The current screen spanning mode.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        windowSegments\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        windowSegments:     DOMRect[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     DOMRect[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The list of available window segments.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, OnDestroy } from '@angular/core';\nimport { fromEvent, merge, Observable, ReplaySubject } from 'rxjs';\nimport { map, filter, shareReplay, startWith, takeUntil } from 'rxjs/operators';\nimport { singleFoldHorizontal, singleFoldVertical } from './media-queries';\nimport { ScreenSpanning } from './screen-spanning';\n\ndeclare global {\n  interface Window {\n    getWindowSegments: () => DOMRect[];\n  }\n}\n\n/**\n * Holds information about the device screen context.\n */\nexport interface ScreenContextData {\n  /** The list of available window segments. */\n  readonly windowSegments: DOMRect[];\n  /** The current screen spanning mode. */\n  readonly screenSpanning: ScreenSpanning;\n  /** True is current device have multiple screens available. */\n  readonly isMultiScreen: boolean;\n}\n\n/**\n * This service allows to query and receive updates about current device's\n * screen context.\n *\n * See {@link ScreenContextData}\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ScreenContext implements ScreenContextData, OnDestroy {\n  private currentContext: ScreenContextData;\n  private screenContext$: Observable;\n  private destroyed$: ReplaySubject = new ReplaySubject(1);\n\n  constructor() {\n    this.currentContext = this.getScreenContext();\n    this.screenContext$ = merge(\n      fromEvent(matchMedia(singleFoldHorizontal), 'change'),\n      fromEvent(matchMedia(singleFoldVertical), 'change')\n    ).pipe(\n      filter(\n        () => this.getScreenSpanning() !== this.currentContext.screenSpanning\n      ),\n      startWith(1),\n      map(() => {\n        this.currentContext = this.getScreenContext();\n        return this.currentContext;\n      }),\n      shareReplay(1),\n      takeUntil(this.destroyed$)\n    );\n    this.screenContext$.subscribe();\n  }\n\n  /** @ignored */\n  ngOnDestroy() {\n    this.destroyed$.next();\n    this.destroyed$.complete();\n  }\n\n  /**\n   * The list of available window segments.\n   */\n  get windowSegments(): DOMRect[] {\n    return this.currentContext.windowSegments;\n  }\n\n  /**\n   * The current screen spanning mode.\n   */\n  get screenSpanning(): ScreenSpanning {\n    return this.currentContext.screenSpanning;\n  }\n\n  /**\n   * True is current device have multiple screens available.\n   */\n  get isMultiScreen(): boolean {\n    return this.currentContext.isMultiScreen;\n  }\n\n  /**\n   * Gets an observable emitting when the screen context changes.\n   */\n  asObservable(): Observable {\n    return this.screenContext$;\n  }\n\n  /**\n   * Gets the current screen context.\n   */\n  asObject(): ScreenContextData {\n    return this.currentContext;\n  }\n\n  private getScreenContext(): ScreenContextData {\n    const windowSegments = this.getWindowSegments();\n    const screenSpanning = this.getScreenSpanning();\n    return {\n      windowSegments,\n      screenSpanning,\n      isMultiScreen: screenSpanning !== ScreenSpanning.None,\n    };\n  }\n\n  private getScreenSpanning(): ScreenSpanning {\n    if (matchMedia(singleFoldHorizontal).matches) {\n      return ScreenSpanning.Horizontal;\n    } else if (matchMedia(singleFoldVertical).matches) {\n      return ScreenSpanning.Vertical;\n    }\n    return ScreenSpanning.None;\n  }\n\n  private getWindowSegments(): DOMRect[] {\n    if ('getWindowSegments' in window) {\n      console.warn('getWindowSegments() is not supported anymore, please update your browser to use the new visualViewport API');\n    }\n    if ('visualViewport' in window) {\n      return (window.visualViewport as any).segments;\n    }\n    return [\n      new DOMRect(\n        window.pageXOffset,\n        window.pageYOffset,\n        window.innerWidth,\n        window.innerHeight\n      ),\n    ];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/SplitLayoutDirective.html":{"url":"directives/SplitLayoutDirective.html","title":"directive - SplitLayoutDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  SplitLayoutDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/lib/src/core/split-layout.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines a parent layout container for creating a split layout on multi\nscreen devices.\nWhen used on a single screen device, no layout change (CSS) is added.\nYou can choose between different SplitLayoutMode to suit your\ndesign.\nThis directive should be used along with WindowDirective.\n\n             Will be displayed on first screen\n             Will be displayed on second screen (if available)\n\n\nIn addition, you can also choose keep the same window segments order or\nreverse it when the spanning mode change from vertical to horizontal using\na second optional parameter on the directive:\n\n             \n               Will be displayed on first screen in vertical spanning mode\n               and on the second screen in horizontal spanning mode.\n             \n             \n               Will be displayed on second screen in vertical spanning mode\n               and on the first screen in horizontal spanning mode.\n             \n\n\n            \n\n            \n                Implements\n            \n            \n                            OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [fdSplitLayout]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                fdSplitLayout\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    fdSplitLayout\n                                \n                                \n                                    layoutMode\n                                \n                                \n                                    windowOrder\n                                \n                                \n                                    readingDirection\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(element: ElementRef, screenContext: ScreenContext)\n                    \n                \n                        \n                            \n                                Defined in projects/lib/src/core/split-layout.directive.ts:205\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        element\n                                                  \n                                                        \n                                                                        ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        screenContext\n                                                  \n                                                        \n                                                                        ScreenContext\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        fdSplitLayout\n                    \n                \n                        \n                            \n                                    Defined in projects/lib/src/core/split-layout.directive.ts:196\n                            \n                        \n                \n                    \n                        Sets the current split layout options to use when multi screen is\ndetected.\n\n                    \n                \n            \n        \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        fdSplitLayout\n                    \n                \n\n\n                \n                    \n                        setfdSplitLayout(options: string | undefined)\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/split-layout.directive.ts:196\n                                \n                            \n                    \n                        \n                                Sets the current split layout options to use when multi screen is\ndetected.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                        Description\n                                                \n                                            \n                                            \n                                                    \n                                                            options\n                                                    \n                                                            \n                                                                        string | undefined\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                            \n                                                                    The split layout options to use.\nFormat: [mode] [order]\n\nThe SplitLayoutMode to use (default is href=\"SplitLayoutMode\">).\nThe WindowOrder to use (default is href=\"SplitLayoutMode\">).\n\n\n                                                            \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        layoutMode\n                    \n                \n\n                \n                    \n                        getlayoutMode()\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/split-layout.directive.ts:222\n                                \n                            \n                    \n                        \n                                The current split layout mode to use when multi screen is detected.\n\n\n                                \n                                \n                                \n                                    Returns :         SplitLayoutMode\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        windowOrder\n                    \n                \n\n                \n                    \n                        getwindowOrder()\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/split-layout.directive.ts:231\n                                \n                            \n                    \n                        \n                                The window segments order to use when in horizontal spanning mode.\n\n\n                                \n                                \n                                \n                                    Returns :         WindowOrder\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        readingDirection\n                    \n                \n\n                \n                    \n                        getreadingDirection()\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/split-layout.directive.ts:240\n                                \n                            \n                    \n                        \n                                The text reading direction for the host element.\n\n\n                                \n                                \n                                \n                                    Returns :         ReadingDirection\n\n                                \n                        \n                    \n\n            \n        \n\n\n    \n\n\n    \n        import {\n  Directive,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnDestroy,\n} from '@angular/core';\nimport { SafeStyle } from '@angular/platform-browser';\nimport { Subscription } from 'rxjs';\nimport { ScreenContext } from './screen-context';\nimport { ScreenSpanning } from './screen-spanning';\n\n/**\n * Defines how the split layout container should be rendered when multi screen\n * is detected.\n * See {@link SplitLayoutDirective}\n */\nexport type SplitLayoutMode = 'flex' | 'grid' | 'absolute';\n/**\n * Enumeration of split layout modes values for use with\n * {@link SplitLayoutDirective}.\n */\nexport const SplitLayoutMode = {\n  Flex: 'flex' as SplitLayoutMode,\n  Grid: 'grid' as SplitLayoutMode,\n  Absolute: 'absolute' as SplitLayoutMode,\n\n  /**\n   * Checks if the given string value is a valid {@link SplitLayoutMode}.\n   *\n   * @param value The value to check.\n   * @return true if the value is a valid {@link SplitLayoutMode}.\n   */\n  isValid: (value: string): boolean => {\n    switch (value) {\n      case SplitLayoutMode.Flex:\n      case SplitLayoutMode.Grid:\n      case SplitLayoutMode.Absolute:\n        return true;\n    }\n    return false;\n  },\n};\n\n/**\n * Defines how the split layout container should order the window segments\n * when in horizontal spanning mode vs vertical spanning mode.\n * See {@link SplitLayoutDirective}\n */\nexport type WindowOrder = 'normal' | 'reverse';\n/**\n * Enumeration of window order values for use with\n * {@link SplitLayoutDirective}.\n */\nexport const WindowOrder = {\n  Normal: 'normal' as WindowOrder,\n  Reverse: 'reverse' as WindowOrder,\n\n  /**\n   * Checks if the given string value is a valid {@link WindowOrder}.\n   *\n   * @param value The value to check.\n   * @return true if the value is a valid {@link WindowOrder}.\n   */\n  isValid: (value: string): boolean => {\n    switch (value) {\n      case WindowOrder.Normal:\n      case WindowOrder.Reverse:\n        return true;\n    }\n    return false;\n  },\n};\n\n/**\n * Defines the text reading direction for the host element.\n */\nexport type ReadingDirection = 'ltr' | 'rtl';\n/**\n * Enumeration of the text reading direction values.\n */\nexport const ReadingDirection = {\n  LeftToRight: 'ltr' as ReadingDirection,\n  RightToLeft: 'rtl' as ReadingDirection,\n};\n\n/**\n * Look 'ma, CSS-in-JS with Angular! ಠ_ಠ\n *\n * @ignore\n */\nconst layoutStyles = {\n  [SplitLayoutMode.Flex]: {\n    common: {\n      display: 'flex',\n      justifyContent: 'space-between',\n      height: '100vh',\n    },\n    [ScreenSpanning.Vertical]: {\n      flexDirection: 'row',\n    },\n    [ScreenSpanning.Horizontal]: {\n      flexDirection: 'column',\n    },\n    [WindowOrder.Reverse]: {\n      flexDirection: 'column-reverse',\n    },\n  },\n  [SplitLayoutMode.Grid]: {\n    common: {\n      display: 'grid',\n      height: '100vh',\n    },\n    [ScreenSpanning.Vertical]: {\n      gridTemplateColumns: '1fr 1fr',\n      gridTemplateAreas: '\"segment0 segment1\"',\n      gridAutoFlow: 'row',\n      columnGap: 'calc(env(viewport-segment-left 1 0) - env(viewport-segment-right 0 0))',\n    },\n    [ScreenSpanning.Horizontal]: {\n      gridTemplateRows: '1fr 1fr',\n      gridTemplateAreas: '\"segment0\" \"segment1\"',\n      gridAutoFlow: 'row',\n      rowGap: 'calc(env(viewport-segment-top 0 1) - env(viewport-segment-bottom 0 0))',\n    },\n    [WindowOrder.Reverse]: {\n      gridTemplateRows: '1fr 1fr',\n      gridTemplateAreas: '\"segment1\" \"segment0\"',\n      gridAutoFlow: 'row',\n      rowGap: 'calc(env(viewport-segment-top 0 1) - env(viewport-segment-bottom 0 0))',\n    },\n  },\n  [SplitLayoutMode.Absolute]: {\n    common: {\n      position: 'relative',\n      height: '100vh',\n    },\n    [ScreenSpanning.Vertical]: {},\n    [ScreenSpanning.Horizontal]: {},\n    [WindowOrder.Reverse]: {},\n  },\n};\n\n/**\n * Defines a parent layout container for creating a split layout on multi\n * screen devices.\n *\n * When used on a single screen device, no layout change (CSS) is added.\n * You can choose between different {@link SplitLayoutMode} to suit your\n * design.\n *\n * This directive should be used along with {@link WindowDirective}.\n *\n * @example\n * \n *              Will be displayed on first screen\n *              Will be displayed on second screen (if available)\n * \n *\n * In addition, you can also choose keep the same window segments order or\n * reverse it when the spanning mode change from vertical to horizontal using\n * a second optional parameter on the directive:\n *\n * @example\n * \n *              \n *                Will be displayed on first screen in vertical spanning mode\n *                and on the second screen in horizontal spanning mode.\n *              \n *              \n *                Will be displayed on second screen in vertical spanning mode\n *                and on the first screen in horizontal spanning mode.\n *              \n * \n */\n@Directive({\n  selector: '[fdSplitLayout]',\n})\nexport class SplitLayoutDirective implements OnDestroy {\n  private mode: SplitLayoutMode = SplitLayoutMode.Flex;\n  private order: WindowOrder = WindowOrder.Normal;\n  private layoutStyle: SafeStyle = {};\n  private screenContextSubscription: Subscription | null = null;\n  private direction: ReadingDirection = 'ltr';\n\n  /**\n   * Sets the current split layout options to use when multi screen is\n   * detected.\n   *\n   * @param options The split layout options to use.\n   * Format: `[mode] [order]`\n   * - The {@link SplitLayoutMode} to use (default is {@link SplitLayoutMode.Flex}).\n   * - The {@link WindowOrder} to use (default is {@link WindowOrder.Normal}).\n   */\n  @Input()\n  set fdSplitLayout(options: string | undefined) {\n    this.parseOptions(options || '');\n    this.updateStyle();\n  }\n\n  /** @ignore */\n  @HostBinding('style')\n  get style(): SafeStyle {\n    return this.layoutStyle;\n  }\n\n  constructor(\n    private element: ElementRef,\n    private screenContext: ScreenContext\n  ) {\n    this.updateStyle();\n    this.screenContextSubscription = this.screenContext\n      .asObservable()\n      .subscribe(() => this.updateStyle());\n  }\n\n  /**\n   * The current split layout mode to use when multi screen is detected.\n   *\n   * @return The current split layout mode.\n   */\n  get layoutMode(): SplitLayoutMode {\n    return this.mode;\n  }\n\n  /**\n   * The window segments order to use when in horizontal spanning mode.\n   *\n   * @return The current window order.\n   */\n  get windowOrder(): WindowOrder {\n    return this.order;\n  }\n\n  /**\n   * The text reading direction for the host element.\n   *\n   * @return The text reading direction.\n   */\n  get readingDirection(): ReadingDirection {\n    return this.direction;\n  }\n\n  /** @ignore */\n  ngOnDestroy() {\n    if (this.screenContextSubscription !== null) {\n      this.screenContextSubscription.unsubscribe();\n    }\n  }\n\n  private parseOptions(options: string) {\n    let [mode, order] = options.trim().split(' ');\n    mode = SplitLayoutMode.isValid(mode) ? mode : SplitLayoutMode.Flex;\n    order = WindowOrder.isValid(order) ? order : WindowOrder.Normal;\n    this.mode = mode as SplitLayoutMode;\n    this.order = order as WindowOrder;\n  }\n\n  private updateStyle() {\n    const isMultiScreen = this.screenContext.isMultiScreen;\n    const spanning = this.screenContext.screenSpanning;\n    const reverse =\n      spanning === ScreenSpanning.Horizontal &&\n      this.order === WindowOrder.Reverse;\n\n    this.direction =\n      (getComputedStyle(this.element.nativeElement)\n        ?.direction as ReadingDirection) || ReadingDirection.LeftToRight;\n\n    if (isMultiScreen && spanning !== ScreenSpanning.None) {\n      this.layoutStyle = {\n        ...layoutStyles[this.mode].common,\n        ...layoutStyles[this.mode][reverse ? WindowOrder.Reverse : spanning],\n      };\n    } else {\n      this.layoutStyle = {};\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Window.html":{"url":"interfaces/Window.html","title":"interface - Window","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Window\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/lib/src/core/screen-context.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            getWindowSegments\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        getWindowSegments\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getWindowSegments:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, OnDestroy } from '@angular/core';\nimport { fromEvent, merge, Observable, ReplaySubject } from 'rxjs';\nimport { map, filter, shareReplay, startWith, takeUntil } from 'rxjs/operators';\nimport { singleFoldHorizontal, singleFoldVertical } from './media-queries';\nimport { ScreenSpanning } from './screen-spanning';\n\ndeclare global {\n  interface Window {\n    getWindowSegments: () => DOMRect[];\n  }\n}\n\n/**\n * Holds information about the device screen context.\n */\nexport interface ScreenContextData {\n  /** The list of available window segments. */\n  readonly windowSegments: DOMRect[];\n  /** The current screen spanning mode. */\n  readonly screenSpanning: ScreenSpanning;\n  /** True is current device have multiple screens available. */\n  readonly isMultiScreen: boolean;\n}\n\n/**\n * This service allows to query and receive updates about current device's\n * screen context.\n *\n * See {@link ScreenContextData}\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ScreenContext implements ScreenContextData, OnDestroy {\n  private currentContext: ScreenContextData;\n  private screenContext$: Observable;\n  private destroyed$: ReplaySubject = new ReplaySubject(1);\n\n  constructor() {\n    this.currentContext = this.getScreenContext();\n    this.screenContext$ = merge(\n      fromEvent(matchMedia(singleFoldHorizontal), 'change'),\n      fromEvent(matchMedia(singleFoldVertical), 'change')\n    ).pipe(\n      filter(\n        () => this.getScreenSpanning() !== this.currentContext.screenSpanning\n      ),\n      startWith(1),\n      map(() => {\n        this.currentContext = this.getScreenContext();\n        return this.currentContext;\n      }),\n      shareReplay(1),\n      takeUntil(this.destroyed$)\n    );\n    this.screenContext$.subscribe();\n  }\n\n  /** @ignored */\n  ngOnDestroy() {\n    this.destroyed$.next();\n    this.destroyed$.complete();\n  }\n\n  /**\n   * The list of available window segments.\n   */\n  get windowSegments(): DOMRect[] {\n    return this.currentContext.windowSegments;\n  }\n\n  /**\n   * The current screen spanning mode.\n   */\n  get screenSpanning(): ScreenSpanning {\n    return this.currentContext.screenSpanning;\n  }\n\n  /**\n   * True is current device have multiple screens available.\n   */\n  get isMultiScreen(): boolean {\n    return this.currentContext.isMultiScreen;\n  }\n\n  /**\n   * Gets an observable emitting when the screen context changes.\n   */\n  asObservable(): Observable {\n    return this.screenContext$;\n  }\n\n  /**\n   * Gets the current screen context.\n   */\n  asObject(): ScreenContextData {\n    return this.currentContext;\n  }\n\n  private getScreenContext(): ScreenContextData {\n    const windowSegments = this.getWindowSegments();\n    const screenSpanning = this.getScreenSpanning();\n    return {\n      windowSegments,\n      screenSpanning,\n      isMultiScreen: screenSpanning !== ScreenSpanning.None,\n    };\n  }\n\n  private getScreenSpanning(): ScreenSpanning {\n    if (matchMedia(singleFoldHorizontal).matches) {\n      return ScreenSpanning.Horizontal;\n    } else if (matchMedia(singleFoldVertical).matches) {\n      return ScreenSpanning.Vertical;\n    }\n    return ScreenSpanning.None;\n  }\n\n  private getWindowSegments(): DOMRect[] {\n    if ('getWindowSegments' in window) {\n      console.warn('getWindowSegments() is not supported anymore, please update your browser to use the new visualViewport API');\n    }\n    if ('visualViewport' in window) {\n      return (window.visualViewport as any).segments;\n    }\n    return [\n      new DOMRect(\n        window.pageXOffset,\n        window.pageYOffset,\n        window.innerWidth,\n        window.innerHeight\n      ),\n    ];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/WindowDirective.html":{"url":"directives/WindowDirective.html","title":"directive - WindowDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  WindowDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/lib/src/core/window.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                This directive is used to set specify on which window segment the container\nshould be placed on multi screen devices.\nWhen used on a single screen device, no layout change (CSS) is added.\nOnly devices with up to two screen are currently supported, meaning that the\nwindow segment value must be either 0 or 1.\nThis directive can only be used within a SplitLayoutDirective.\nIf SplitLayoutMode is set to absolute, you can assign multiple\ncontainer element to the same window segment.\nNote that if you have set the read direction to Right-To-Left mode (rtl)\nin CSS, the first segment will be the rightmost one.\nIf the WindowOrder option is set to WindowOrder.Reverse,\nthe window segments order will be reversed in horizontal spanning mode.\n\n             Will be displayed on first screen\n             Will be displayed on second screen (if available)\n\n\n            \n\n            \n                Implements\n            \n            \n                            OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [fdWindow]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                fdWindow\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    fdWindow\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(screenContext: ScreenContext, splitLayout: SplitLayoutDirective)\n                    \n                \n                        \n                            \n                                Defined in projects/lib/src/core/window.directive.ts:121\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        screenContext\n                                                  \n                                                        \n                                                                        ScreenContext\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        splitLayout\n                                                  \n                                                        \n                                                                        SplitLayoutDirective\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        fdWindow\n                    \n                \n                        \n                            \n                                    Defined in projects/lib/src/core/window.directive.ts:115\n                            \n                        \n                \n                    \n                        Sets the target window segment to display this container on when multi\nscreen is detected.\n\n                    \n                \n            \n        \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        fdWindow\n                    \n                \n\n\n                \n                    \n                        setfdWindow(segment: number | string)\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/window.directive.ts:115\n                                \n                            \n                    \n                        \n                                Sets the target window segment to display this container on when multi\nscreen is detected.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                        Description\n                                                \n                                            \n                                            \n                                                    \n                                                            segment\n                                                    \n                                                            \n                                                                        number | string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                            \n                                                                    The target window segment, must be 0 or 1.\n\n                                                            \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n    \n\n\n    \n        import { Directive, Host, HostBinding, Input, OnDestroy } from '@angular/core';\nimport { SafeStyle } from '@angular/platform-browser';\nimport { Subscription } from 'rxjs';\nimport { ScreenContext } from './screen-context';\nimport { ScreenSpanning } from './screen-spanning';\nimport {\n  ReadingDirection,\n  SplitLayoutDirective,\n  SplitLayoutMode,\n  WindowOrder,\n} from './split-layout.directive';\n\n/**\n * Look 'ma, CSS-in-JS with Angular! ಠ_ಠ\n *\n * @ignore\n */\nconst layoutStyles = {\n  [SplitLayoutMode.Flex]: {\n    [ScreenSpanning.Vertical]: [\n      { flex: '0 0 env(viewport-segment-right 0 0)' },\n      { flex: '0 0 calc(100vw - env(viewport-segment-left 1 0))' },\n    ],\n    [ScreenSpanning.Horizontal]: [\n      { flex: '0 0 env(viewport-segment-bottom 0 0)' },\n      { flex: '0 0 calc(100vh - env(viewport-segment-top 0 1))' },\n    ],\n  },\n  [SplitLayoutMode.Grid]: {\n    [ScreenSpanning.Vertical]: [\n      { gridArea: 'segment0' },\n      { gridArea: 'segment1' },\n    ],\n    [ScreenSpanning.Horizontal]: [\n      { gridArea: 'segment0' },\n      { gridArea: 'segment1' },\n    ],\n  },\n  [SplitLayoutMode.Absolute]: {\n    [ScreenSpanning.Vertical]: [\n      {\n        position: 'absolute',\n        left: 0,\n        // Not sure why, but 'right' isn't working\n        width: 'env(viewport-segment-right 0 0)',\n      },\n      {\n        position: 'absolute',\n        left: 'env(viewport-segment-left 1 0)',\n        right: 0,\n      },\n    ],\n    [ScreenSpanning.Horizontal]: [\n      {\n        position: 'absolute',\n        top: 0,\n        width: '100%',\n        maxHeight: 'calc(env(viewport-segment-bottom 0 0))',\n      },\n      {\n        position: 'absolute',\n        top: 'env(viewport-segment-top 0 1)',\n        width: '100%',\n        maxHeight: 'calc(100vh - env(viewport-segment-top 0 1))',\n      },\n    ],\n  },\n};\n\n/**\n * This directive is used to set specify on which window segment the container\n * should be placed on multi screen devices.\n *\n * When used on a single screen device, no layout change (CSS) is added.\n * Only devices with up to two screen are currently supported, meaning that the\n * window segment value must be either 0 or 1.\n *\n * This directive can only be used within a {@link SplitLayoutDirective}.\n * If {@link SplitLayoutMode} is set to `absolute`, you can assign multiple\n * container element to the same window segment.\n *\n * Note that if you have set the read direction to Right-To-Left mode (`rtl`)\n * in CSS, the first segment will be the rightmost one.\n *\n * If the {@link WindowOrder} option is set to {@link WindowOrder.Reverse},\n * the window segments order will be reversed in horizontal spanning mode.\n *\n * @example\n * \n *              Will be displayed on first screen\n *              Will be displayed on second screen (if available)\n * \n */\n@Directive({\n  selector: '[fdWindow]',\n})\nexport class WindowDirective implements OnDestroy {\n  private segment = -1;\n  private layoutStyle: SafeStyle = {};\n  private screenContextSubscription: Subscription | null = null;\n\n  /** @ignore */\n  @HostBinding('style')\n  get style(): SafeStyle {\n    return this.layoutStyle;\n  }\n\n  /**\n   * Sets the target window segment to display this container on when multi\n   * screen is detected.\n   *\n   * @param segment The target window segment, must be 0 or 1.\n   */\n  @Input()\n  set fdWindow(segment: number | string) {\n    segment = typeof segment === 'string' ? parseInt(segment, 10) : segment;\n    if (segment !== this.segment) {\n      this.segment = segment;\n      this.updateStyle();\n    }\n  }\n\n  constructor(\n    private screenContext: ScreenContext,\n    @Host() private splitLayout: SplitLayoutDirective\n  ) {\n    this.screenContextSubscription = this.screenContext\n      .asObservable()\n      .subscribe(() => this.updateStyle());\n  }\n\n  /** @ignore */\n  ngOnDestroy() {\n    if (this.screenContextSubscription !== null) {\n      this.screenContextSubscription.unsubscribe();\n    }\n  }\n\n  private updateStyle() {\n    if (this.segment === -1) {\n      return;\n    }\n\n    const isMultiScreen = this.screenContext.isMultiScreen;\n    const spanning = this.screenContext.screenSpanning;\n\n    if (isMultiScreen && spanning !== ScreenSpanning.None) {\n      if (this.segment  1) {\n        throw new Error('Segment index must be 0 or 1');\n      }\n\n      const mode = this.splitLayout.layoutMode;\n      const order = this.splitLayout.windowOrder;\n      const direction = this.splitLayout.readingDirection;\n      // Swap segments for vertical span and RTL mode or\n      // horizontal span and reverse window order\n      const swap =\n        (spanning === ScreenSpanning.Vertical &&\n          mode !== SplitLayoutMode.Grid &&\n          direction === ReadingDirection.RightToLeft) ||\n        (spanning === ScreenSpanning.Horizontal &&\n          mode !== SplitLayoutMode.Grid &&\n          order === WindowOrder.Reverse);\n\n      const segment = swap ? 1 - this.segment : this.segment;\n      this.layoutStyle = layoutStyles[mode][spanning][segment];\n    } else {\n      this.layoutStyle = {};\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\n1.1.1 (2021-03-19)\nBug Fixes\n\nlayout issues on real devices (8446001)\n\n1.1.0 (2021-03-17)\nBug Fixes\n\ninconsistent layout with rtl and fdIfSpan (1acd46e)\nonly allow valid options for SplitLayoutDirective (3240712)\n\nFeatures\n\nadd option to reverse window order (acb3fff)\n\n1.0.5 (2021-03-16)\nBug Fixes\n\nrefresh on orientation changes and extra repaints (0683aa3)\nscreen context initialization (14da071)\n\n1.0.4 (2021-03-16)\nBug Fixes\n\nissues when using typescript strict mode (b84fc9f)\n\n1.0.3 (2021-03-12)\nBug Fixes\n\nupdate min angular version (d383609)\n\n1.0.2 (2021-03-12)\nBug Fixes\n\nangular min version (4aa85c7)\n\n1.0.1 (2021-03-11)\nBug Fixes\n\ndocs deployment (b1c68ac)\n\n1.0.0 (2021-03-11)\nBug Fixes\n\ndirectives export (536764f)\nfdIfSpan init (7e66b70)\nrevert naming changes (3ee5543)\n\nFeatures\n\nadd RTL support (8bdb155)\nadd ScreenContext first value and fix span check (487885f)\nadd SplitLayout directive (9fadf70)\nadd support for grid and absolute layouts (582e83e)\nadd Window directive (b2a3632)\ndemo test (90ad184)\nfinish demo project (db13ef1)\nimplement fdIfSpan directive (083b648)\nimplement ScreenContext service (466a9d7)\ninitial commit (9ff473a)\ninitial work on service API (962620d)\nupdate to ng 11 (4708aff)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n📖 ngx-foldable\n\n\n\n\n\n\nngx-foldable is a set of components and services to help you build dual-screen experiences for foldable or dual-screen devices, such as the Surface Duo\n\n\n  \n\n\nSee the live demo or read the full documentation.\nHow to test on your browser\nThe dual-screen emulation feature requires latest Microsoft Edge or Google Chrome versions, with experimental flags to enable.\nFollow the instructions here to setup your browser for dual-screen emulation.\nLibrary usage\nCheck out the demo source code to see an example usage of the library.\nAdd the library to your Angular project:\nnpm install ngx-foldableImport the library in your app:\nimport { FoldableModule } from 'ngx-foldable';\n...\n\n@NgModule({\n  ...\n  imports: [\n    FoldableModule\n    ...\n  ],\n  ...\n})\nexport class AppModule { }Use the provided fdSplitLayout, fdWindow and fdIfSpan directives to build your layout:\n\n\n\n  \n  \n    This will be displayed on the first window segment of a multi screen or single screen device.\n    \n    This is only visible on a single screen device.\n    This is only visible on a multi screen device.\n  \n\n  \n  \n    This will be displayed on the second window segment of a multi screen device.\n\n    This is only visible on multi screen device, regardless of the orientation.\n    This is only visible on horizontal fold spanning.\n    This is only visible on vertical fold spanning.\n  \nUsing the ScreenContext service, you can also receive updates when the screen context changes:\nimport { ScreenContext } from 'ngx-foldable';\n...\nexport class AppComponent {\n  constructor(private screenContext: ScreenContext) {\n    this.screenContext\n      .asObservable()\n      .subscribe((context) => {\n        console.log('Screen context changed:', context);\n      });\n  }\n}You can read the full documentation here.\nContributing\nYou're welcome to contribute to this project!\nMake sure you have read the code of conduct before posting an issue or a pull request.\nFollow these steps to run this project locally:\n\nClone the repository on your machine\nRun npm install to install packages\nRun npm start to start the dev server with the demo app\n\nYou can then start making modifications on the library or demo app code.\nRelated work\n\nSurface Duo Photo Gallery: Angular re-implementation of the Surface Duo Photo Gallery sample using this library\nreact-foldable: a similar library built for React\nfoldable-devices/demos: web demos for foldables devices.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nThe MIT License (MIT)\nCopyright (c) 2021 Yohan Lasorsa\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        FoldableModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_FoldableModule\n\n\n\ncluster_FoldableModule_declarations\n\n\n\ncluster_FoldableModule_exports\n\n\n\n\nIfSpanDirective\n\nIfSpanDirective\n\n\n\nFoldableModule\n\nFoldableModule\n\nFoldableModule -->\n\nIfSpanDirective->FoldableModule\n\n\n\n\n\nSplitLayoutDirective\n\nSplitLayoutDirective\n\nFoldableModule -->\n\nSplitLayoutDirective->FoldableModule\n\n\n\n\n\nWindowDirective\n\nWindowDirective\n\nFoldableModule -->\n\nWindowDirective->FoldableModule\n\n\n\n\n\nIfSpanDirective \n\nIfSpanDirective \n\nIfSpanDirective  -->\n\nFoldableModule->IfSpanDirective \n\n\n\n\n\nSplitLayoutDirective \n\nSplitLayoutDirective \n\nSplitLayoutDirective  -->\n\nFoldableModule->SplitLayoutDirective \n\n\n\n\n\nWindowDirective \n\nWindowDirective \n\nWindowDirective  -->\n\nFoldableModule->WindowDirective \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Directives\n                \n            \n        \n        \n            \n                \n                    \n                    1 Injectable\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ReadingDirection   (projects/.../split-layout.directive.ts)\n                        \n                        \n                            ScreenSpanning   (projects/.../screen-spanning.ts)\n                        \n                        \n                            SpanCondition   (projects/.../if-span.directive.ts)\n                        \n                        \n                            SplitLayoutMode   (projects/.../split-layout.directive.ts)\n                        \n                        \n                            WindowOrder   (projects/.../split-layout.directive.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/lib/src/core/split-layout.directive.ts\n    \n    \n        \n            \n                \n                    \n                    ReadingDirection\n                \n            \n            \n                \n                    Defines the text reading direction for the host element.\n\n                \n            \n            \n                \n                        \"ltr\" | \"rtl\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SplitLayoutMode\n                \n            \n            \n                \n                    Defines how the split layout container should be rendered when multi screen\nis detected.\nSee SplitLayoutDirective\n\n                \n            \n            \n                \n                        \"flex\" | \"grid\" | \"absolute\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    WindowOrder\n                \n            \n            \n                \n                    Defines how the split layout container should order the window segments\nwhen in horizontal spanning mode vs vertical spanning mode.\nSee SplitLayoutDirective\n\n                \n            \n            \n                \n                        \"normal\" | \"reverse\"\n\n                \n            \n        \n    \n    projects/lib/src/core/screen-spanning.ts\n    \n    \n        \n            \n                \n                    \n                    ScreenSpanning\n                \n            \n            \n                \n                    Represents the screen spanning mode.\n\n                \n            \n            \n                \n                        \"fold-vertical\" | \"fold-horizontal\" | \"none\"\n\n                \n            \n        \n    \n    projects/lib/src/core/if-span.directive.ts\n    \n    \n        \n            \n                \n                    \n                    SpanCondition\n                \n            \n            \n                \n                    Spanning mode conditions for use with IfSpanDirective.\n\n                \n            \n            \n                \n                        \"fold-vertical\" | \"fold-horizontal\" | \"none\" | \"multi\"\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ReadingDirection   (projects/.../split-layout.directive.ts)\n                        \n                        \n                            ScreenSpanning   (projects/.../screen-spanning.ts)\n                        \n                        \n                            singleFoldHorizontal   (projects/.../media-queries.ts)\n                        \n                        \n                            singleFoldVertical   (projects/.../media-queries.ts)\n                        \n                        \n                            SpanCondition   (projects/.../if-span.directive.ts)\n                        \n                        \n                            SplitLayoutMode   (projects/.../split-layout.directive.ts)\n                        \n                        \n                            WindowOrder   (projects/.../split-layout.directive.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/lib/src/core/split-layout.directive.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ReadingDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  LeftToRight: 'ltr' as ReadingDirection,\n  RightToLeft: 'rtl' as ReadingDirection,\n}\n                    \n                \n\n            \n                \n                    Enumeration of the text reading direction values.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SplitLayoutMode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  Flex: 'flex' as SplitLayoutMode,\n  Grid: 'grid' as SplitLayoutMode,\n  Absolute: 'absolute' as SplitLayoutMode,\n\n  /**\n   * Checks if the given string value is a valid {@link SplitLayoutMode}.\n   *\n   * @param value The value to check.\n   * @return true if the value is a valid {@link SplitLayoutMode}.\n   */\n  isValid: (value: string): boolean => {\n    switch (value) {\n      case SplitLayoutMode.Flex:\n      case SplitLayoutMode.Grid:\n      case SplitLayoutMode.Absolute:\n        return true;\n    }\n    return false;\n  },\n}\n                    \n                \n\n            \n                \n                    Enumeration of split layout modes values for use with\nSplitLayoutDirective.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        WindowOrder\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  Normal: 'normal' as WindowOrder,\n  Reverse: 'reverse' as WindowOrder,\n\n  /**\n   * Checks if the given string value is a valid {@link WindowOrder}.\n   *\n   * @param value The value to check.\n   * @return true if the value is a valid {@link WindowOrder}.\n   */\n  isValid: (value: string): boolean => {\n    switch (value) {\n      case WindowOrder.Normal:\n      case WindowOrder.Reverse:\n        return true;\n    }\n    return false;\n  },\n}\n                    \n                \n\n            \n                \n                    Enumeration of window order values for use with\nSplitLayoutDirective.\n\n                \n            \n\n        \n    \n\n    projects/lib/src/core/screen-spanning.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ScreenSpanning\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  /** Screen spanning mode is single fold vertical. */\n  Vertical: 'fold-vertical' as ScreenSpanning,\n  /** Screen spanning mode is single fold horizontal. */\n  Horizontal: 'fold-horizontal' as ScreenSpanning,\n  /** No screen spanning (single screen mode). */\n  None: 'none' as ScreenSpanning,\n}\n                    \n                \n\n            \n                \n                    Enumeration of screen spanning mode values.\n\n                \n            \n\n        \n    \n\n    projects/lib/src/core/media-queries.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        singleFoldHorizontal\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '(vertical-viewport-segments: 2)'\n                    \n                \n\n            \n                \n                    Media query used to detect single fold horizontal screen mode.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        singleFoldVertical\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '(horizontal-viewport-segments: 2)'\n                    \n                \n\n            \n                \n                    Media query used to detect single fold vertical screen mode.\n\n                \n            \n\n        \n    \n\n    projects/lib/src/core/if-span.directive.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SpanCondition\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  /** Screen spanning mode is single fold vertical. */\n  Vertical: 'fold-vertical' as SpanCondition,\n  /** Screen spanning mode is single fold horizontal. */\n  Horizontal: 'fold-horizontal' as SpanCondition,\n  /** No screen spanning (single screen mode). */\n  None: 'none' as SpanCondition,\n  /** Any screen spanning mode is active (multi screen mode). */\n  Multi: 'multi' as SpanCondition,\n}\n                    \n                \n\n            \n                \n                    Enumeration of spanning mode conditions values for use with\nIfSpanDirective.\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
