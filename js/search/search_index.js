var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/FoldableModule.html",[0,1.631,1,1.146]],["body/modules/FoldableModule.html",[0,2.472,1,2.228,2,1.961,3,3.019,4,2.395,5,2.395,6,2.395,7,1.887,8,0.068,9,1.325,10,2.237,11,3.019,12,2.395,13,1.637,14,0.978,15,0.816,16,0.978,17,3.054,18,0.978,19,3.85,20,3.85,21,2.472,22,2.472,23,3.019,24,1.232,25,1.029,26,0.402,27,1.232,28,1.232,29,0.685,30,3.85,31,3.85,32,1.183,33,3.019,34,0.978,35,3.054,36,3.054,37,1.378,38,2.395,39,1.183,40,0.673,41,0.816,42,0.052,43,0.052]],["title/directives/IfSpanDirective.html",[7,0.967,44,0.813]],["body/directives/IfSpanDirective.html",[7,1.317,8,0.069,14,0.552,15,0.461,16,0.552,18,0.829,25,1.111,26,0.482,27,1.247,29,0.693,32,0.925,34,0.552,39,0.925,40,0.685,41,0.461,42,0.035,43,0.035,44,0.829,45,0.656,46,2.731,47,1.107,48,2.591,49,4.507,50,1.169,51,1.002,52,1.002,53,2.032,54,2.591,55,2.947,56,2.591,57,2.591,58,2.591,59,2.591,60,2.032,61,1.184,62,2.591,63,2.088,64,3.055,65,1.724,66,1.404,67,0.986,68,1.184,69,1.107,70,1.663,71,2.501,72,0.38,73,2.032,74,1.317,75,1.663,76,3.46,77,3.46,78,1.388,79,0.986,80,1.352,81,3.112,82,3.46,83,4.77,84,2.228,85,1.724,86,2.222,87,2.222,88,1.331,89,2.222,90,2.591,91,4.624,92,1.998,93,3.112,94,3.094,95,2.591,96,3.896,97,2.501,98,3.896,99,1.998,100,2.591,101,1.184,102,1.724,103,1.663,104,1.854,105,2.222,106,1.724,107,2.591,108,1.724,109,1.724,110,3.112,111,2.222,112,1.663,113,0.656,114,0.461,115,0.461,116,1.388,117,0.461,118,1.483,119,1.108,120,1.108,121,1.998,122,1.107,123,1.107,124,0.986,125,1.663,126,1.352,127,1.388,128,1.649,129,1.107,130,1.724,131,1.724,132,1.724,133,1.724,134,0.924,135,1.668,136,1.724,137,3.112,138,3.46,139,1.724,140,3.46,141,3.709,142,1.724,143,3.112,144,1.663,145,0.552,146,0.552,147,1.107,148,1.107,149,1.724,150,1.107,151,1.998,152,1.724,153,1.108,154,1.107,155,1.724,156,1.998,157,0.552,158,1.724,159,0.552,160,1.107,161,0.656,162,1.724,163,2.032,164,1.724,165,2.591,166,3.112,167,2.591]],["title/injectables/ScreenContext.html",[29,0.452,168,1.146]],["body/injectables/ScreenContext.html",[8,0.069,14,0.674,15,0.563,16,0.674,18,0.674,26,0.479,28,0.96,29,0.621,32,1.075,34,0.674,39,0.563,40,0.66,41,0.563,42,0.04,43,0.04,50,2.048,51,0.838,52,0.769,61,1.329,67,0.801,68,1.141,72,0.464,73,2.351,74,0.801,78,1.607,79,1.329,84,2.24,101,1.329,104,2.155,113,0.801,114,1.15,115,1.239,117,0.375,124,1.141,128,1.591,145,0.96,146,1.218,153,1.485,157,0.674,159,0.674,161,1.141,168,1.353,169,2.105,170,1.941,171,1.352,172,1.353,173,1.925,174,1.607,175,1.607,176,1.607,177,1.925,178,2.357,179,2.443,180,2.684,181,1.814,182,2.105,183,2.105,184,2.443,185,2.105,186,2.684,187,1.925,188,1.353,189,2.443,190,2.105,191,2.242,192,1.886,193,0.744,194,0.933,195,2.684,196,1.925,197,2.105,198,2.105,199,2.105,200,1.448,201,1.871,202,2.242,203,1.352,204,1.607,205,1.925,206,1.925,207,1.925,208,1.352,209,1.352,210,1.352,211,1.352,212,0.95,213,0.95,214,0.95,215,1.128,216,1.352,217,1.352,218,1.353,219,1.352,220,1.352,221,2.242,222,1.352,223,1.352,224,1.352,225,1.352,226,1.575,227,1.352,228,2.443,229,1.925,230,1.352,231,1.353,232,1.352,233,1.352,234,1.925,235,1.925,236,1.352,237,1.352,238,1.352,239,1.352,240,1.352,241,1.352,242,1.352,243,1.352,244,1.352,245,1.352,246,1.352,247,1.352,248,1.352,249,1.352,250,1.128,251,1.352,252,1.352,253,1.128,254,0.563,255,1.607,256,1.128,257,1.352,258,1.352,259,1.352,260,1.352,261,1.352,262,1.352]],["title/interfaces/ScreenContextData.html",[178,1.361,218,1.146]],["body/interfaces/ScreenContextData.html",[8,0.069,14,0.711,15,0.594,16,0.711,18,0.711,26,0.473,28,0.711,29,0.554,32,1.097,34,0.711,39,0.594,40,0.686,41,0.594,42,0.042,43,0.042,50,2.012,51,0.859,52,0.792,61,1.484,67,0.846,68,1.186,72,0.489,74,0.846,79,0.846,88,1.151,101,1.369,113,0.846,114,1.097,115,1.27,117,0.395,124,1.186,128,1.619,145,0.997,146,0.711,153,1.499,157,0.711,159,0.711,161,1.186,168,1.405,170,1.003,171,1.427,172,1.003,173,1.427,174,1.191,175,1.191,176,1.191,177,1.427,178,2.341,179,1.427,180,2.805,181,1.92,184,2,186,2.503,187,1.427,188,1.003,189,2.31,191,2.31,192,1.92,193,0.757,194,0.961,195,2.805,196,1.427,200,1.562,201,1.928,202,2.31,203,1.427,204,1.67,205,2,206,2,207,2,208,1.427,209,1.427,210,1.427,211,1.427,212,1.003,213,1.003,214,1.003,215,1.191,216,1.427,217,1.427,218,1.405,219,2,220,2,221,2.31,222,1.427,223,1.427,224,1.427,225,1.427,226,1.623,227,1.427,228,2.503,229,2,230,1.427,231,1.405,232,1.427,233,1.427,234,2,235,2,236,1.427,237,1.427,238,1.427,239,1.427,240,1.427,241,1.427,242,1.427,243,1.427,244,1.427,245,1.427,246,1.427,247,1.427,248,1.427,249,1.427,250,1.191,251,1.427,252,1.427,253,1.191,254,0.594,255,1.67,256,1.191,257,1.427,258,1.427,259,1.427,260,1.427,261,1.427,262,1.427,263,1.427,264,1.67]],["title/directives/SplitLayoutDirective.html",[9,0.679,44,0.813]],["body/directives/SplitLayoutDirective.html",[8,0.069,9,0.907,10,0.903,14,0.396,15,0.331,16,0.396,18,0.641,24,1.403,25,0.994,26,0.479,27,0.641,28,0.641,29,0.636,32,0.848,34,0.396,37,1.885,39,1.132,40,0.787,41,0.331,42,0.027,43,0.027,44,1.087,45,0.471,50,1.611,51,0.981,52,1.021,61,0.762,63,1.701,66,0.903,67,0.762,68,0.958,69,0.795,70,1.285,72,0.273,74,0.471,75,1.285,78,1.072,79,0.762,84,1.819,86,1.285,87,1.285,88,1.087,89,1.856,92,2.038,94,1.617,99,1.285,101,1.1,103,1.617,104,1.549,105,0.795,111,1.285,112,1.285,113,0.471,114,0.331,115,0.331,117,0.793,119,1.229,120,1.143,122,1.617,123,1.617,124,1.359,127,1.072,128,1.461,129,0.795,134,1.349,135,0.664,144,1.285,145,0.396,146,0.396,147,0.795,148,0.795,150,1.285,151,2.038,153,1.337,154,0.795,156,0.795,157,0.925,159,0.806,160,2.387,161,0.471,181,0.903,192,0.903,193,0.636,194,0.848,200,0.762,231,1.304,254,0.331,265,2.294,266,0.795,267,2.001,268,1.856,269,2.001,270,1.856,271,1.617,272,1.569,273,2.891,274,2.518,275,2.001,276,2.348,277,2.001,278,2.001,279,2.001,280,2.387,281,1.819,282,2.387,283,2.001,284,2.001,285,1.569,286,1.957,287,1.611,288,1.285,289,2.001,290,2.662,291,2.518,292,2.348,293,2.161,294,1.239,295,2.891,296,1.239,297,2.038,298,2.466,299,2.891,300,2.001,301,1.975,302,2.801,303,2.179,304,2.891,305,2.387,306,2.801,307,1.239,308,1.239,309,1.239,310,1.239,311,1.239,312,1.239,313,1.239,314,2.038,315,1.914,316,1.617,317,0.971,318,1.975,319,0.971,320,0.971,321,1.549,322,1.549,323,1.136,324,0.795,325,1.569,326,1.285,327,2.203,328,1.856,329,1.072,330,1.569,331,1.285,332,1.285,333,0.971,334,1.617,335,2.179,336,1.617,337,0.903,338,0.971,339,0.971,340,0.971,341,0.971,342,0.971,343,0.559,344,0.971,345,0.971,346,2.518,347,1.569,348,1.239,349,1.239,350,1.975,351,2.662,352,2.466,353,3.174,354,3.223,355,2.179,356,2.518,357,2.891,358,2.001,359,1.239,360,3.395,361,2.518,362,1.975,363,1.975,364,2.518,365,1.239,366,2.518,367,0.971,368,0.971,369,2.001,370,2.001,371,1.569,372,0.971,373,1.239,374,0.971,375,1.239,376,1.239,377,1.975,378,0.971,379,0.971,380,1.975,381,2.001,382,2.518,383,2.001,384,1.239,385,1.239,386,1.239,387,1.239,388,0.971,389,1.239,390,1.239,391,1.239,392,1.239]],["title/interfaces/Window.html",[193,0.452,218,1.146]],["body/interfaces/Window.html",[8,0.069,14,0.741,15,0.619,16,0.741,26,0.461,28,0.741,29,0.57,32,1.113,34,0.741,39,0.619,40,0.706,41,0.619,42,0.043,43,0.043,50,1.945,51,0.81,52,0.706,61,1.22,67,0.881,68,1.22,72,0.51,74,0.881,79,0.881,88,0.741,101,1.22,113,0.881,114,1.06,115,1.222,117,0.412,124,1.22,128,1.64,145,1.026,146,0.741,153,1.51,157,0.741,159,0.741,161,1.22,168,1.446,170,1.045,171,1.487,172,1.045,173,1.487,174,1.241,175,1.241,176,1.241,177,1.487,178,2.31,179,1.487,180,2.548,181,1.659,184,2.058,186,2.548,187,1.487,188,1.045,189,2.768,191,2.058,192,1.79,193,0.767,194,0.857,195,2.675,196,1.487,200,1.399,201,1.718,202,2.058,203,1.487,204,1.718,205,2.058,206,2.058,207,2.058,208,1.487,209,1.487,210,1.487,211,1.487,212,1.045,213,1.045,214,1.045,215,1.241,216,1.487,217,1.487,218,1.446,219,1.487,220,1.487,221,2.361,222,1.487,223,1.487,224,1.487,225,1.487,226,1.659,227,1.487,228,2.548,229,2.058,230,1.487,231,1.446,232,1.487,233,1.487,234,2.058,235,2.058,236,1.487,237,1.487,238,1.487,239,1.487,240,1.487,241,1.487,242,1.487,243,1.487,244,1.487,245,1.487,246,1.487,247,1.487,248,1.487,249,1.487,250,1.241,251,1.487,252,1.487,253,1.241,254,0.619,255,1.718,256,1.241,257,1.487,258,1.487,259,1.487,260,1.487,261,1.487,262,1.487,263,1.487,264,1.718,393,3.206]],["title/directives/WindowDirective.html",[10,1.146,44,0.813]],["body/directives/WindowDirective.html",[8,0.069,9,1.014,10,1.109,14,0.515,15,0.43,16,0.515,18,0.787,24,0.787,25,0.961,26,0.473,27,1.069,29,0.675,32,1.014,34,0.515,37,0.726,38,1.262,39,0.893,40,0.354,41,0.43,42,0.033,43,0.033,44,1.214,45,0.612,51,0.869,52,0.869,66,1.109,67,0.936,68,1.135,69,1.033,70,1.578,72,0.541,74,0.612,75,1.578,78,1.317,79,0.936,80,1.262,84,1.599,86,1.578,87,1.578,88,0.955,89,1.578,94,1.916,97,1.578,103,1.916,104,0.862,105,1.033,111,1.578,112,1.578,113,0.612,114,0.43,115,0.43,119,0.955,120,0.515,124,1.549,127,0.862,128,1.444,129,1.033,134,0.862,135,2.235,144,1.578,145,0.515,146,0.515,147,1.033,148,1.033,153,0.787,154,1.033,156,1.033,157,1.069,159,1.069,161,0.612,181,1.109,192,1.109,193,0.799,194,0.797,200,0.936,201,1.317,226,0.726,231,1.109,250,1.317,254,0.43,268,2.534,270,2.436,271,2.31,272,1.928,276,1.599,280,2.145,281,1.79,282,1.578,285,1.928,286,1.623,287,0.726,292,1.599,293,0.862,297,1.578,298,2.31,301,2.34,303,1.916,305,1.033,315,1.79,316,1.578,317,1.262,318,2.34,319,1.262,321,1.79,323,1.711,327,1.317,331,1.578,332,1.033,335,1.916,337,1.346,340,1.262,341,1.262,342,1.262,343,0.726,344,1.262,345,1.262,347,2.34,350,3.192,351,3.394,352,3.131,354,3.817,355,2.91,362,1.928,363,1.928,367,2.822,368,2.619,371,2.34,372,2.619,374,1.262,377,1.928,378,1.262,379,1.262,380,2.34,388,1.262,394,1.609,395,2.458,396,2.458,397,2.458,398,2.458,399,2.458,400,2.458,401,2.458,402,2.458,403,2.458,404,1.928,405,2.458,406,2.458,407,1.928,408,2.458,409,2.975,410,2.34,411,1.609,412,2.619,413,2.458,414,3.598,415,1.609,416,3.598,417,3.34,418,2.458,419,2.458,420,1.609,421,1.609,422,1.609,423,1.609,424,3.794,425,1.609,426,1.609,427,1.609,428,1.609,429,1.609,430,2.983,431,1.609,432,1.609]],["title/changelog.html",[433,1.379,434,1.379,435,2.147]],["body/changelog.html",[8,0.061,9,0.666,24,1.08,26,0.26,27,0.798,29,0.68,40,0.549,42,0.045,43,0.045,44,1.223,45,0.949,51,0.743,52,0.743,53,1.956,60,1.956,71,2.454,97,1.601,114,0.666,117,0.444,118,1.284,119,1.08,120,1.08,157,0.798,159,0.798,163,1.956,172,1.522,188,1.847,193,0.6,194,0.901,212,1.125,213,1.125,214,1.724,215,2.048,226,1.847,253,2.292,254,0.666,255,1.337,256,2.194,271,2.166,281,1.337,286,1.125,287,1.125,288,1.601,302,1.956,322,1.337,323,1.125,324,1.601,326,1.601,327,1.337,328,1.601,329,1.337,337,1.522,343,1.847,407,1.956,410,1.956,412,1.956,436,2.494,437,3.683,438,4.277,439,2.494,440,4.094,441,2.494,442,2.494,443,2.494,444,2.645,445,2.494,446,2.494,447,3.373,448,2.166,449,3.373,450,1.956,451,2.494,452,2.494,453,1.956,454,2.494,455,2.494,456,1.956,457,2.997,458,2.494,459,1.956,460,2.494,461,3.373,462,3.822,463,2.494,464,2.494,465,2.494,466,2.494,467,2.494,468,2.494,469,2.494,470,2.494,471,2.494,472,2.494,473,2.494,474,3.373,475,3.373,476,3.822,477,3.457,478,2.494,479,2.494,480,2.494,481,2.494,482,2.494,483,4.584,484,2.494,485,4.584,486,4.584,487,3.373,488,2.494,489,2.494,490,2.494,491,2.494,492,2.494,493,2.494,494,2.494,495,2.494,496,3.457,497,2.494,498,2.494,499,3.373,500,2.494,501,1.956,502,2.494,503,2.494,504,2.494,505,2.494,506,2.494,507,2.494,508,2.494,509,2.494,510,2.494,511,2.494,512,3.373,513,3.373,514,2.494,515,2.494,516,2.494,517,2.494,518,2.494,519,2.494,520,2.494,521,2.494,522,2.494,523,2.494,524,2.494,525,2.494,526,2.494,527,2.494,528,2.494,529,2.494,530,2.494,531,2.494,532,2.494,533,2.494,534,2.494,535,2.645,536,1.956,537,2.494,538,2.494,539,1.956,540,2.494,541,3.373,542,2.494,543,2.494,544,3.373,545,2.494,546,2.494,547,1.956,548,2.494,549,2.494,550,2.494]],["title/index.html",[72,0.473,433,1.379,434,1.379]],["body/index.html",[1,1.558,8,0.067,13,1.384,15,0.69,21,1.659,22,2.217,23,3.051,24,0.827,25,1.11,26,0.497,27,1.105,28,1.105,29,0.739,32,0.923,33,2.026,40,0.761,41,0.923,42,0.046,43,0.046,45,0.983,64,3.394,66,1.558,71,1.659,114,1.04,117,0.46,118,1.695,119,0.827,120,0.827,125,2.217,127,1.384,135,1.384,145,0.827,146,0.827,172,1.165,175,1.384,176,1.384,188,1.165,193,0.615,200,1.647,254,1.04,280,2.217,281,1.384,282,1.659,288,2.217,290,2.026,329,1.384,343,1.558,352,2.217,404,3.051,409,2.026,444,2.026,448,2.92,450,2.026,453,2.708,456,2.026,496,2.026,501,2.026,535,3.257,536,2.026,539,3.051,547,2.026,551,4.328,552,3.566,553,2.026,554,2.583,555,2.026,556,2.583,557,3.051,558,3.89,559,2.583,560,3.454,561,2.708,562,3.454,563,2.583,564,2.583,565,2.583,566,2.583,567,2.583,568,2.583,569,2.583,570,2.583,571,2.583,572,2.583,573,3.454,574,2.583,575,3.454,576,2.583,577,3.454,578,3.89,579,3.89,580,3.89,581,2.583,582,2.583,583,2.583,584,2.026,585,2.583,586,2.583,587,2.583,588,2.583,589,2.583,590,2.583,591,2.583,592,2.583,593,2.583,594,2.583,595,2.583,596,2.583,597,2.583,598,2.583,599,2.583,600,2.583,601,2.583,602,2.583,603,2.583,604,3.89,605,2.583,606,2.583,607,2.026,608,2.583,609,2.583,610,3.89,611,2.583,612,2.583,613,2.583,614,2.583,615,2.583,616,3.454,617,3.454,618,2.583,619,2.583,620,2.583,621,3.454,622,2.583,623,2.583,624,2.583,625,2.583,626,2.583,627,2.583]],["title/license.html",[433,1.379,434,1.379,628,1.379]],["body/license.html",[8,0.054,13,1.769,42,0.054,43,0.054,116,1.769,117,0.719,204,1.769,437,2.589,561,2.589,584,2.589,628,2.12,629,3.169,630,4.367,631,3.301,632,2.589,633,2.589,634,4.041,635,3.301,636,3.301,637,3.301,638,3.301,639,3.301,640,3.301,641,4.041,642,4.894,643,3.301,644,3.301,645,3.301,646,4.367,647,3.301,648,4.041,649,3.301,650,3.301,651,3.301,652,3.301,653,3.301,654,3.301,655,3.301,656,3.301,657,4.041,658,3.301,659,3.301,660,3.301,661,3.301,662,3.301,663,3.301,664,4.041,665,4.041,666,3.301,667,3.301,668,3.301,669,3.301,670,3.301,671,3.301,672,3.301,673,3.301,674,3.301,675,3.301,676,3.301,677,3.301,678,3.301,679,3.301,680,3.301,681,3.301,682,3.301,683,3.301,684,3.301,685,3.301,686,3.301,687,3.301,688,3.301,689,3.301,690,3.301,691,3.301,692,3.301,693,3.301,694,3.301]],["title/modules.html",[2,2.193]],["body/modules.html",[1,1.762,2,2.508,8,0.06,42,0.06,43,0.06,254,1.044,477,3.063,695,3.906,696,3.906]],["title/overview.html",[697,2.678]],["body/overview.html",[0,2.271,1,2.253,3,3.304,4,2.774,5,2.774,6,2.774,7,1.857,8,0.066,9,1.304,10,2.201,11,3.304,12,2.774,13,1.896,42,0.057,43,0.057,45,1.346,168,1.596,263,2.271,355,2.705,697,2.774,698,3.538,699,2.774]],["title/properties.html",[264,1.63,700,2.147]],["body/properties.html",[8,0.067,18,1.15,21,2.306,22,2.306,25,0.96,26,0.488,27,1.15,42,0.057,43,0.057,118,1.723,264,1.925,343,1.918,448,2.73,457,2.817,552,3.551,553,2.817,555,2.817,557,2.817,607,2.817,628,2.306,629,2.817,632,2.817,633,2.817,701,3.592,702,3.592,703,3.592,704,3.592,705,4.529,706,3.592,707,3.592,708,3.592,709,3.592]],["title/miscellaneous/typealiases.html",[710,1.151,711,3.041]],["body/miscellaneous/typealiases.html",[7,1.248,8,0.066,9,1.075,24,1.288,25,1.075,26,0.42,28,1.288,37,1.815,42,0.054,43,0.054,46,2.105,47,2.583,51,1,52,1,55,2.583,63,1.757,72,0.722,88,1.049,92,2.795,115,1.075,116,1.757,117,0.583,118,1.728,119,1.394,120,1.394,121,2.583,170,1.479,193,0.583,194,0.876,265,2.105,266,2.915,268,2.583,276,2.156,286,1.479,287,1.479,292,2.156,293,2.156,297,2.105,303,2.105,314,2.105,315,1.757,316,2.105,320,2.571,321,1.757,322,1.757,323,1.479,333,2.571,334,2.105,336,2.105,337,1.479,710,1.757,712,3.278,713,3.414,714,2.571,715,3.155,716,2.571,717,3.278]],["title/miscellaneous/variables.html",[710,1.151,718,2.385]],["body/miscellaneous/variables.html",[7,0.883,8,0.068,9,0.858,24,0.743,25,0.984,26,0.496,37,1.047,39,1.062,42,0.043,43,0.043,46,1.491,47,2.062,51,1.008,52,1.039,55,2.77,61,1.222,63,1.244,66,1.449,72,0.511,88,1.415,99,2.062,101,1.512,115,1.114,116,1.244,117,0.655,118,1.763,119,1.415,120,1.415,121,2.551,122,2.678,123,2.678,125,2.77,126,1.82,134,1.721,150,2.062,151,2.678,153,1.381,160,2.839,170,1.047,174,1.721,193,0.413,194,0.858,212,1.449,213,1.449,214,1.449,265,1.491,266,2.551,270,2.062,276,2.37,286,1.047,287,1.449,292,2.312,293,2.129,298,2.77,305,1.491,306,1.82,314,1.491,315,1.244,321,1.721,322,1.721,323,1.449,324,1.491,325,2.518,326,2.062,327,2.619,328,2.551,329,1.721,330,2.518,331,1.491,332,1.491,334,2.062,335,1.491,336,1.491,337,1.047,338,1.82,339,1.82,459,2.518,699,2.518,710,1.244,713,2.887,714,1.82,715,2.518,716,1.82,718,1.82,719,3.211,720,3.682,721,2.321,722,3.211,723,4.171,724,2.321,725,2.321]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":354,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["0.0.0",{"_index":701,"title":{},"body":{"properties.html":{}}}],["03",{"_index":483,"title":{},"body":{"changelog.html":{}}}],["0683aa3",{"_index":504,"title":{},"body":{"changelog.html":{}}}],["083b648",{"_index":542,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":355,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"overview.html":{}}}],["1.0.0",{"_index":521,"title":{},"body":{"changelog.html":{}}}],["1.0.1",{"_index":517,"title":{},"body":{"changelog.html":{}}}],["1.0.2",{"_index":515,"title":{},"body":{"changelog.html":{}}}],["1.0.3",{"_index":511,"title":{},"body":{"changelog.html":{}}}],["1.0.4",{"_index":507,"title":{},"body":{"changelog.html":{}}}],["1.0.5",{"_index":498,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":490,"title":{},"body":{"changelog.html":{}}}],["1.1.1",{"_index":482,"title":{},"body":{"changelog.html":{}}}],["10",{"_index":423,"title":{},"body":{"directives/WindowDirective.html":{}}}],["100",{"_index":418,"title":{},"body":{"directives/WindowDirective.html":{}}}],["11",{"_index":438,"title":{},"body":{"changelog.html":{}}}],["12",{"_index":512,"title":{},"body":{"changelog.html":{}}}],["14da071",{"_index":506,"title":{},"body":{"changelog.html":{}}}],["16",{"_index":499,"title":{},"body":{"changelog.html":{}}}],["17",{"_index":491,"title":{},"body":{"changelog.html":{}}}],["19",{"_index":484,"title":{},"body":{"changelog.html":{}}}],["1acd46e",{"_index":493,"title":{},"body":{"changelog.html":{}}}],["1fr",{"_index":360,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["2",{"_index":699,"title":{},"body":{"overview.html":{},"miscellaneous/variables.html":{}}}],["2.0.0",{"_index":472,"title":{},"body":{"changelog.html":{}}}],["2021",{"_index":437,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["22",{"_index":473,"title":{},"body":{"changelog.html":{}}}],["25",{"_index":439,"title":{},"body":{"changelog.html":{}}}],["3",{"_index":698,"title":{},"body":{"overview.html":{}}}],["3.0.0",{"_index":436,"title":{},"body":{"changelog.html":{}}}],["3240712",{"_index":495,"title":{},"body":{"changelog.html":{}}}],["3ee5543",{"_index":527,"title":{},"body":{"changelog.html":{}}}],["466a9d7",{"_index":543,"title":{},"body":{"changelog.html":{}}}],["4708aff",{"_index":550,"title":{},"body":{"changelog.html":{}}}],["487885f",{"_index":530,"title":{},"body":{"changelog.html":{}}}],["4aa85c7",{"_index":516,"title":{},"body":{"changelog.html":{}}}],["536764f",{"_index":522,"title":{},"body":{"changelog.html":{}}}],["582e83e",{"_index":533,"title":{},"body":{"changelog.html":{}}}],["5ac1ca9",{"_index":446,"title":{},"body":{"changelog.html":{}}}],["66c7a62",{"_index":442,"title":{},"body":{"changelog.html":{}}}],["7e66b70",{"_index":524,"title":{},"body":{"changelog.html":{}}}],["8446001",{"_index":489,"title":{},"body":{"changelog.html":{}}}],["8bdb155",{"_index":528,"title":{},"body":{"changelog.html":{}}}],["90ad184",{"_index":537,"title":{},"body":{"changelog.html":{}}}],["962620d",{"_index":548,"title":{},"body":{"changelog.html":{}}}],["97",{"_index":568,"title":{},"body":{"index.html":{}}}],["9fadf70",{"_index":531,"title":{},"body":{"changelog.html":{}}}],["9ff473a",{"_index":546,"title":{},"body":{"changelog.html":{}}}],["_",{"_index":344,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["a444236",{"_index":481,"title":{},"body":{"changelog.html":{}}}],["above",{"_index":663,"title":{},"body":{"license.html":{}}}],["absolute",{"_index":323,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["acb3fff",{"_index":497,"title":{},"body":{"changelog.html":{}}}],["accepts",{"_index":59,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["accessors",{"_index":78,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["action",{"_index":688,"title":{},"body":{"license.html":{}}}],["active",{"_index":126,"title":{},"body":{"directives/IfSpanDirective.html":{},"miscellaneous/variables.html":{}}}],["add",{"_index":496,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["added",{"_index":272,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["addition",{"_index":283,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["afab1c4",{"_index":479,"title":{},"body":{"changelog.html":{}}}],["aliases",{"_index":712,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow",{"_index":494,"title":{},"body":{"changelog.html":{}}}],["allows",{"_index":173,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["along",{"_index":279,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["and/or",{"_index":655,"title":{},"body":{"license.html":{}}}],["angular",{"_index":343,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{},"properties.html":{}}}],["angular/core",{"_index":34,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["angular/platform",{"_index":319,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["any).segments",{"_index":258,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["anymore",{"_index":251,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["apf",{"_index":445,"title":{},"body":{"changelog.html":{}}}],["api",{"_index":256,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["apis",{"_index":476,"title":{},"body":{"changelog.html":{}}}],["app",{"_index":23,"title":{},"body":{"modules/FoldableModule.html":{},"index.html":{}}}],["appcomponent",{"_index":586,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":583,"title":{},"body":{"index.html":{}}}],["arising",{"_index":692,"title":{},"body":{"license.html":{}}}],["asobject",{"_index":179,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["asobservable",{"_index":146,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["assign",{"_index":402,"title":{},"body":{"directives/WindowDirective.html":{}}}],["associated",{"_index":643,"title":{},"body":{"license.html":{}}}],["author",{"_index":709,"title":{},"body":{"properties.html":{}}}],["authors",{"_index":681,"title":{},"body":{"license.html":{}}}],["available",{"_index":192,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["axis",{"_index":461,"title":{},"body":{"changelog.html":{}}}],["b1c68ac",{"_index":520,"title":{},"body":{"changelog.html":{}}}],["b2a3632",{"_index":534,"title":{},"body":{"changelog.html":{}}}],["b84fc9f",{"_index":510,"title":{},"body":{"changelog.html":{}}}],["before",{"_index":598,"title":{},"body":{"index.html":{}}}],["behaves",{"_index":56,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["better",{"_index":458,"title":{},"body":{"changelog.html":{}}}],["between",{"_index":274,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["boolean",{"_index":61,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["bottom",{"_index":353,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["breaking",{"_index":447,"title":{},"body":{"changelog.html":{}}}],["browse",{"_index":696,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":254,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{},"modules.html":{}}}],["bug",{"_index":485,"title":{},"body":{"changelog.html":{}}}],["bugs",{"_index":706,"title":{},"body":{"properties.html":{}}}],["build",{"_index":22,"title":{},"body":{"modules/FoldableModule.html":{},"index.html":{},"properties.html":{}}}],["built",{"_index":623,"title":{},"body":{"index.html":{}}}],["c",{"_index":631,"title":{},"body":{"license.html":{}}}],["calc(env(viewport",{"_index":366,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["case",{"_index":151,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"miscellaneous/variables.html":{}}}],["change",{"_index":231,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["changed",{"_index":590,"title":{},"body":{"index.html":{}}}],["changelog",{"_index":435,"title":{"changelog.html":{}},"body":{}}],["changes",{"_index":188,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["charge",{"_index":638,"title":{},"body":{"license.html":{}}}],["check",{"_index":329,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["checks",{"_index":325,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/variables.html":{}}}],["choose",{"_index":273,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["chrome",{"_index":567,"title":{},"body":{"index.html":{}}}],["claim",{"_index":684,"title":{},"body":{"license.html":{}}}],["class",{"_index":41,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["clone",{"_index":606,"title":{},"body":{"index.html":{}}}],["cluster_foldablemodule",{"_index":4,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["cluster_foldablemodule_declarations",{"_index":6,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["cluster_foldablemodule_exports",{"_index":5,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["code",{"_index":578,"title":{},"body":{"index.html":{}}}],["column",{"_index":358,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["columngap",{"_index":365,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["commit",{"_index":545,"title":{},"body":{"changelog.html":{}}}],["common",{"_index":346,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["compatibility",{"_index":455,"title":{},"body":{"changelog.html":{}}}],["components",{"_index":553,"title":{},"body":{"index.html":{},"properties.html":{}}}],["condition",{"_index":91,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["conditions",{"_index":116,"title":{},"body":{"directives/IfSpanDirective.html":{},"license.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["conduct",{"_index":597,"title":{},"body":{"index.html":{}}}],["confusing",{"_index":464,"title":{},"body":{"changelog.html":{}}}],["connection",{"_index":693,"title":{},"body":{"license.html":{}}}],["console.log('screen",{"_index":589,"title":{},"body":{"index.html":{}}}],["console.warn('getwindowsegments",{"_index":249,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["const",{"_index":124,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["constructor",{"_index":79,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["constructor(element",{"_index":294,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["constructor(private",{"_index":587,"title":{},"body":{"index.html":{}}}],["constructor(screencontext",{"_index":80,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/WindowDirective.html":{}}}],["container",{"_index":268,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{}}}],["contains",{"_index":19,"title":{},"body":{"modules/FoldableModule.html":{}}}],["context",{"_index":114,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{}}}],["context.ts",{"_index":171,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["context.ts:37",{"_index":182,"title":{},"body":{"injectables/ScreenContext.html":{}}}],["context.ts:68",{"_index":190,"title":{},"body":{"injectables/ScreenContext.html":{}}}],["context.ts:75",{"_index":197,"title":{},"body":{"injectables/ScreenContext.html":{}}}],["context.ts:82",{"_index":199,"title":{},"body":{"injectables/ScreenContext.html":{}}}],["context.ts:89",{"_index":185,"title":{},"body":{"injectables/ScreenContext.html":{}}}],["context.ts:96",{"_index":183,"title":{},"body":{"injectables/ScreenContext.html":{}}}],["contract",{"_index":689,"title":{},"body":{"license.html":{}}}],["contribute",{"_index":594,"title":{},"body":{"index.html":{}}}],["contributing",{"_index":591,"title":{},"body":{"index.html":{}}}],["copies",{"_index":657,"title":{},"body":{"license.html":{}}}],["copy",{"_index":641,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":630,"title":{},"body":{"license.html":{}}}],["creating",{"_index":269,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["css",{"_index":271,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{}}}],["current",{"_index":50,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{}}}],["currentcontext",{"_index":224,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["currently",{"_index":399,"title":{},"body":{"directives/WindowDirective.html":{}}}],["d383609",{"_index":514,"title":{},"body":{"changelog.html":{}}}],["damages",{"_index":685,"title":{},"body":{"license.html":{}}}],["db13ef1",{"_index":540,"title":{},"body":{"changelog.html":{}}}],["deal",{"_index":645,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":694,"title":{},"body":{"license.html":{}}}],["declarations",{"_index":30,"title":{},"body":{"modules/FoldableModule.html":{}}}],["declare",{"_index":216,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["default",{"_index":160,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":84,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["defines",{"_index":92,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"miscellaneous/typealiases.html":{}}}],["demo",{"_index":535,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["demos",{"_index":626,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":3,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["deployment",{"_index":519,"title":{},"body":{"changelog.html":{}}}],["description",{"_index":18,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"properties.html":{}}}],["design",{"_index":278,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["destroyed",{"_index":225,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["detect",{"_index":722,"title":{},"body":{"miscellaneous/variables.html":{}}}],["detected",{"_index":303,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{}}}],["dev",{"_index":611,"title":{},"body":{"index.html":{}}}],["device",{"_index":200,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["device's",{"_index":177,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["devices",{"_index":27,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{},"properties.html":{}}}],["devices/demos",{"_index":624,"title":{},"body":{"index.html":{}}}],["df1ca39",{"_index":478,"title":{},"body":{"changelog.html":{}}}],["different",{"_index":275,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["direction",{"_index":315,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["directive",{"_index":44,"title":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{}}}],["directives",{"_index":45,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{},"overview.html":{}}}],["display",{"_index":347,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["displayed",{"_index":280,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["distribute",{"_index":653,"title":{},"body":{"license.html":{}}}],["docs",{"_index":518,"title":{},"body":{"changelog.html":{}}}],["documentation",{"_index":561,"title":{},"body":{"index.html":{},"license.html":{}}}],["domrect",{"_index":195,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["dual",{"_index":118,"title":{},"body":{"directives/IfSpanDirective.html":{},"changelog.html":{},"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["dualhorizontal",{"_index":724,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dualhorizontalviewport",{"_index":213,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["dualvertical",{"_index":725,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dualverticalviewport",{"_index":212,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["duo",{"_index":558,"title":{},"body":{"index.html":{}}}],["edge",{"_index":565,"title":{},"body":{"index.html":{}}}],["element",{"_index":297,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{}}}],["elementref",{"_index":295,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["elsetemplateref",{"_index":131,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["elseviewref",{"_index":133,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["embeddedviewref",{"_index":110,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["emitting",{"_index":187,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["emulation",{"_index":562,"title":{},"body":{"index.html":{}}}],["enable",{"_index":570,"title":{},"body":{"index.html":{}}}],["enumeration",{"_index":122,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"miscellaneous/variables.html":{}}}],["env(viewport",{"_index":351,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["error('segment",{"_index":426,"title":{},"body":{"directives/WindowDirective.html":{}}}],["evaluates",{"_index":98,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["event",{"_index":680,"title":{},"body":{"license.html":{}}}],["example",{"_index":127,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["except",{"_index":58,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["experiences",{"_index":555,"title":{},"body":{"index.html":{},"properties.html":{}}}],["experimental",{"_index":571,"title":{},"body":{"index.html":{}}}],["export",{"_index":40,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{}}}],["exports",{"_index":31,"title":{},"body":{"modules/FoldableModule.html":{}}}],["express",{"_index":671,"title":{},"body":{"license.html":{}}}],["expression",{"_index":62,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["extra",{"_index":502,"title":{},"body":{"changelog.html":{}}}],["false",{"_index":99,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"miscellaneous/variables.html":{}}}],["fc26aae",{"_index":480,"title":{},"body":{"changelog.html":{}}}],["fdifspan",{"_index":71,"title":{},"body":{"directives/IfSpanDirective.html":{},"changelog.html":{},"index.html":{}}}],["fdifspan(condition",{"_index":136,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["fdifspanelse",{"_index":76,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["fdifspanelse(templateref",{"_index":142,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["fdifspanthen",{"_index":77,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["fdifspanthen(templateref",{"_index":139,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["fdsplitlayout",{"_index":290,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"index.html":{}}}],["fdsplitlayout(options",{"_index":375,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["fdwindow",{"_index":409,"title":{},"body":{"directives/WindowDirective.html":{},"index.html":{}}}],["fdwindow(segment",{"_index":420,"title":{},"body":{"directives/WindowDirective.html":{}}}],["feature",{"_index":563,"title":{},"body":{"index.html":{}}}],["features",{"_index":440,"title":{},"body":{"changelog.html":{}}}],["file",{"_index":16,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["files",{"_index":644,"title":{},"body":{"license.html":{}}}],["filter",{"_index":207,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["finish",{"_index":538,"title":{},"body":{"changelog.html":{}}}],["first",{"_index":281,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{}}}],["fitness",{"_index":676,"title":{},"body":{"license.html":{}}}],["fix",{"_index":529,"title":{},"body":{"changelog.html":{}}}],["fixes",{"_index":486,"title":{},"body":{"changelog.html":{}}}],["flags",{"_index":572,"title":{},"body":{"index.html":{}}}],["flex",{"_index":321,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["flexdirection",{"_index":356,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["fold",{"_index":462,"title":{},"body":{"changelog.html":{}}}],["foldable",{"_index":552,"title":{},"body":{"index.html":{},"properties.html":{}}}],["foldable.git",{"_index":708,"title":{},"body":{"properties.html":{}}}],["foldable/issues",{"_index":707,"title":{},"body":{"properties.html":{}}}],["foldableimport",{"_index":581,"title":{},"body":{"index.html":{}}}],["foldablemodule",{"_index":1,"title":{"modules/FoldableModule.html":{}},"body":{"modules/FoldableModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["foldables",{"_index":627,"title":{},"body":{"index.html":{}}}],["follow",{"_index":573,"title":{},"body":{"index.html":{}}}],["following",{"_index":662,"title":{},"body":{"license.html":{}}}],["format",{"_index":304,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["free",{"_index":637,"title":{},"body":{"license.html":{}}}],["fromevent",{"_index":203,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["fromevent(matchmedia(dualhorizontalviewport",{"_index":232,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["fromevent(matchmedia(dualverticalviewport",{"_index":230,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["full",{"_index":560,"title":{},"body":{"index.html":{}}}],["function",{"_index":393,"title":{},"body":{"interfaces/Window.html":{}}}],["furnished",{"_index":660,"title":{},"body":{"license.html":{}}}],["gallery",{"_index":617,"title":{},"body":{"index.html":{}}}],["getcomputedstyle(this.element.nativeelement",{"_index":389,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["getismultiscreen",{"_index":198,"title":{},"body":{"injectables/ScreenContext.html":{}}}],["getlayoutmode",{"_index":308,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["getreadingdirection",{"_index":312,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["gets",{"_index":184,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["getscreencontext",{"_index":245,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["getscreenspanning",{"_index":196,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["getting",{"_index":433,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["getwindoworder",{"_index":310,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["getwindowsegments",{"_index":189,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["given",{"_index":326,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["global",{"_index":217,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["google",{"_index":566,"title":{},"body":{"index.html":{}}}],["granted",{"_index":636,"title":{},"body":{"license.html":{}}}],["grid",{"_index":322,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["gridarea",{"_index":417,"title":{},"body":{"directives/WindowDirective.html":{}}}],["gridautoflow",{"_index":364,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["gridtemplateareas",{"_index":361,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["gridtemplatecolumns",{"_index":359,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["gridtemplaterows",{"_index":369,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["height",{"_index":350,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["help",{"_index":21,"title":{},"body":{"modules/FoldableModule.html":{},"index.html":{},"properties.html":{}}}],["helper",{"_index":703,"title":{},"body":{"properties.html":{}}}],["here",{"_index":575,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":635,"title":{},"body":{"license.html":{}}}],["holders",{"_index":682,"title":{},"body":{"license.html":{}}}],["holds",{"_index":219,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["homepage",{"_index":704,"title":{},"body":{"properties.html":{}}}],["horizontal",{"_index":119,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["host",{"_index":316,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{}}}],["hostbinding",{"_index":317,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["hostbinding('style",{"_index":378,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["html",{"_index":65,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["https://github.com/sinedied/ngx",{"_index":705,"title":{},"body":{"properties.html":{}}}],["ifspandirective",{"_index":7,"title":{"directives/IfSpanDirective.html":{}},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["ignore",{"_index":103,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["ignored",{"_index":240,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["implement",{"_index":541,"title":{},"body":{"changelog.html":{}}}],["implementation",{"_index":619,"title":{},"body":{"index.html":{}}}],["implements",{"_index":67,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["implied",{"_index":672,"title":{},"body":{"license.html":{}}}],["import",{"_index":32,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["imports",{"_index":582,"title":{},"body":{"index.html":{}}}],["included",{"_index":666,"title":{},"body":{"license.html":{}}}],["including",{"_index":648,"title":{},"body":{"license.html":{}}}],["inconsistent",{"_index":492,"title":{},"body":{"changelog.html":{}}}],["index",{"_index":72,"title":{"index.html":{}},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":14,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["information",{"_index":220,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["init",{"_index":523,"title":{},"body":{"changelog.html":{}}}],["initial",{"_index":544,"title":{},"body":{"changelog.html":{}}}],["initialization",{"_index":505,"title":{},"body":{"changelog.html":{}}}],["injectable",{"_index":168,"title":{"injectables/ScreenContext.html":{}},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"overview.html":{}}}],["injectables",{"_index":169,"title":{},"body":{"injectables/ScreenContext.html":{}}}],["input",{"_index":111,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["inputs",{"_index":75,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["install",{"_index":580,"title":{},"body":{"index.html":{}}}],["instead",{"_index":60,"title":{},"body":{"directives/IfSpanDirective.html":{},"changelog.html":{}}}],["instructions",{"_index":574,"title":{},"body":{"index.html":{}}}],["interface",{"_index":218,"title":{"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["interfaces",{"_index":263,"title":{},"body":{"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"overview.html":{}}}],["ismultiscreen",{"_index":181,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["issue",{"_index":600,"title":{},"body":{"index.html":{}}}],["issues",{"_index":487,"title":{},"body":{"changelog.html":{}}}],["isvalid",{"_index":330,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/variables.html":{}}}],["js",{"_index":342,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["justifycontent",{"_index":348,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["keep",{"_index":284,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["keywords",{"_index":702,"title":{},"body":{"properties.html":{}}}],["kind",{"_index":670,"title":{},"body":{"license.html":{}}}],["lasorsa",{"_index":633,"title":{},"body":{"license.html":{},"properties.html":{}}}],["latest",{"_index":444,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["layout",{"_index":24,"title":{},"body":{"modules/FoldableModule.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["layout.directive",{"_index":38,"title":{},"body":{"modules/FoldableModule.html":{},"directives/WindowDirective.html":{}}}],["layout.directive.ts",{"_index":266,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["layout.directive.ts:196",{"_index":300,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["layout.directive.ts:205",{"_index":296,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["layout.directive.ts:222",{"_index":309,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["layout.directive.ts:231",{"_index":311,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["layout.directive.ts:240",{"_index":313,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["layoutmode",{"_index":291,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["layouts",{"_index":532,"title":{},"body":{"changelog.html":{}}}],["layoutstyle",{"_index":374,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["layoutstyles",{"_index":345,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["layoutstyles[mode][spanning][segment",{"_index":432,"title":{},"body":{"directives/WindowDirective.html":{}}}],["layoutstyles[this.mode].common",{"_index":391,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["layoutstyles[this.mode][reverse",{"_index":392,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["left",{"_index":367,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["lefttoright",{"_index":338,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/variables.html":{}}}],["less",{"_index":463,"title":{},"body":{"changelog.html":{}}}],["liability",{"_index":686,"title":{},"body":{"license.html":{}}}],["liable",{"_index":683,"title":{},"body":{"license.html":{}}}],["library",{"_index":448,"title":{},"body":{"changelog.html":{},"index.html":{},"properties.html":{}}}],["license",{"_index":628,"title":{"license.html":{}},"body":{"license.html":{},"properties.html":{}}}],["limitation",{"_index":649,"title":{},"body":{"license.html":{}}}],["limited",{"_index":673,"title":{},"body":{"license.html":{}}}],["link",{"_index":39,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"miscellaneous/variables.html":{}}}],["list",{"_index":191,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["live",{"_index":559,"title":{},"body":{"index.html":{}}}],["locally",{"_index":605,"title":{},"body":{"index.html":{}}}],["look",{"_index":340,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["ltr",{"_index":336,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["ma",{"_index":341,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["machine",{"_index":608,"title":{},"body":{"index.html":{}}}],["make",{"_index":595,"title":{},"body":{"index.html":{}}}],["making",{"_index":613,"title":{},"body":{"index.html":{}}}],["map",{"_index":206,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["match",{"_index":163,"title":{},"body":{"directives/IfSpanDirective.html":{},"changelog.html":{}}}],["matchcondition",{"_index":149,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["matches",{"_index":53,"title":{},"body":{"directives/IfSpanDirective.html":{},"changelog.html":{}}}],["matching",{"_index":43,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["matchmedia(dualhorizontalviewport).matches",{"_index":248,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["matchmedia(dualverticalviewport).matches",{"_index":247,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["maxheight",{"_index":419,"title":{},"body":{"directives/WindowDirective.html":{}}}],["meaning",{"_index":400,"title":{},"body":{"directives/WindowDirective.html":{}}}],["media",{"_index":214,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["merchantability",{"_index":675,"title":{},"body":{"license.html":{}}}],["merge",{"_index":204,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"license.html":{}}}],["metadata",{"_index":69,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["methods",{"_index":73,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{}}}],["microsoft",{"_index":564,"title":{},"body":{"index.html":{}}}],["migrate",{"_index":465,"title":{},"body":{"changelog.html":{}}}],["min",{"_index":513,"title":{},"body":{"changelog.html":{}}}],["miscellaneous",{"_index":710,"title":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":629,"title":{},"body":{"license.html":{},"properties.html":{}}}],["mode",{"_index":52,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["modes",{"_index":324,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["modifications",{"_index":614,"title":{},"body":{"index.html":{}}}],["modify",{"_index":651,"title":{},"body":{"license.html":{}}}],["module",{"_index":0,"title":{"modules/FoldableModule.html":{}},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/FoldableModule.html":{},"modules.html":{}}}],["multi",{"_index":25,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["multiple",{"_index":201,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["name",{"_index":87,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["naming",{"_index":526,"title":{},"body":{"changelog.html":{}}}],["need",{"_index":569,"title":{},"body":{"index.html":{}}}],["new",{"_index":226,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"changelog.html":{}}}],["ng",{"_index":549,"title":{},"body":{"changelog.html":{}}}],["ngif",{"_index":57,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["ngmodule",{"_index":33,"title":{},"body":{"modules/FoldableModule.html":{},"index.html":{}}}],["ngondestroy",{"_index":74,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["ngx",{"_index":551,"title":{},"body":{"index.html":{}}}],["none",{"_index":121,"title":{},"body":{"directives/IfSpanDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["noninfringement",{"_index":679,"title":{},"body":{"license.html":{}}}],["normal",{"_index":334,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["note",{"_index":403,"title":{},"body":{"directives/WindowDirective.html":{}}}],["notice",{"_index":664,"title":{},"body":{"license.html":{}}}],["now",{"_index":449,"title":{},"body":{"changelog.html":{}}}],["npm",{"_index":579,"title":{},"body":{"index.html":{}}}],["null",{"_index":94,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["number",{"_index":412,"title":{},"body":{"directives/WindowDirective.html":{},"changelog.html":{}}}],["object",{"_index":723,"title":{},"body":{"miscellaneous/variables.html":{}}}],["observable",{"_index":186,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["obtaining",{"_index":640,"title":{},"body":{"license.html":{}}}],["old",{"_index":475,"title":{},"body":{"changelog.html":{}}}],["older",{"_index":456,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["ondestroy",{"_index":68,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["one",{"_index":406,"title":{},"body":{"directives/WindowDirective.html":{}}}],["option",{"_index":407,"title":{},"body":{"directives/WindowDirective.html":{},"changelog.html":{}}}],["optional",{"_index":89,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["options",{"_index":302,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"changelog.html":{}}}],["options.trim().split",{"_index":385,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["order",{"_index":286,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["orientation",{"_index":501,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["otherwise",{"_index":691,"title":{},"body":{"license.html":{}}}],["out",{"_index":13,"title":{},"body":{"modules/FoldableModule.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":697,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":700,"title":{"properties.html":{}},"body":{}}],["packages",{"_index":609,"title":{},"body":{"index.html":{}}}],["param",{"_index":134,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/variables.html":{}}}],["parameter",{"_index":289,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["parameters",{"_index":86,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["parent",{"_index":267,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["parseint(segment",{"_index":422,"title":{},"body":{"directives/WindowDirective.html":{}}}],["parseoptions(options",{"_index":384,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["particular",{"_index":677,"title":{},"body":{"license.html":{}}}],["performing",{"_index":466,"title":{},"body":{"changelog.html":{}}}],["permission",{"_index":634,"title":{},"body":{"license.html":{}}}],["permit",{"_index":658,"title":{},"body":{"license.html":{}}}],["person",{"_index":639,"title":{},"body":{"license.html":{}}}],["persons",{"_index":659,"title":{},"body":{"license.html":{}}}],["photo",{"_index":616,"title":{},"body":{"index.html":{}}}],["pipe",{"_index":233,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["placed",{"_index":396,"title":{},"body":{"directives/WindowDirective.html":{}}}],["please",{"_index":252,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["portions",{"_index":668,"title":{},"body":{"license.html":{}}}],["position",{"_index":372,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["posting",{"_index":599,"title":{},"body":{"index.html":{}}}],["previous",{"_index":452,"title":{},"body":{"changelog.html":{}}}],["private",{"_index":128,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["project",{"_index":539,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["projects/.../if",{"_index":716,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/.../media",{"_index":719,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/.../screen",{"_index":714,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/.../split",{"_index":713,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/lib/src/core/foldable.module.ts",{"_index":17,"title":{},"body":{"modules/FoldableModule.html":{}}}],["projects/lib/src/core/if",{"_index":46,"title":{},"body":{"directives/IfSpanDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/lib/src/core/media",{"_index":721,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/lib/src/core/screen",{"_index":170,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/lib/src/core/split",{"_index":265,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/lib/src/core/window.directive.ts",{"_index":394,"title":{},"body":{"directives/WindowDirective.html":{}}}],["projects/lib/src/core/window.directive.ts:120",{"_index":413,"title":{},"body":{"directives/WindowDirective.html":{}}}],["projects/lib/src/core/window.directive.ts:126",{"_index":411,"title":{},"body":{"directives/WindowDirective.html":{}}}],["properties",{"_index":264,"title":{"properties.html":{}},"body":{"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"properties.html":{}}}],["provided",{"_index":584,"title":{},"body":{"index.html":{},"license.html":{}}}],["providedin",{"_index":222,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["publish",{"_index":652,"title":{},"body":{"license.html":{}}}],["pull",{"_index":601,"title":{},"body":{"index.html":{}}}],["purpose",{"_index":678,"title":{},"body":{"license.html":{}}}],["queries",{"_index":215,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["queries.ts",{"_index":720,"title":{},"body":{"miscellaneous/variables.html":{}}}],["query",{"_index":174,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["re",{"_index":618,"title":{},"body":{"index.html":{}}}],["react",{"_index":621,"title":{},"body":{"index.html":{}}}],["read",{"_index":404,"title":{},"body":{"directives/WindowDirective.html":{},"index.html":{}}}],["reading",{"_index":314,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["readingdirection",{"_index":293,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["readingdirection.lefttoright",{"_index":390,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["readingdirection.righttoleft",{"_index":431,"title":{},"body":{"directives/WindowDirective.html":{}}}],["readonly",{"_index":221,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["real",{"_index":488,"title":{},"body":{"changelog.html":{}}}],["receive",{"_index":175,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"index.html":{}}}],["refresh",{"_index":500,"title":{},"body":{"changelog.html":{}}}],["regardless",{"_index":585,"title":{},"body":{"index.html":{}}}],["related",{"_index":615,"title":{},"body":{"index.html":{}}}],["relative",{"_index":373,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["remove",{"_index":474,"title":{},"body":{"changelog.html":{}}}],["rename",{"_index":441,"title":{},"body":{"changelog.html":{}}}],["renamed",{"_index":460,"title":{},"body":{"changelog.html":{}}}],["rendered",{"_index":320,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/typealiases.html":{}}}],["repaints",{"_index":503,"title":{},"body":{"changelog.html":{}}}],["replacements",{"_index":467,"title":{},"body":{"changelog.html":{}}}],["replaysubject",{"_index":205,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["replaysubject(1",{"_index":227,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["repository",{"_index":607,"title":{},"body":{"index.html":{},"properties.html":{}}}],["represents",{"_index":717,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["request",{"_index":602,"title":{},"body":{"index.html":{}}}],["require",{"_index":454,"title":{},"body":{"changelog.html":{}}}],["requires",{"_index":450,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["reset",{"_index":12,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["restriction",{"_index":647,"title":{},"body":{"license.html":{}}}],["results",{"_index":42,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":153,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":104,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["reverse",{"_index":287,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["reversed",{"_index":408,"title":{},"body":{"directives/WindowDirective.html":{}}}],["revert",{"_index":525,"title":{},"body":{"changelog.html":{}}}],["right",{"_index":368,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["rightmost",{"_index":405,"title":{},"body":{"directives/WindowDirective.html":{}}}],["rights",{"_index":650,"title":{},"body":{"license.html":{}}}],["righttoleft",{"_index":339,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/variables.html":{}}}],["root",{"_index":223,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["row",{"_index":357,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["rowgap",{"_index":370,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["rtl",{"_index":337,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["run",{"_index":604,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":113,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["rxjs/operators",{"_index":211,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["safestyle",{"_index":318,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["same",{"_index":285,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["sample",{"_index":620,"title":{},"body":{"index.html":{}}}],["screen",{"_index":26,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["screencontext",{"_index":29,"title":{"injectables/ScreenContext.html":{}},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{}}}],["screencontextdata",{"_index":178,"title":{"interfaces/ScreenContextData.html":{}},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["screencontextsubscription",{"_index":129,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["screens",{"_index":202,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["screenspanning",{"_index":115,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["screenspanning.dualhorizontal",{"_index":159,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"changelog.html":{}}}],["screenspanning.dualvertical",{"_index":157,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"changelog.html":{}}}],["screenspanning.horizontal",{"_index":469,"title":{},"body":{"changelog.html":{}}}],["screenspanning.none",{"_index":161,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["screenspanning.vertical",{"_index":468,"title":{},"body":{"changelog.html":{}}}],["second",{"_index":282,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["see",{"_index":28,"title":{},"body":{"modules/FoldableModule.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["segment",{"_index":352,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["segment0",{"_index":362,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["segment1",{"_index":363,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["segments",{"_index":194,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["selector",{"_index":70,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["sell",{"_index":656,"title":{},"body":{"license.html":{}}}],["server",{"_index":612,"title":{},"body":{"index.html":{}}}],["service",{"_index":172,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["services",{"_index":554,"title":{},"body":{"index.html":{}}}],["set",{"_index":135,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["setfdifspan(condition",{"_index":106,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["setfdifspanelse(templateref",{"_index":109,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["setfdifspanthen(templateref",{"_index":108,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["setfdsplitlayout(options",{"_index":307,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["setfdwindow(segment",{"_index":415,"title":{},"body":{"directives/WindowDirective.html":{}}}],["sets",{"_index":301,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["setup",{"_index":576,"title":{},"body":{"index.html":{}}}],["shall",{"_index":665,"title":{},"body":{"license.html":{}}}],["sharereplay",{"_index":208,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["sharereplay(1",{"_index":237,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["show",{"_index":96,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["showing",{"_index":107,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["shown",{"_index":93,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["shows",{"_index":48,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["similar",{"_index":622,"title":{},"body":{"index.html":{}}}],["single",{"_index":66,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["singlefoldhorizontal",{"_index":470,"title":{},"body":{"changelog.html":{}}}],["singlefoldvertical",{"_index":471,"title":{},"body":{"changelog.html":{}}}],["software",{"_index":642,"title":{},"body":{"license.html":{}}}],["source",{"_index":15,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["space",{"_index":349,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["span",{"_index":97,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{}}}],["span.directive",{"_index":35,"title":{},"body":{"modules/FoldableModule.html":{}}}],["span.directive.ts",{"_index":47,"title":{},"body":{"directives/IfSpanDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["span.directive.ts:64",{"_index":90,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["span.directive.ts:73",{"_index":100,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["span.directive.ts:81",{"_index":95,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["span.directive.ts:85",{"_index":85,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["span.directive.ts:99",{"_index":102,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["spancondition",{"_index":55,"title":{},"body":{"directives/IfSpanDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["spancondition.horizontal",{"_index":155,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["spancondition.multi",{"_index":152,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["spancondition.vertical",{"_index":158,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["spanning",{"_index":51,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["spanning.ts",{"_index":715,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["specified",{"_index":54,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["specify",{"_index":395,"title":{},"body":{"directives/WindowDirective.html":{}}}],["split",{"_index":37,"title":{},"body":{"modules/FoldableModule.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["splitlayout",{"_index":410,"title":{},"body":{"directives/WindowDirective.html":{},"changelog.html":{}}}],["splitlayoutdirective",{"_index":9,"title":{"directives/SplitLayoutDirective.html":{}},"body":{"modules/FoldableModule.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["splitlayoutmode",{"_index":276,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["splitlayoutmode.absolute",{"_index":332,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/variables.html":{}}}],["splitlayoutmode.flex",{"_index":305,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/variables.html":{}}}],["splitlayoutmode.grid",{"_index":331,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/variables.html":{}}}],["splitlayoutmode.isvalid(mode",{"_index":386,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["start",{"_index":610,"title":{},"body":{"index.html":{}}}],["started",{"_index":434,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["startwith",{"_index":209,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["startwith(1",{"_index":236,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["steps",{"_index":603,"title":{},"body":{"index.html":{}}}],["strict",{"_index":509,"title":{},"body":{"changelog.html":{}}}],["string",{"_index":298,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/variables.html":{}}}],["style",{"_index":379,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["subject",{"_index":661,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":654,"title":{},"body":{"license.html":{}}}],["subscribe",{"_index":147,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["subscribe((context",{"_index":588,"title":{},"body":{"index.html":{}}}],["subscription",{"_index":112,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["substantial",{"_index":667,"title":{},"body":{"license.html":{}}}],["such",{"_index":556,"title":{},"body":{"index.html":{}}}],["suit",{"_index":277,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["support",{"_index":477,"title":{},"body":{"changelog.html":{},"modules.html":{}}}],["supported",{"_index":250,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["sure",{"_index":596,"title":{},"body":{"index.html":{}}}],["surface",{"_index":557,"title":{},"body":{"index.html":{},"properties.html":{}}}],["svg",{"_index":695,"title":{},"body":{"modules.html":{}}}],["swap",{"_index":430,"title":{},"body":{"directives/WindowDirective.html":{}}}],["switch",{"_index":150,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"miscellaneous/variables.html":{}}}],["takeuntil",{"_index":210,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["takeuntil(this.destroyed",{"_index":238,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["target",{"_index":414,"title":{},"body":{"directives/WindowDirective.html":{}}}],["template",{"_index":49,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["templateref",{"_index":83,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["test",{"_index":536,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["text",{"_index":63,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["thentemplateref",{"_index":130,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["thenviewref",{"_index":132,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.condition",{"_index":137,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.currentcontext",{"_index":228,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.currentcontext.ismultiscreen",{"_index":244,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.currentcontext.screenspanning",{"_index":235,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.currentcontext.windowsegments",{"_index":243,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.destroyed$.complete",{"_index":242,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.destroyed$.next",{"_index":241,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.direction",{"_index":383,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["this.elsetemplateref",{"_index":143,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.elseviewref",{"_index":166,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.getscreencontext",{"_index":229,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.getscreenspanning",{"_index":234,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.getwindowsegments",{"_index":246,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.layoutstyle",{"_index":380,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["this.matchcondition",{"_index":164,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.mode",{"_index":381,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["this.order",{"_index":382,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["this.parseoptions(options",{"_index":376,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["this.screencontext",{"_index":145,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["this.screencontext$.subscribe",{"_index":239,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.screencontext.ismultiscreen",{"_index":154,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["this.screencontext.screenspanning",{"_index":156,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["this.screencontextsubscription",{"_index":144,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["this.screencontextsubscription.unsubscribe",{"_index":148,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["this.segment",{"_index":424,"title":{},"body":{"directives/WindowDirective.html":{}}}],["this.splitlayout.layoutmode",{"_index":427,"title":{},"body":{"directives/WindowDirective.html":{}}}],["this.splitlayout.readingdirection",{"_index":429,"title":{},"body":{"directives/WindowDirective.html":{}}}],["this.splitlayout.windoworder",{"_index":428,"title":{},"body":{"directives/WindowDirective.html":{}}}],["this.thentemplateref",{"_index":140,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.thenviewref",{"_index":141,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.updatestyle",{"_index":377,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["this.updateview",{"_index":138,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.viewcontainer.clear",{"_index":165,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.viewcontainer.createembeddedview",{"_index":167,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["throw",{"_index":425,"title":{},"body":{"directives/WindowDirective.html":{}}}],["top",{"_index":371,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["tort",{"_index":690,"title":{},"body":{"license.html":{}}}],["true",{"_index":101,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["two",{"_index":398,"title":{},"body":{"directives/WindowDirective.html":{}}}],["type",{"_index":88,"title":{},"body":{"directives/IfSpanDirective.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":711,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":421,"title":{},"body":{"directives/WindowDirective.html":{}}}],["typescript",{"_index":508,"title":{},"body":{"changelog.html":{}}}],["undefined",{"_index":299,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["up",{"_index":397,"title":{},"body":{"directives/WindowDirective.html":{}}}],["update",{"_index":253,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["updates",{"_index":176,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"index.html":{}}}],["updatestyle",{"_index":388,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["updateview",{"_index":162,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["upgrade",{"_index":443,"title":{},"body":{"changelog.html":{}}}],["usage",{"_index":577,"title":{},"body":{"index.html":{}}}],["use",{"_index":117,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{},"license.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":270,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/variables.html":{}}}],["using",{"_index":288,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"changelog.html":{},"index.html":{}}}],["utilities",{"_index":20,"title":{},"body":{"modules/FoldableModule.html":{}}}],["v13",{"_index":451,"title":{},"body":{"changelog.html":{}}}],["valid",{"_index":328,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["value",{"_index":327,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":123,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"miscellaneous/variables.html":{}}}],["variables",{"_index":718,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":457,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["versions",{"_index":453,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["vertical",{"_index":120,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["viewcontainer",{"_index":81,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["viewcontainerref",{"_index":82,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["viewport",{"_index":459,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["viewports",{"_index":125,"title":{},"body":{"directives/IfSpanDirective.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["visible",{"_index":64,"title":{},"body":{"directives/IfSpanDirective.html":{},"index.html":{}}}],["visualviewport",{"_index":255,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"changelog.html":{}}}],["void",{"_index":105,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["vs",{"_index":333,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/typealiases.html":{}}}],["warranties",{"_index":674,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":669,"title":{},"body":{"license.html":{}}}],["web",{"_index":625,"title":{},"body":{"index.html":{}}}],["welcome",{"_index":593,"title":{},"body":{"index.html":{}}}],["whether",{"_index":687,"title":{},"body":{"license.html":{}}}],["width",{"_index":416,"title":{},"body":{"directives/WindowDirective.html":{}}}],["window",{"_index":193,"title":{"interfaces/Window.html":{}},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["window.directive",{"_index":36,"title":{},"body":{"modules/FoldableModule.html":{}}}],["window.innerheight",{"_index":262,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["window.innerwidth",{"_index":261,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["window.pagexoffset",{"_index":259,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["window.pageyoffset",{"_index":260,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["window.visualviewport",{"_index":257,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["windowdirective",{"_index":10,"title":{"directives/WindowDirective.html":{}},"body":{"modules/FoldableModule.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"overview.html":{}}}],["windoworder",{"_index":292,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["windoworder.isvalid(order",{"_index":387,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["windoworder.normal",{"_index":306,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/variables.html":{}}}],["windoworder.reverse",{"_index":335,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/variables.html":{}}}],["windowsegments",{"_index":180,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["within",{"_index":401,"title":{},"body":{"directives/WindowDirective.html":{}}}],["without",{"_index":646,"title":{},"body":{"license.html":{}}}],["work",{"_index":547,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["yohan",{"_index":632,"title":{},"body":{"license.html":{},"properties.html":{}}}],["you're",{"_index":592,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":11,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/FoldableModule.html":{"url":"modules/FoldableModule.html","title":"module - FoldableModule","body":"\n                   \n\n\n\n\n    Modules\n    FoldableModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_FoldableModule\n\n\n\ncluster_FoldableModule_exports\n\n\n\ncluster_FoldableModule_declarations\n\n\n\n\nIfSpanDirective\n\nIfSpanDirective\n\n\n\nFoldableModule\n\nFoldableModule\n\nFoldableModule -->\n\nIfSpanDirective->FoldableModule\n\n\n\n\n\nSplitLayoutDirective\n\nSplitLayoutDirective\n\nFoldableModule -->\n\nSplitLayoutDirective->FoldableModule\n\n\n\n\n\nWindowDirective\n\nWindowDirective\n\nFoldableModule -->\n\nWindowDirective->FoldableModule\n\n\n\n\n\nIfSpanDirective \n\nIfSpanDirective \n\nIfSpanDirective  -->\n\nFoldableModule->IfSpanDirective \n\n\n\n\n\nSplitLayoutDirective \n\nSplitLayoutDirective \n\nSplitLayoutDirective  -->\n\nFoldableModule->SplitLayoutDirective \n\n\n\n\n\nWindowDirective \n\nWindowDirective \n\nWindowDirective  -->\n\nFoldableModule->WindowDirective \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/lib/src/core/foldable.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            This module contains utilities to help you build your app layout for multi\nscreen devices.\nSee SplitLayoutDirective,\nWindowDirective,\nIfSpanDirective,\nScreenContext\n\n        \n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            IfSpanDirective\n                        \n                        \n                            SplitLayoutDirective\n                        \n                        \n                            WindowDirective\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            IfSpanDirective\n                        \n                        \n                            SplitLayoutDirective\n                        \n                        \n                            WindowDirective\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { IfSpanDirective } from './if-span.directive';\nimport { WindowDirective } from './window.directive';\nimport { SplitLayoutDirective } from './split-layout.directive';\n\n/**\n * This module contains utilities to help you build your app layout for multi\n * screen devices.\n *\n * See {@link SplitLayoutDirective},\n * {@link WindowDirective},\n * {@link IfSpanDirective},\n * {@link ScreenContext}\n */\n@NgModule({\n  declarations: [IfSpanDirective, WindowDirective, SplitLayoutDirective],\n  exports: [IfSpanDirective, WindowDirective, SplitLayoutDirective],\n})\nexport class FoldableModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/IfSpanDirective.html":{"url":"directives/IfSpanDirective.html","title":"directive - IfSpanDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  IfSpanDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/lib/src/core/if-span.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                Shows template only if the current screen spanning mode matches\nspecified SpanCondition.\nBehaves like ngIf, except that it accepts a SpanCondition instead of\na boolean expression.\nThis text will only be visible on multi screen devices.\n```html\nThis text will only be visible on single screen devices.\nThis text will only be visible on multi screen devices.\n            \n\n\n            \n                Implements\n            \n            \n                            OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [fdIfSpan]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnDestroy\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                fdIfSpan\n                            \n                            \n                                fdIfSpanElse\n                            \n                            \n                                fdIfSpanThen\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    fdIfSpan\n                                \n                                \n                                    fdIfSpanThen\n                                \n                                \n                                    fdIfSpanElse\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(screenContext: ScreenContext, viewContainer: ViewContainerRef, templateRef: TemplateRef)\n                    \n                \n                        \n                            \n                                Defined in projects/lib/src/core/if-span.directive.ts:85\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        screenContext\n                                                  \n                                                        \n                                                                        ScreenContext\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        viewContainer\n                                                  \n                                                        \n                                                                        ViewContainerRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        templateRef\n                                                  \n                                                        \n                                                                    TemplateRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        fdIfSpan\n                    \n                \n                \n                    \n                        Type :         SpanCondition\n\n                    \n                \n                        \n                            \n                                    Defined in projects/lib/src/core/if-span.directive.ts:64\n                            \n                        \n                \n                    \n                        The spanning mode condition that defines if the template should be shown.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        fdIfSpanElse\n                    \n                \n                \n                    \n                        Type :     TemplateRef | null\n\n                    \n                \n                        \n                            \n                                    Defined in projects/lib/src/core/if-span.directive.ts:81\n                            \n                        \n                \n                    \n                        A template to show if the span condition evaluates to false.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        fdIfSpanThen\n                    \n                \n                \n                    \n                        Type :     TemplateRef | null\n\n                    \n                \n                        \n                            \n                                    Defined in projects/lib/src/core/if-span.directive.ts:73\n                            \n                        \n                \n                    \n                        A template to show if the span condition evaluates to true.\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in projects/lib/src/core/if-span.directive.ts:99\n                \n            \n\n\n            \n                \n                    ignore\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        fdIfSpan\n                    \n                \n\n\n                \n                    \n                        setfdIfSpan(condition: SpanCondition)\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/if-span.directive.ts:64\n                                \n                            \n                    \n                        \n                                The spanning mode condition that defines if the template should be shown.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                        Description\n                                                \n                                            \n                                            \n                                                    \n                                                            condition\n                                                    \n                                                            \n                                                                            SpanCondition\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                            \n                                                                    The spanning mode condition for showing the template.\n\n                                                            \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        fdIfSpanThen\n                    \n                \n\n\n                \n                    \n                        setfdIfSpanThen(templateRef: TemplateRef | null)\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/if-span.directive.ts:73\n                                \n                            \n                    \n                        \n                                A template to show if the span condition evaluates to true.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            templateRef\n                                                    \n                                                            \n                                                                        TemplateRef | null\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        fdIfSpanElse\n                    \n                \n\n\n                \n                    \n                        setfdIfSpanElse(templateRef: TemplateRef | null)\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/if-span.directive.ts:81\n                                \n                            \n                    \n                        \n                                A template to show if the span condition evaluates to false.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            templateRef\n                                                    \n                                                            \n                                                                        TemplateRef | null\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n    \n\n\n    \n        import {\n  Directive,\n  EmbeddedViewRef,\n  Input,\n  OnDestroy,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { ScreenContext } from './screen-context';\nimport { ScreenSpanning } from './screen-spanning';\n\n/** Spanning mode conditions for use with {@link IfSpanDirective}. */\nexport type SpanCondition =\n  | 'dual-horizontal'\n  | 'dual-vertical'\n  | 'none'\n  | 'multi';\n/**\n * Enumeration of spanning mode conditions values for use with\n * {@link IfSpanDirective}.\n */\nexport const SpanCondition = {\n  /** Screen spanning mode is dual horizontal viewports. */\n  Vertical: 'dual-horizontal' as SpanCondition,\n  /** Screen spanning mode is dual vertical viewports. */\n  Horizontal: 'dual-vertical' as SpanCondition,\n  /** No screen spanning (single screen mode). */\n  None: 'none' as SpanCondition,\n  /** Any screen spanning mode is active (multi screen mode). */\n  Multi: 'multi' as SpanCondition,\n};\n\n/**\n * Shows template only if the current screen spanning mode matches\n * specified {@link SpanCondition}.\n *\n * Behaves like `ngIf`, except that it accepts a {@link SpanCondition} instead of\n * a boolean expression.\n *\n * @example\n * This text will only be visible on multi screen devices.\n * @example\n * This text will only be visible on single screen devices.\n * This text will only be visible on multi screen devices.\n */\n@Directive({\n  selector: '[fdIfSpan]',\n})\nexport class IfSpanDirective implements OnDestroy {\n  private screenContextSubscription: Subscription | null = null;\n  private condition: SpanCondition | null = null;\n  private thenTemplateRef: TemplateRef | null = null;\n  private elseTemplateRef: TemplateRef | null = null;\n  private thenViewRef: EmbeddedViewRef | null = null;\n  private elseViewRef: EmbeddedViewRef | null = null;\n\n  /**\n   * The spanning mode condition that defines if the template should be shown.\n   *\n   * @param condition The spanning mode condition for showing the template.\n   */\n  @Input()\n  set fdIfSpan(condition: SpanCondition) {\n    if (condition !== this.condition) {\n      this.condition = condition;\n      this.updateView();\n    }\n  }\n\n  /** A template to show if the span condition evaluates to true. */\n  @Input()\n  set fdIfSpanThen(templateRef: TemplateRef | null) {\n    this.thenTemplateRef = templateRef;\n    this.thenViewRef = null;\n    this.updateView();\n  }\n\n  /** A template to show if the span condition evaluates to false. */\n  @Input()\n  set fdIfSpanElse(templateRef: TemplateRef | null) {\n    this.elseTemplateRef = templateRef;\n    this.thenViewRef = null;\n    this.updateView();\n  }\n\n  constructor(\n    private screenContext: ScreenContext,\n    private viewContainer: ViewContainerRef,\n    templateRef: TemplateRef\n  ) {\n    this.thenTemplateRef = templateRef;\n    this.screenContextSubscription = this.screenContext\n      .asObservable()\n      .subscribe(() => this.updateView());\n  }\n\n  /** ignore */\n  ngOnDestroy() {\n    if (this.screenContextSubscription !== null) {\n      this.screenContextSubscription.unsubscribe();\n    }\n  }\n\n  private matchCondition(): boolean {\n    switch (this.condition) {\n      case SpanCondition.Multi:\n        return this.screenContext.isMultiScreen;\n      case SpanCondition.Horizontal:\n        return this.screenContext.screenSpanning === ScreenSpanning.DualVertical;\n      case SpanCondition.Vertical:\n        return this.screenContext.screenSpanning === ScreenSpanning.DualHorizontal;\n      default:\n        return this.screenContext.screenSpanning === ScreenSpanning.None;\n    }\n  }\n\n  private updateView() {\n    const match = this.matchCondition();\n\n    if (match) {\n      if (!this.thenViewRef) {\n        this.viewContainer.clear();\n        this.elseViewRef = null;\n        if (this.thenTemplateRef) {\n          this.thenViewRef = this.viewContainer.createEmbeddedView(\n            this.thenTemplateRef\n          );\n        }\n      }\n    } else {\n      if (!this.elseViewRef) {\n        this.viewContainer.clear();\n        this.thenViewRef = null;\n        if (this.elseTemplateRef) {\n          this.elseViewRef = this.viewContainer.createEmbeddedView(\n            this.elseTemplateRef\n          );\n        }\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ScreenContext.html":{"url":"injectables/ScreenContext.html","title":"injectable - ScreenContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ScreenContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/lib/src/core/screen-context.ts\n        \n\n\n            \n                Description\n            \n            \n                This service allows to query and receive updates about current device's\nscreen context.\nSee ScreenContextData\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                asObject\n                            \n                            \n                                asObservable\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    windowSegments\n                                \n                                \n                                    screenSpanning\n                                \n                                \n                                    isMultiScreen\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in projects/lib/src/core/screen-context.ts:37\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        asObject\n                        \n                    \n                \n            \n            \n                \nasObject()\n                \n            \n\n\n            \n                \n                    Defined in projects/lib/src/core/screen-context.ts:96\n                \n            \n\n\n            \n                \n                    Gets the current screen context.\n\n\n                    \n                        Returns :         ScreenContextData\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        asObservable\n                        \n                    \n                \n            \n            \n                \nasObservable()\n                \n            \n\n\n            \n                \n                    Defined in projects/lib/src/core/screen-context.ts:89\n                \n            \n\n\n            \n                \n                    Gets an observable emitting when the screen context changes.\n\n\n                    \n                        Returns :         Observable\n\n                    \n                \n            \n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        windowSegments\n                    \n                \n\n                \n                    \n                        getwindowSegments()\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/screen-context.ts:68\n                                \n                            \n                    \n                        \n                                The list of available window segments.\n\n\n                                \n                                    Returns :     DOMRect[]\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        screenSpanning\n                    \n                \n\n                \n                    \n                        getscreenSpanning()\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/screen-context.ts:75\n                                \n                            \n                    \n                        \n                                The current screen spanning mode.\n\n\n                                \n                                    Returns :         ScreenSpanning\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        isMultiScreen\n                    \n                \n\n                \n                    \n                        getisMultiScreen()\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/screen-context.ts:82\n                                \n                            \n                    \n                        \n                                True is current device have multiple screens available.\n\n\n                                \n                                    Returns :         boolean\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Injectable, OnDestroy } from '@angular/core';\nimport { fromEvent, merge, Observable, ReplaySubject } from 'rxjs';\nimport { map, filter, shareReplay, startWith, takeUntil } from 'rxjs/operators';\nimport { dualVerticalViewport, dualHorizontalViewport } from './media-queries';\nimport { ScreenSpanning } from './screen-spanning';\n\ndeclare global {\n  interface Window {\n    getWindowSegments: () => DOMRect[];\n  }\n}\n\n/**\n * Holds information about the device screen context.\n */\nexport interface ScreenContextData {\n  /** The list of available window segments. */\n  readonly windowSegments: DOMRect[];\n  /** The current screen spanning mode. */\n  readonly screenSpanning: ScreenSpanning;\n  /** True is current device have multiple screens available. */\n  readonly isMultiScreen: boolean;\n}\n\n/**\n * This service allows to query and receive updates about current device's\n * screen context.\n *\n * See {@link ScreenContextData}\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ScreenContext implements ScreenContextData, OnDestroy {\n  private currentContext: ScreenContextData;\n  private screenContext$: Observable;\n  private destroyed$: ReplaySubject = new ReplaySubject(1);\n\n  constructor() {\n    this.currentContext = this.getScreenContext();\n    this.screenContext$ = merge(\n      fromEvent(matchMedia(dualVerticalViewport), 'change'),\n      fromEvent(matchMedia(dualHorizontalViewport), 'change')\n    ).pipe(\n      filter(\n        () => this.getScreenSpanning() !== this.currentContext.screenSpanning\n      ),\n      startWith(1),\n      map(() => {\n        this.currentContext = this.getScreenContext();\n        return this.currentContext;\n      }),\n      shareReplay(1),\n      takeUntil(this.destroyed$)\n    );\n    this.screenContext$.subscribe();\n  }\n\n  /** @ignored */\n  ngOnDestroy() {\n    this.destroyed$.next();\n    this.destroyed$.complete();\n  }\n\n  /**\n   * The list of available window segments.\n   */\n  get windowSegments(): DOMRect[] {\n    return this.currentContext.windowSegments;\n  }\n\n  /**\n   * The current screen spanning mode.\n   */\n  get screenSpanning(): ScreenSpanning {\n    return this.currentContext.screenSpanning;\n  }\n\n  /**\n   * True is current device have multiple screens available.\n   */\n  get isMultiScreen(): boolean {\n    return this.currentContext.isMultiScreen;\n  }\n\n  /**\n   * Gets an observable emitting when the screen context changes.\n   */\n  asObservable(): Observable {\n    return this.screenContext$;\n  }\n\n  /**\n   * Gets the current screen context.\n   */\n  asObject(): ScreenContextData {\n    return this.currentContext;\n  }\n\n  private getScreenContext(): ScreenContextData {\n    const windowSegments = this.getWindowSegments();\n    const screenSpanning = this.getScreenSpanning();\n    return {\n      windowSegments,\n      screenSpanning,\n      isMultiScreen: screenSpanning !== ScreenSpanning.None,\n    };\n  }\n\n  private getScreenSpanning(): ScreenSpanning {\n    if (matchMedia(dualVerticalViewport).matches) {\n      return ScreenSpanning.DualVertical;\n    } else if (matchMedia(dualHorizontalViewport).matches) {\n      return ScreenSpanning.DualHorizontal;\n    }\n    return ScreenSpanning.None;\n  }\n\n  private getWindowSegments(): DOMRect[] {\n    if ('getWindowSegments' in window) {\n      console.warn('getWindowSegments() is not supported anymore, please update your browser to use the new visualViewport API');\n    }\n    if ('visualViewport' in window) {\n      return (window.visualViewport as any).segments;\n    }\n    return [\n      new DOMRect(\n        window.pageXOffset,\n        window.pageYOffset,\n        window.innerWidth,\n        window.innerHeight\n      ),\n    ];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ScreenContextData.html":{"url":"interfaces/ScreenContextData.html","title":"interface - ScreenContextData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ScreenContextData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/lib/src/core/screen-context.ts\n        \n\n\n            \n                Description\n            \n            \n                Holds information about the device screen context.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            isMultiScreen\n                                        \n                                \n                                \n                                        \n                                            screenSpanning\n                                        \n                                \n                                \n                                        \n                                            windowSegments\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isMultiScreen\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isMultiScreen:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    True is current device have multiple screens available.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        screenSpanning\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        screenSpanning:         ScreenSpanning\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ScreenSpanning\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The current screen spanning mode.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        windowSegments\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        windowSegments:     DOMRect[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     DOMRect[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The list of available window segments.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, OnDestroy } from '@angular/core';\nimport { fromEvent, merge, Observable, ReplaySubject } from 'rxjs';\nimport { map, filter, shareReplay, startWith, takeUntil } from 'rxjs/operators';\nimport { dualVerticalViewport, dualHorizontalViewport } from './media-queries';\nimport { ScreenSpanning } from './screen-spanning';\n\ndeclare global {\n  interface Window {\n    getWindowSegments: () => DOMRect[];\n  }\n}\n\n/**\n * Holds information about the device screen context.\n */\nexport interface ScreenContextData {\n  /** The list of available window segments. */\n  readonly windowSegments: DOMRect[];\n  /** The current screen spanning mode. */\n  readonly screenSpanning: ScreenSpanning;\n  /** True is current device have multiple screens available. */\n  readonly isMultiScreen: boolean;\n}\n\n/**\n * This service allows to query and receive updates about current device's\n * screen context.\n *\n * See {@link ScreenContextData}\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ScreenContext implements ScreenContextData, OnDestroy {\n  private currentContext: ScreenContextData;\n  private screenContext$: Observable;\n  private destroyed$: ReplaySubject = new ReplaySubject(1);\n\n  constructor() {\n    this.currentContext = this.getScreenContext();\n    this.screenContext$ = merge(\n      fromEvent(matchMedia(dualVerticalViewport), 'change'),\n      fromEvent(matchMedia(dualHorizontalViewport), 'change')\n    ).pipe(\n      filter(\n        () => this.getScreenSpanning() !== this.currentContext.screenSpanning\n      ),\n      startWith(1),\n      map(() => {\n        this.currentContext = this.getScreenContext();\n        return this.currentContext;\n      }),\n      shareReplay(1),\n      takeUntil(this.destroyed$)\n    );\n    this.screenContext$.subscribe();\n  }\n\n  /** @ignored */\n  ngOnDestroy() {\n    this.destroyed$.next();\n    this.destroyed$.complete();\n  }\n\n  /**\n   * The list of available window segments.\n   */\n  get windowSegments(): DOMRect[] {\n    return this.currentContext.windowSegments;\n  }\n\n  /**\n   * The current screen spanning mode.\n   */\n  get screenSpanning(): ScreenSpanning {\n    return this.currentContext.screenSpanning;\n  }\n\n  /**\n   * True is current device have multiple screens available.\n   */\n  get isMultiScreen(): boolean {\n    return this.currentContext.isMultiScreen;\n  }\n\n  /**\n   * Gets an observable emitting when the screen context changes.\n   */\n  asObservable(): Observable {\n    return this.screenContext$;\n  }\n\n  /**\n   * Gets the current screen context.\n   */\n  asObject(): ScreenContextData {\n    return this.currentContext;\n  }\n\n  private getScreenContext(): ScreenContextData {\n    const windowSegments = this.getWindowSegments();\n    const screenSpanning = this.getScreenSpanning();\n    return {\n      windowSegments,\n      screenSpanning,\n      isMultiScreen: screenSpanning !== ScreenSpanning.None,\n    };\n  }\n\n  private getScreenSpanning(): ScreenSpanning {\n    if (matchMedia(dualVerticalViewport).matches) {\n      return ScreenSpanning.DualVertical;\n    } else if (matchMedia(dualHorizontalViewport).matches) {\n      return ScreenSpanning.DualHorizontal;\n    }\n    return ScreenSpanning.None;\n  }\n\n  private getWindowSegments(): DOMRect[] {\n    if ('getWindowSegments' in window) {\n      console.warn('getWindowSegments() is not supported anymore, please update your browser to use the new visualViewport API');\n    }\n    if ('visualViewport' in window) {\n      return (window.visualViewport as any).segments;\n    }\n    return [\n      new DOMRect(\n        window.pageXOffset,\n        window.pageYOffset,\n        window.innerWidth,\n        window.innerHeight\n      ),\n    ];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/SplitLayoutDirective.html":{"url":"directives/SplitLayoutDirective.html","title":"directive - SplitLayoutDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  SplitLayoutDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/lib/src/core/split-layout.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                Defines a parent layout container for creating a split layout on multi\nscreen devices.\nWhen used on a single screen device, no layout change (CSS) is added.\nYou can choose between different SplitLayoutMode to suit your\ndesign.\nThis directive should be used along with WindowDirective.\n\n             Will be displayed on first screen\n             Will be displayed on second screen (if available)\nIn addition, you can also choose keep the same window segments order or\nreverse it when the spanning mode change from vertical to horizontal using\na second optional parameter on the directive:\n\n             \n               Will be displayed on first screen in vertical spanning mode\n               and on the second screen in horizontal spanning mode.\n             \n             \n               Will be displayed on second screen in vertical spanning mode\n               and on the first screen in horizontal spanning mode.\n             \n\n            \n\n\n            \n                Implements\n            \n            \n                            OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [fdSplitLayout]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                fdSplitLayout\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    fdSplitLayout\n                                \n                                \n                                    layoutMode\n                                \n                                \n                                    windowOrder\n                                \n                                \n                                    readingDirection\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(element: ElementRef, screenContext: ScreenContext)\n                    \n                \n                        \n                            \n                                Defined in projects/lib/src/core/split-layout.directive.ts:205\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        element\n                                                  \n                                                        \n                                                                        ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        screenContext\n                                                  \n                                                        \n                                                                        ScreenContext\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        fdSplitLayout\n                    \n                \n                \n                    \n                        Type :     string | undefined\n\n                    \n                \n                        \n                            \n                                    Defined in projects/lib/src/core/split-layout.directive.ts:196\n                            \n                        \n                \n                    \n                        Sets the current split layout options to use when multi screen is\ndetected.\nFormat: [mode] [order]\n\nThe SplitLayoutMode to use (default is SplitLayoutMode.Flex).\nThe WindowOrder to use (default is WindowOrder.Normal).\n\n\n                    \n                \n            \n        \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        fdSplitLayout\n                    \n                \n\n\n                \n                    \n                        setfdSplitLayout(options: string | undefined)\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/split-layout.directive.ts:196\n                                \n                            \n                    \n                        \n                                Sets the current split layout options to use when multi screen is\ndetected.\nFormat: [mode] [order]\n\nThe SplitLayoutMode to use (default is SplitLayoutMode.Flex).\nThe WindowOrder to use (default is WindowOrder.Normal).\n\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                        Description\n                                                \n                                            \n                                            \n                                                    \n                                                            options\n                                                    \n                                                            \n                                                                        string | undefined\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                            \n                                                                    The split layout options to use.\nFormat: [mode] [order]\n\nThe SplitLayoutMode to use (default is SplitLayoutMode.Flex).\nThe WindowOrder to use (default is WindowOrder.Normal).\n\n\n                                                            \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        layoutMode\n                    \n                \n\n                \n                    \n                        getlayoutMode()\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/split-layout.directive.ts:222\n                                \n                            \n                    \n                        \n                                The current split layout mode to use when multi screen is detected.\n\n\n                                \n                                \n                                \n                                    Returns :         SplitLayoutMode\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        windowOrder\n                    \n                \n\n                \n                    \n                        getwindowOrder()\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/split-layout.directive.ts:231\n                                \n                            \n                    \n                        \n                                The window segments order to use when in horizontal spanning mode.\n\n\n                                \n                                \n                                \n                                    Returns :         WindowOrder\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        readingDirection\n                    \n                \n\n                \n                    \n                        getreadingDirection()\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/split-layout.directive.ts:240\n                                \n                            \n                    \n                        \n                                The text reading direction for the host element.\n\n\n                                \n                                \n                                \n                                    Returns :         ReadingDirection\n\n                                \n                        \n                    \n\n            \n        \n\n\n    \n\n\n    \n        import {\n  Directive,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnDestroy,\n} from '@angular/core';\nimport { SafeStyle } from '@angular/platform-browser';\nimport { Subscription } from 'rxjs';\nimport { ScreenContext } from './screen-context';\nimport { ScreenSpanning } from './screen-spanning';\n\n/**\n * Defines how the split layout container should be rendered when multi screen\n * is detected.\n * See {@link SplitLayoutDirective}\n */\nexport type SplitLayoutMode = 'flex' | 'grid' | 'absolute';\n/**\n * Enumeration of split layout modes values for use with\n * {@link SplitLayoutDirective}.\n */\nexport const SplitLayoutMode = {\n  Flex: 'flex' as SplitLayoutMode,\n  Grid: 'grid' as SplitLayoutMode,\n  Absolute: 'absolute' as SplitLayoutMode,\n\n  /**\n   * Checks if the given string value is a valid {@link SplitLayoutMode}.\n   *\n   * @param value The value to check.\n   * @return true if the value is a valid {@link SplitLayoutMode}.\n   */\n  isValid: (value: string): boolean => {\n    switch (value) {\n      case SplitLayoutMode.Flex:\n      case SplitLayoutMode.Grid:\n      case SplitLayoutMode.Absolute:\n        return true;\n    }\n    return false;\n  },\n};\n\n/**\n * Defines how the split layout container should order the window segments\n * when in horizontal spanning mode vs vertical spanning mode.\n * See {@link SplitLayoutDirective}\n */\nexport type WindowOrder = 'normal' | 'reverse';\n/**\n * Enumeration of window order values for use with\n * {@link SplitLayoutDirective}.\n */\nexport const WindowOrder = {\n  Normal: 'normal' as WindowOrder,\n  Reverse: 'reverse' as WindowOrder,\n\n  /**\n   * Checks if the given string value is a valid {@link WindowOrder}.\n   *\n   * @param value The value to check.\n   * @return true if the value is a valid {@link WindowOrder}.\n   */\n  isValid: (value: string): boolean => {\n    switch (value) {\n      case WindowOrder.Normal:\n      case WindowOrder.Reverse:\n        return true;\n    }\n    return false;\n  },\n};\n\n/**\n * Defines the text reading direction for the host element.\n */\nexport type ReadingDirection = 'ltr' | 'rtl';\n/**\n * Enumeration of the text reading direction values.\n */\nexport const ReadingDirection = {\n  LeftToRight: 'ltr' as ReadingDirection,\n  RightToLeft: 'rtl' as ReadingDirection,\n};\n\n/**\n * Look 'ma, CSS-in-JS with Angular! ಠ_ಠ\n *\n * @ignore\n */\nconst layoutStyles = {\n  [SplitLayoutMode.Flex]: {\n    common: {\n      display: 'flex',\n      justifyContent: 'space-between',\n      height: 'env(viewport-segment-bottom 0 1)',\n    },\n    [ScreenSpanning.DualHorizontal]: {\n      flexDirection: 'row',\n    },\n    [ScreenSpanning.DualVertical]: {\n      flexDirection: 'column',\n    },\n    [WindowOrder.Reverse]: {\n      flexDirection: 'column-reverse',\n    },\n  },\n  [SplitLayoutMode.Grid]: {\n    common: {\n      display: 'grid',\n      height: 'env(viewport-segment-bottom 0 1)',\n    },\n    [ScreenSpanning.DualHorizontal]: {\n      gridTemplateColumns: '1fr 1fr',\n      gridTemplateAreas: '\"segment0 segment1\"',\n      gridAutoFlow: 'row',\n      columnGap: 'calc(env(viewport-segment-left 1 0) - env(viewport-segment-right 0 0))',\n    },\n    [ScreenSpanning.DualVertical]: {\n      gridTemplateRows: '1fr 1fr',\n      gridTemplateAreas: '\"segment0\" \"segment1\"',\n      gridAutoFlow: 'row',\n      rowGap: 'calc(env(viewport-segment-top 0 1) - env(viewport-segment-bottom 0 0))',\n    },\n    [WindowOrder.Reverse]: {\n      gridTemplateRows: '1fr 1fr',\n      gridTemplateAreas: '\"segment0\" \"segment1\"',\n      gridAutoFlow: 'row',\n      rowGap: 'calc(env(viewport-segment-top 0 1) - env(viewport-segment-bottom 0 0))',\n    },\n  },\n  [SplitLayoutMode.Absolute]: {\n    common: {\n      position: 'relative',\n      height: 'env(viewport-segment-bottom 0 1)',\n    },\n    [ScreenSpanning.DualHorizontal]: {},\n    [ScreenSpanning.DualVertical]: {},\n    [WindowOrder.Reverse]: {},\n  },\n};\n\n/**\n * Defines a parent layout container for creating a split layout on multi\n * screen devices.\n *\n * When used on a single screen device, no layout change (CSS) is added.\n * You can choose between different {@link SplitLayoutMode} to suit your\n * design.\n *\n * This directive should be used along with {@link WindowDirective}.\n *\n * @example\n * \n *              Will be displayed on first screen\n *              Will be displayed on second screen (if available)\n * \n *\n * In addition, you can also choose keep the same window segments order or\n * reverse it when the spanning mode change from vertical to horizontal using\n * a second optional parameter on the directive:\n *\n * @example\n * \n *              \n *                Will be displayed on first screen in vertical spanning mode\n *                and on the second screen in horizontal spanning mode.\n *              \n *              \n *                Will be displayed on second screen in vertical spanning mode\n *                and on the first screen in horizontal spanning mode.\n *              \n * \n */\n@Directive({\n  selector: '[fdSplitLayout]',\n})\nexport class SplitLayoutDirective implements OnDestroy {\n  private mode: SplitLayoutMode = SplitLayoutMode.Flex;\n  private order: WindowOrder = WindowOrder.Normal;\n  private layoutStyle: SafeStyle = {};\n  private screenContextSubscription: Subscription | null = null;\n  private direction: ReadingDirection = 'ltr';\n\n  /**\n   * Sets the current split layout options to use when multi screen is\n   * detected.\n   *\n   * @param options The split layout options to use.\n   * Format: `[mode] [order]`\n   * - The {@link SplitLayoutMode} to use (default is {@link SplitLayoutMode.Flex}).\n   * - The {@link WindowOrder} to use (default is {@link WindowOrder.Normal}).\n   */\n  @Input()\n  set fdSplitLayout(options: string | undefined) {\n    this.parseOptions(options || '');\n    this.updateStyle();\n  }\n\n  /** @ignore */\n  @HostBinding('style')\n  get style(): SafeStyle {\n    return this.layoutStyle;\n  }\n\n  constructor(\n    private element: ElementRef,\n    private screenContext: ScreenContext\n  ) {\n    this.updateStyle();\n    this.screenContextSubscription = this.screenContext\n      .asObservable()\n      .subscribe(() => this.updateStyle());\n  }\n\n  /**\n   * The current split layout mode to use when multi screen is detected.\n   *\n   * @return The current split layout mode.\n   */\n  get layoutMode(): SplitLayoutMode {\n    return this.mode;\n  }\n\n  /**\n   * The window segments order to use when in horizontal spanning mode.\n   *\n   * @return The current window order.\n   */\n  get windowOrder(): WindowOrder {\n    return this.order;\n  }\n\n  /**\n   * The text reading direction for the host element.\n   *\n   * @return The text reading direction.\n   */\n  get readingDirection(): ReadingDirection {\n    return this.direction;\n  }\n\n  /** @ignore */\n  ngOnDestroy() {\n    if (this.screenContextSubscription !== null) {\n      this.screenContextSubscription.unsubscribe();\n    }\n  }\n\n  private parseOptions(options: string) {\n    let [mode, order] = options.trim().split(' ');\n    mode = SplitLayoutMode.isValid(mode) ? mode : SplitLayoutMode.Flex;\n    order = WindowOrder.isValid(order) ? order : WindowOrder.Normal;\n    this.mode = mode as SplitLayoutMode;\n    this.order = order as WindowOrder;\n  }\n\n  private updateStyle() {\n    const isMultiScreen = this.screenContext.isMultiScreen;\n    const spanning = this.screenContext.screenSpanning;\n    const reverse =\n      spanning === ScreenSpanning.DualVertical &&\n      this.order === WindowOrder.Reverse;\n\n    this.direction =\n      (getComputedStyle(this.element.nativeElement)\n        ?.direction as ReadingDirection) || ReadingDirection.LeftToRight;\n\n    if (isMultiScreen && spanning !== ScreenSpanning.None) {\n      this.layoutStyle = {\n        ...layoutStyles[this.mode].common,\n        ...layoutStyles[this.mode][reverse ? WindowOrder.Reverse : spanning],\n      };\n    } else {\n      this.layoutStyle = {};\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Window.html":{"url":"interfaces/Window.html","title":"interface - Window","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Window\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/lib/src/core/screen-context.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            getWindowSegments\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        getWindowSegments\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getWindowSegments:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, OnDestroy } from '@angular/core';\nimport { fromEvent, merge, Observable, ReplaySubject } from 'rxjs';\nimport { map, filter, shareReplay, startWith, takeUntil } from 'rxjs/operators';\nimport { dualVerticalViewport, dualHorizontalViewport } from './media-queries';\nimport { ScreenSpanning } from './screen-spanning';\n\ndeclare global {\n  interface Window {\n    getWindowSegments: () => DOMRect[];\n  }\n}\n\n/**\n * Holds information about the device screen context.\n */\nexport interface ScreenContextData {\n  /** The list of available window segments. */\n  readonly windowSegments: DOMRect[];\n  /** The current screen spanning mode. */\n  readonly screenSpanning: ScreenSpanning;\n  /** True is current device have multiple screens available. */\n  readonly isMultiScreen: boolean;\n}\n\n/**\n * This service allows to query and receive updates about current device's\n * screen context.\n *\n * See {@link ScreenContextData}\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ScreenContext implements ScreenContextData, OnDestroy {\n  private currentContext: ScreenContextData;\n  private screenContext$: Observable;\n  private destroyed$: ReplaySubject = new ReplaySubject(1);\n\n  constructor() {\n    this.currentContext = this.getScreenContext();\n    this.screenContext$ = merge(\n      fromEvent(matchMedia(dualVerticalViewport), 'change'),\n      fromEvent(matchMedia(dualHorizontalViewport), 'change')\n    ).pipe(\n      filter(\n        () => this.getScreenSpanning() !== this.currentContext.screenSpanning\n      ),\n      startWith(1),\n      map(() => {\n        this.currentContext = this.getScreenContext();\n        return this.currentContext;\n      }),\n      shareReplay(1),\n      takeUntil(this.destroyed$)\n    );\n    this.screenContext$.subscribe();\n  }\n\n  /** @ignored */\n  ngOnDestroy() {\n    this.destroyed$.next();\n    this.destroyed$.complete();\n  }\n\n  /**\n   * The list of available window segments.\n   */\n  get windowSegments(): DOMRect[] {\n    return this.currentContext.windowSegments;\n  }\n\n  /**\n   * The current screen spanning mode.\n   */\n  get screenSpanning(): ScreenSpanning {\n    return this.currentContext.screenSpanning;\n  }\n\n  /**\n   * True is current device have multiple screens available.\n   */\n  get isMultiScreen(): boolean {\n    return this.currentContext.isMultiScreen;\n  }\n\n  /**\n   * Gets an observable emitting when the screen context changes.\n   */\n  asObservable(): Observable {\n    return this.screenContext$;\n  }\n\n  /**\n   * Gets the current screen context.\n   */\n  asObject(): ScreenContextData {\n    return this.currentContext;\n  }\n\n  private getScreenContext(): ScreenContextData {\n    const windowSegments = this.getWindowSegments();\n    const screenSpanning = this.getScreenSpanning();\n    return {\n      windowSegments,\n      screenSpanning,\n      isMultiScreen: screenSpanning !== ScreenSpanning.None,\n    };\n  }\n\n  private getScreenSpanning(): ScreenSpanning {\n    if (matchMedia(dualVerticalViewport).matches) {\n      return ScreenSpanning.DualVertical;\n    } else if (matchMedia(dualHorizontalViewport).matches) {\n      return ScreenSpanning.DualHorizontal;\n    }\n    return ScreenSpanning.None;\n  }\n\n  private getWindowSegments(): DOMRect[] {\n    if ('getWindowSegments' in window) {\n      console.warn('getWindowSegments() is not supported anymore, please update your browser to use the new visualViewport API');\n    }\n    if ('visualViewport' in window) {\n      return (window.visualViewport as any).segments;\n    }\n    return [\n      new DOMRect(\n        window.pageXOffset,\n        window.pageYOffset,\n        window.innerWidth,\n        window.innerHeight\n      ),\n    ];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/WindowDirective.html":{"url":"directives/WindowDirective.html","title":"directive - WindowDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  WindowDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/lib/src/core/window.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                This directive is used to set specify on which window segment the container\nshould be placed on multi screen devices.\nWhen used on a single screen device, no layout change (CSS) is added.\nOnly devices with up to two screen are currently supported, meaning that the\nwindow segment value must be either 0 or 1.\nThis directive can only be used within a SplitLayoutDirective.\nIf SplitLayoutMode is set to absolute, you can assign multiple\ncontainer element to the same window segment.\nNote that if you have set the read direction to Right-To-Left mode (rtl)\nin CSS, the first segment will be the rightmost one.\nIf the WindowOrder option is set to WindowOrder.Reverse,\nthe window segments order will be reversed in horizontal spanning mode.\n\n             Will be displayed on first screen\n             Will be displayed on second screen (if available)\n\n            \n\n\n            \n                Implements\n            \n            \n                            OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [fdWindow]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                fdWindow\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    fdWindow\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(screenContext: ScreenContext, splitLayout: SplitLayoutDirective)\n                    \n                \n                        \n                            \n                                Defined in projects/lib/src/core/window.directive.ts:126\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        screenContext\n                                                  \n                                                        \n                                                                        ScreenContext\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        splitLayout\n                                                  \n                                                        \n                                                                        SplitLayoutDirective\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        fdWindow\n                    \n                \n                \n                    \n                        Type :     number | string\n\n                    \n                \n                        \n                            \n                                    Defined in projects/lib/src/core/window.directive.ts:120\n                            \n                        \n                \n                    \n                        Sets the target window segment to display this container on when multi\nscreen is detected.\n\n                    \n                \n            \n        \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        fdWindow\n                    \n                \n\n\n                \n                    \n                        setfdWindow(segment: number | string)\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/window.directive.ts:120\n                                \n                            \n                    \n                        \n                                Sets the target window segment to display this container on when multi\nscreen is detected.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                        Description\n                                                \n                                            \n                                            \n                                                    \n                                                            segment\n                                                    \n                                                            \n                                                                        number | string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                            \n                                                                    The target window segment, must be 0 or 1.\n\n                                                            \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n    \n\n\n    \n        import { Directive, Host, HostBinding, Input, OnDestroy } from '@angular/core';\nimport { SafeStyle } from '@angular/platform-browser';\nimport { Subscription } from 'rxjs';\nimport { ScreenContext } from './screen-context';\nimport { ScreenSpanning } from './screen-spanning';\nimport {\n  ReadingDirection,\n  SplitLayoutDirective,\n  SplitLayoutMode,\n  WindowOrder,\n} from './split-layout.directive';\n\n/**\n * Look 'ma, CSS-in-JS with Angular! ಠ_ಠ\n *\n * @ignore\n */\nconst layoutStyles = {\n  [SplitLayoutMode.Flex]: {\n    [ScreenSpanning.DualHorizontal]: [\n      { flex: '0 0 env(viewport-segment-width 0 0)' },\n      { flex: '0 0 env(viewport-segment-width 1 0)' },\n    ],\n    [ScreenSpanning.DualVertical]: [\n      { flex: '0 0 env(viewport-segment-height 0 0)' },\n      { flex: '0 0 env(viewport-segment-height 0 1)' },\n    ],\n  },\n  [SplitLayoutMode.Grid]: {\n    [ScreenSpanning.DualHorizontal]: [\n      { gridArea: 'segment0' },\n      { gridArea: 'segment1' },\n    ],\n    [ScreenSpanning.DualVertical]: [\n      {\n        gridArea: 'segment0',\n        height: 'env(viewport-segment-height 0 0)'\n      },\n      {\n        gridArea: 'segment1',\n        height: 'env(viewport-segment-height 0 1)'\n      },\n    ],\n  },\n  [SplitLayoutMode.Absolute]: {\n    [ScreenSpanning.DualHorizontal]: [\n      {\n        position: 'absolute',\n        left: 0,\n        width: 'env(viewport-segment-right 0 0)',\n      },\n      {\n        position: 'absolute',\n        left: 'env(viewport-segment-left 1 0)',\n        right: 0,\n      },\n    ],\n    [ScreenSpanning.DualVertical]: [\n      {\n        position: 'absolute',\n        top: 0,\n        width: '100%',\n        maxHeight: 'env(viewport-segment-height 0 0)',\n      },\n      {\n        position: 'absolute',\n        top: 'env(viewport-segment-top 0 1)',\n        width: '100%',\n        maxHeight: 'env(viewport-segment-height 0 1)',\n      },\n    ],\n  },\n};\n\n/**\n * This directive is used to set specify on which window segment the container\n * should be placed on multi screen devices.\n *\n * When used on a single screen device, no layout change (CSS) is added.\n * Only devices with up to two screen are currently supported, meaning that the\n * window segment value must be either 0 or 1.\n *\n * This directive can only be used within a {@link SplitLayoutDirective}.\n * If {@link SplitLayoutMode} is set to `absolute`, you can assign multiple\n * container element to the same window segment.\n *\n * Note that if you have set the read direction to Right-To-Left mode (`rtl`)\n * in CSS, the first segment will be the rightmost one.\n *\n * If the {@link WindowOrder} option is set to {@link WindowOrder.Reverse},\n * the window segments order will be reversed in horizontal spanning mode.\n *\n * @example\n * \n *              Will be displayed on first screen\n *              Will be displayed on second screen (if available)\n * \n */\n@Directive({\n  selector: '[fdWindow]',\n})\nexport class WindowDirective implements OnDestroy {\n  private segment = -1;\n  private layoutStyle: SafeStyle = {};\n  private screenContextSubscription: Subscription | null = null;\n\n  /** @ignore */\n  @HostBinding('style')\n  get style(): SafeStyle {\n    return this.layoutStyle;\n  }\n\n  /**\n   * Sets the target window segment to display this container on when multi\n   * screen is detected.\n   *\n   * @param segment The target window segment, must be 0 or 1.\n   */\n  @Input()\n  set fdWindow(segment: number | string) {\n    segment = typeof segment === 'string' ? parseInt(segment, 10) : segment;\n    if (segment !== this.segment) {\n      this.segment = segment;\n      this.updateStyle();\n    }\n  }\n\n  constructor(\n    private screenContext: ScreenContext,\n    @Host() private splitLayout: SplitLayoutDirective\n  ) {\n    this.screenContextSubscription = this.screenContext\n      .asObservable()\n      .subscribe(() => this.updateStyle());\n  }\n\n  /** @ignore */\n  ngOnDestroy() {\n    if (this.screenContextSubscription !== null) {\n      this.screenContextSubscription.unsubscribe();\n    }\n  }\n\n  private updateStyle() {\n    if (this.segment === -1) {\n      return;\n    }\n\n    const isMultiScreen = this.screenContext.isMultiScreen;\n    const spanning = this.screenContext.screenSpanning;\n\n    if (isMultiScreen && spanning !== ScreenSpanning.None) {\n      if (this.segment  1) {\n        throw new Error('Segment index must be 0 or 1');\n      }\n\n      const mode = this.splitLayout.layoutMode;\n      const order = this.splitLayout.windowOrder;\n      const direction = this.splitLayout.readingDirection;\n      // Swap segments for vertical span and RTL mode or\n      // horizontal span and reverse window order\n      const swap =\n        (spanning === ScreenSpanning.DualHorizontal &&\n          mode !== SplitLayoutMode.Grid &&\n          direction === ReadingDirection.RightToLeft) ||\n        (spanning === ScreenSpanning.DualVertical &&\n          order === WindowOrder.Reverse);\n\n      const segment = swap ? 1 - this.segment : this.segment;\n      this.layoutStyle = layoutStyles[mode][spanning][segment];\n    } else {\n      this.layoutStyle = {};\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\n3.0.0 (2021-11-25)\nFeatures\n\nrename spanning mode and media queries (66c7a62)\nupgrade to latest APF (5ac1ca9)\n\nBREAKING CHANGES\n\nThis library now requires Angular v13 or latest.\nUse the previous versions of this library if you require compatibility with older Angular version.\nTo better match the new viewport browser API, the spanning modes and media queries have been renamed.\nIt now matches the number of segments on a given axis instead of the fold axis,\nwhich should be less confusing.\n\nYou can migrate by performing these replacements:\n\nScreenSpanning.Vertical -> ScreenSpanning.DualHorizontal\nScreenSpanning.Horizontal -> ScreenSpanning.DualVertical\n'fold-horizontal' -> 'dual-vertical'\n'fold-vertical' -> 'dual-horizontal'\nsingleFoldHorizontal -> dualVerticalViewport\nsingleFoldVertical -> dualHorizontalViewport\n\n2.0.0 (2021-11-22)\nFeatures\n\nremove old APIs support (df1ca39)\nupdate CSS for new APIs (afab1c4)\nupdate media queries to support new css segments API (fc26aae)\nupdate screenContext to support new visualViewport API (a444236)\n\nBREAKING CHANGES\n\nremove old APIs support\n\n1.1.1 (2021-03-19)\nBug Fixes\n\nlayout issues on real devices (8446001)\n\n1.1.0 (2021-03-17)\nBug Fixes\n\ninconsistent layout with rtl and fdIfSpan (1acd46e)\nonly allow valid options for SplitLayoutDirective (3240712)\n\nFeatures\n\nadd option to reverse window order (acb3fff)\n\n1.0.5 (2021-03-16)\nBug Fixes\n\nrefresh on orientation changes and extra repaints (0683aa3)\nscreen context initialization (14da071)\n\n1.0.4 (2021-03-16)\nBug Fixes\n\nissues when using typescript strict mode (b84fc9f)\n\n1.0.3 (2021-03-12)\nBug Fixes\n\nupdate min angular version (d383609)\n\n1.0.2 (2021-03-12)\nBug Fixes\n\nangular min version (4aa85c7)\n\n1.0.1 (2021-03-11)\nBug Fixes\n\ndocs deployment (b1c68ac)\n\n1.0.0 (2021-03-11)\nBug Fixes\n\ndirectives export (536764f)\nfdIfSpan init (7e66b70)\nrevert naming changes (3ee5543)\n\nFeatures\n\nadd RTL support (8bdb155)\nadd ScreenContext first value and fix span check (487885f)\nadd SplitLayout directive (9fadf70)\nadd support for grid and absolute layouts (582e83e)\nadd Window directive (b2a3632)\ndemo test (90ad184)\nfinish demo project (db13ef1)\nimplement fdIfSpan directive (083b648)\nimplement ScreenContext service (466a9d7)\ninitial commit (9ff473a)\ninitial work on service API (962620d)\nupdate to ng 11 (4708aff)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n📖 ngx-foldable\n\n\n\n\n\n\nngx-foldable is a set of components and services to help you build dual-screen experiences for foldable or dual-screen devices, such as the Surface Duo\n\n\n  \n\n\nSee the live demo or read the full documentation.\nHow to test on your browser\nThe dual-screen emulation feature requires latest Microsoft Edge or Google Chrome versions (>= 97).\nIf you have older browser versions, you need to enable experimental flags.\nFollow the instructions here to setup your browser for dual-screen emulation.\nLibrary usage\nCheck out the demo source code to see an example usage of the library.\nAdd the library to your Angular project:\nnpm install ngx-foldableImport the library in your app:\nimport { FoldableModule } from 'ngx-foldable';\n...\n\n@NgModule({\n  ...\n  imports: [\n    FoldableModule\n    ...\n  ],\n  ...\n})\nexport class AppModule { }Use the provided fdSplitLayout, fdWindow and fdIfSpan directives to build your layout:\n\n\n\n  \n  \n    This will be displayed on the first window segment of a multi screen or single screen device.\n    \n    This is only visible on a single screen device.\n    This is only visible on a multi screen device.\n  \n\n  \n  \n    This will be displayed on the second window segment of a multi screen device.\n\n    This is only visible on multi screen device, regardless of the orientation.\n    This is only visible on dual vertical viewports.\n    This is only visible on dual horizontal viewports.\n  \nUsing the ScreenContext service, you can also receive updates when the screen context changes:\nimport { ScreenContext } from 'ngx-foldable';\n...\nexport class AppComponent {\n  constructor(private screenContext: ScreenContext) {\n    this.screenContext\n      .asObservable()\n      .subscribe((context) => {\n        console.log('Screen context changed:', context);\n      });\n  }\n}You can read the full documentation here.\nContributing\nYou're welcome to contribute to this project!\nMake sure you have read the code of conduct before posting an issue or a pull request.\nFollow these steps to run this project locally:\n\nClone the repository on your machine\nRun npm install to install packages\nRun npm start to start the dev server with the demo app\n\nYou can then start making modifications on the library or demo app code.\nRelated work\n\nSurface Duo Photo Gallery: Angular re-implementation of the Surface Duo Photo Gallery sample using this library\nreact-foldable: a similar library built for React\nfoldable-devices/demos: web demos for foldables devices.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nThe MIT License (MIT)\nCopyright (c) 2021 Yohan Lasorsa\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        FoldableModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_FoldableModule\n\n\n\ncluster_FoldableModule_declarations\n\n\n\ncluster_FoldableModule_exports\n\n\n\n\nIfSpanDirective\n\nIfSpanDirective\n\n\n\nFoldableModule\n\nFoldableModule\n\nFoldableModule -->\n\nIfSpanDirective->FoldableModule\n\n\n\n\n\nSplitLayoutDirective\n\nSplitLayoutDirective\n\nFoldableModule -->\n\nSplitLayoutDirective->FoldableModule\n\n\n\n\n\nWindowDirective\n\nWindowDirective\n\nFoldableModule -->\n\nWindowDirective->FoldableModule\n\n\n\n\n\nIfSpanDirective \n\nIfSpanDirective \n\nIfSpanDirective  -->\n\nFoldableModule->IfSpanDirective \n\n\n\n\n\nSplitLayoutDirective \n\nSplitLayoutDirective \n\nSplitLayoutDirective  -->\n\nFoldableModule->SplitLayoutDirective \n\n\n\n\n\nWindowDirective \n\nWindowDirective \n\nWindowDirective  -->\n\nFoldableModule->WindowDirective \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Directives\n                \n            \n        \n        \n            \n                \n                    \n                    1 Injectable\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n        \n            Description : Angular library to help you build dual-screen experiences for foldable or dual-screen devices\n        \n            Keywords : angular, foldable, library, surface, multi-screen, dual-screen, components, helper\n        \n            Homepage : https://github.com/sinedied/ngx-foldable\n        \n            Bugs : https://github.com/sinedied/ngx-foldable/issues\n        \n            License : MIT\n        \n            Repository : https://github.com/sinedied/ngx-foldable.git\n        \n            Author : Yohan Lasorsa\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ReadingDirection   (projects/.../split-layout.directive.ts)\n                        \n                        \n                            ScreenSpanning   (projects/.../screen-spanning.ts)\n                        \n                        \n                            SpanCondition   (projects/.../if-span.directive.ts)\n                        \n                        \n                            SplitLayoutMode   (projects/.../split-layout.directive.ts)\n                        \n                        \n                            WindowOrder   (projects/.../split-layout.directive.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/lib/src/core/split-layout.directive.ts\n    \n    \n        \n            \n                \n                    \n                    ReadingDirection\n                \n            \n            \n                \n                    Defines the text reading direction for the host element.\n\n                \n            \n            \n                \n                        \"ltr\" | \"rtl\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SplitLayoutMode\n                \n            \n            \n                \n                    Defines how the split layout container should be rendered when multi screen\nis detected.\nSee SplitLayoutDirective\n\n                \n            \n            \n                \n                        \"flex\" | \"grid\" | \"absolute\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    WindowOrder\n                \n            \n            \n                \n                    Defines how the split layout container should order the window segments\nwhen in horizontal spanning mode vs vertical spanning mode.\nSee SplitLayoutDirective\n\n                \n            \n            \n                \n                        \"normal\" | \"reverse\"\n\n                \n            \n        \n    \n    projects/lib/src/core/screen-spanning.ts\n    \n    \n        \n            \n                \n                    \n                    ScreenSpanning\n                \n            \n            \n                \n                    Represents the screen spanning mode.\n\n                \n            \n            \n                \n                        \"dual-horizontal\" | \"dual-vertical\" | \"none\"\n\n                \n            \n        \n    \n    projects/lib/src/core/if-span.directive.ts\n    \n    \n        \n            \n                \n                    \n                    SpanCondition\n                \n            \n            \n                \n                    Spanning mode conditions for use with IfSpanDirective.\n\n                \n            \n            \n                \n                        \"dual-horizontal\" | \"dual-vertical\" | \"none\" | \"multi\"\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            dualHorizontalViewport   (projects/.../media-queries.ts)\n                        \n                        \n                            dualVerticalViewport   (projects/.../media-queries.ts)\n                        \n                        \n                            ReadingDirection   (projects/.../split-layout.directive.ts)\n                        \n                        \n                            ScreenSpanning   (projects/.../screen-spanning.ts)\n                        \n                        \n                            SpanCondition   (projects/.../if-span.directive.ts)\n                        \n                        \n                            SplitLayoutMode   (projects/.../split-layout.directive.ts)\n                        \n                        \n                            WindowOrder   (projects/.../split-layout.directive.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/lib/src/core/media-queries.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        dualHorizontalViewport\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '(horizontal-viewport-segments: 2)'\n                    \n                \n\n            \n                \n                    Media query used to detect dual horizontal viewports screen mode.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dualVerticalViewport\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '(vertical-viewport-segments: 2)'\n                    \n                \n\n            \n                \n                    Media query used to detect dual vertical viewports screen mode.\n\n                \n            \n\n        \n    \n\n    projects/lib/src/core/split-layout.directive.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ReadingDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  LeftToRight: 'ltr' as ReadingDirection,\n  RightToLeft: 'rtl' as ReadingDirection,\n}\n                    \n                \n\n            \n                \n                    Enumeration of the text reading direction values.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SplitLayoutMode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  Flex: 'flex' as SplitLayoutMode,\n  Grid: 'grid' as SplitLayoutMode,\n  Absolute: 'absolute' as SplitLayoutMode,\n\n  /**\n   * Checks if the given string value is a valid {@link SplitLayoutMode}.\n   *\n   * @param value The value to check.\n   * @return true if the value is a valid {@link SplitLayoutMode}.\n   */\n  isValid: (value: string): boolean => {\n    switch (value) {\n      case SplitLayoutMode.Flex:\n      case SplitLayoutMode.Grid:\n      case SplitLayoutMode.Absolute:\n        return true;\n    }\n    return false;\n  },\n}\n                    \n                \n\n            \n                \n                    Enumeration of split layout modes values for use with\nSplitLayoutDirective.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        WindowOrder\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  Normal: 'normal' as WindowOrder,\n  Reverse: 'reverse' as WindowOrder,\n\n  /**\n   * Checks if the given string value is a valid {@link WindowOrder}.\n   *\n   * @param value The value to check.\n   * @return true if the value is a valid {@link WindowOrder}.\n   */\n  isValid: (value: string): boolean => {\n    switch (value) {\n      case WindowOrder.Normal:\n      case WindowOrder.Reverse:\n        return true;\n    }\n    return false;\n  },\n}\n                    \n                \n\n            \n                \n                    Enumeration of window order values for use with\nSplitLayoutDirective.\n\n                \n            \n\n        \n    \n\n    projects/lib/src/core/screen-spanning.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ScreenSpanning\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  /** Screen spanning mode is dual horizontal viewports. */\n  DualHorizontal: 'dual-horizontal' as ScreenSpanning,\n  /** Screen spanning mode is dual vertical viewports. */\n  DualVertical: 'dual-vertical' as ScreenSpanning,\n  /** No screen spanning (single screen mode). */\n  None: 'none' as ScreenSpanning,\n}\n                    \n                \n\n            \n                \n                    Enumeration of screen spanning mode values.\n\n                \n            \n\n        \n    \n\n    projects/lib/src/core/if-span.directive.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SpanCondition\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  /** Screen spanning mode is dual horizontal viewports. */\n  Vertical: 'dual-horizontal' as SpanCondition,\n  /** Screen spanning mode is dual vertical viewports. */\n  Horizontal: 'dual-vertical' as SpanCondition,\n  /** No screen spanning (single screen mode). */\n  None: 'none' as SpanCondition,\n  /** Any screen spanning mode is active (multi screen mode). */\n  Multi: 'multi' as SpanCondition,\n}\n                    \n                \n\n            \n                \n                    Enumeration of spanning mode conditions values for use with\nIfSpanDirective.\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
